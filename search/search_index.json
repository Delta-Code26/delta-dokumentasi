{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"\ud83d\udcd8 Dokumentasi JavaScript dari Nol sampai Mahir","text":"<p>Selamat datang di dokumentasi JavaScript dari Nol \u2014 panduan lengkap untuk siapa saja yang ingin memulai perjalanan dengan JavaScript, dari yang belum pernah ngoding sampai yang pengen jadi master JS sejati. \ud83d\ude80</p>"},{"location":"#tujuan-dokumentasi","title":"\ud83c\udfaf Tujuan Dokumentasi","text":"<p>Dokumentasi ini dibuat untuk:</p> <p>\u2705 Membantu pemula memahami dasar-dasar JavaScript \u2705 Memberikan landasan kuat di level menengah seperti DOM, modul, dan async \u2705 Menjadi panduan tingkat mahir dalam memahami konsep seperti event loop, OOP, functional programming, hingga keamanan</p>"},{"location":"#struktur-materi","title":"\ud83d\udcda Struktur Materi","text":"<p>Dokumentasi dibagi ke dalam tiga bagian besar:</p>"},{"location":"#1-pemula","title":"1. \ud83d\udc23 Pemula","text":"<p>Cocok untuk kamu yang baru kenalan dengan JavaScript</p> <ul> <li>Pengantar dan Setup \u27a1\ufe0f Buka</li> <li>Tipe Data &amp; Variabel</li> <li>Operator</li> <li>Fungsi</li> <li>Control Flow (if, loop, switch)</li> <li>Array &amp; Object</li> </ul>"},{"location":"#2-menengah","title":"2. \ud83d\ude80 Menengah","text":"<p>Setelah ngerti dasar, saatnya eksplor fitur-fitur modern</p> <ul> <li>DOM &amp; Event Handling</li> <li>Fetch API &amp; Async/Await</li> <li>Modularisasi JavaScript</li> <li>Higher-Order Function</li> <li>Struktur Data Lanjut (Set, Map, dsb)</li> </ul> <p>\u27a1\ufe0f Lihat: JavaScript Menengah</p>"},{"location":"#3-mahir","title":"3. \ud83e\udde0 Mahir","text":"<p>Level ninja. Cocok buat yang mau jadi frontend/backend developer serius</p> <ul> <li>Event Loop &amp; Asynchronous Engine</li> <li>OOP (Object-Oriented Programming)</li> <li>Functional Programming</li> <li>Keamanan di JavaScript</li> <li>Tools &amp; Ekosistem</li> <li>Testing &amp; Optimasi</li> </ul> <p>\u27a1\ufe0f Lihat: JavaScript Mahir</p>"},{"location":"#tools-yang-digunakan","title":"\ud83d\udee0 Tools yang Digunakan","text":"<ul> <li>MkDocs untuk dokumentasi</li> <li>Material for MkDocs untuk tampilan yang modern dan bersih</li> <li>GitHub Pages untuk hosting</li> </ul>"},{"location":"#cara-build-jalankan-dokumentasi","title":"\ud83d\udce6 Cara Build &amp; Jalankan Dokumentasi","text":"<pre><code># Clone repositori\ngit clone https://github.com/username/dokumentasi-javascript-dari-nol.git\ncd dokumentasi-javascript-dari-nol\n\n# Install dependencies\npip install mkdocs mkdocs-material\n\n# Jalankan lokal\nmkdocs serve\n\n# Deploy ke GitHub Pages\nmkdocs gh-deploy\n</code></pre> <p>Pastikan kamu sudah install Python &amp; pip ya!</p>"},{"location":"#kontribusi","title":"\u2764\ufe0f Kontribusi","text":"<p>Dokumentasi ini open-source dan bebas dikembangkan bareng. Kalau kamu punya ide, kritik, atau ingin nambahin materi, feel free buat:</p> <ul> <li>Fork repo</li> <li>Bikin branch baru</li> <li>Commit perubahan</li> <li>Buat Pull Request \u2728</li> </ul>"},{"location":"#terima-kasih","title":"\ud83d\ude4c Terima Kasih","text":"<p>Dokumentasi ini didedikasikan untuk para pejuang kode di seluruh penjuru dunia, terutama kamu yang lagi belajar, nyoba, gagal, lalu bangkit lagi. \ud83d\udd25</p> <p>\"JavaScript itu bukan tentang seberapa cepat kamu paham, tapi seberapa gigih kamu mencoba.\"</p> <p>Selamat belajar dan... semoga sukses! \ud83c\udf08</p> <p>```</p>"},{"location":"javascript/01-pemula/array-object/","title":"\ud83d\uddc3\ufe0f Array dan Object di JavaScript","text":"<p>Di JavaScript, Array dan Object adalah tipe data yang digunakan untuk menyimpan koleksi data. Array adalah struktur data yang menyimpan beberapa nilai dalam satu variabel, sementara Object menyimpan data dalam bentuk pasangan key-value. Keduanya sering digunakan untuk mengelola dan memanipulasi data dalam aplikasi.</p>"},{"location":"javascript/01-pemula/array-object/#1-array","title":"1. Array","text":"<p>Array adalah koleksi dari elemen-elemen yang terurut, dan setiap elemen dapat diakses dengan menggunakan indeks. Indeks array dimulai dari angka <code>0</code>.</p>"},{"location":"javascript/01-pemula/array-object/#membuat-array","title":"\ud83d\udccc Membuat Array","text":"<p>Array dapat dibuat menggunakan tanda kurung siku <code>[]</code> dan dipisahkan dengan koma.</p> <pre><code>let angka = [1, 2, 3, 4, 5];\nlet warna = [\"merah\", \"biru\", \"hijau\"];\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#mengakses-elemen-array","title":"\ud83d\udccc Mengakses Elemen Array","text":"<p>Untuk mengakses elemen di dalam array, kita menggunakan indeks.</p> <pre><code>let angka = [1, 2, 3, 4, 5];\nconsole.log(angka[0]);  // Output: 1\nconsole.log(angka[3]);  // Output: 4\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#mengubah-elemen-array","title":"\ud83d\udccc Mengubah Elemen Array","text":"<p>Kamu bisa mengubah nilai elemen array dengan mengakses indeks tertentu dan memberi nilai baru.</p> <pre><code>let warna = [\"merah\", \"biru\", \"hijau\"];\nwarna[1] = \"kuning\";  // Mengubah elemen kedua (indeks 1)\nconsole.log(warna);    // Output: [\"merah\", \"kuning\", \"hijau\"]\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#menambahkan-elemen-ke-array","title":"\ud83d\udccc Menambahkan Elemen ke Array","text":"<p>Gunakan metode <code>push()</code> untuk menambahkan elemen di akhir array.</p> <pre><code>let warna = [\"merah\", \"biru\"];\nwarna.push(\"hijau\");\nconsole.log(warna);  // Output: [\"merah\", \"biru\", \"hijau\"]\n</code></pre> <p>Untuk menambahkan elemen di awal array, gunakan <code>unshift()</code>.</p> <pre><code>let warna = [\"biru\", \"hijau\"];\nwarna.unshift(\"merah\");\nconsole.log(warna);  // Output: [\"merah\", \"biru\", \"hijau\"]\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#menghapus-elemen-dari-array","title":"\ud83d\udccc Menghapus Elemen dari Array","text":"<p>Untuk menghapus elemen dari akhir array, gunakan metode <code>pop()</code>.</p> <pre><code>let warna = [\"merah\", \"biru\", \"hijau\"];\nwarna.pop();\nconsole.log(warna);  // Output: [\"merah\", \"biru\"]\n</code></pre> <p>Untuk menghapus elemen dari awal array, gunakan <code>shift()</code>.</p> <pre><code>let warna = [\"merah\", \"biru\", \"hijau\"];\nwarna.shift();\nconsole.log(warna);  // Output: [\"biru\", \"hijau\"]\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#array-length","title":"\ud83d\udccc Array Length","text":"<p>Kamu bisa mendapatkan jumlah elemen dalam array dengan menggunakan properti <code>length</code>.</p> <pre><code>let warna = [\"merah\", \"biru\", \"hijau\"];\nconsole.log(warna.length);  // Output: 3\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#2-object","title":"2. Object","text":"<p>Object adalah tipe data yang digunakan untuk menyimpan data dalam bentuk pasangan key-value. Setiap key berfungsi sebagai identifikasi dan value adalah data yang terkait dengan key tersebut.</p>"},{"location":"javascript/01-pemula/array-object/#membuat-object","title":"\ud83d\udccc Membuat Object","text":"<p>Object dapat dibuat menggunakan tanda kurung kurawal <code>{}</code> dan pasangan key-value dipisahkan dengan tanda titik dua <code>:</code>.</p> <pre><code>let mobil = {\n  merek: \"Toyota\",\n  model: \"Corolla\",\n  tahun: 2020\n};\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#mengakses-nilai-dalam-object","title":"\ud83d\udccc Mengakses Nilai dalam Object","text":"<p>Untuk mengakses nilai dalam object, kamu bisa menggunakan dot notation atau bracket notation.</p>"},{"location":"javascript/01-pemula/array-object/#dot-notation","title":"Dot Notation","text":"<pre><code>console.log(mobil.merek);  // Output: \"Toyota\"\nconsole.log(mobil.tahun);  // Output: 2020\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#bracket-notation","title":"Bracket Notation","text":"<pre><code>console.log(mobil[\"merek\"]);  // Output: \"Toyota\"\nconsole.log(mobil[\"model\"]);  // Output: \"Corolla\"\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#menambah-atau-mengubah-properti-object","title":"\ud83d\udccc Menambah atau Mengubah Properti Object","text":"<p>Untuk menambah atau mengubah properti, kamu bisa menggunakan dot notation atau bracket notation.</p> <pre><code>mobil.warna = \"Hitam\";  // Menambahkan properti warna\nmobil[\"harga\"] = 20000; // Menambahkan properti harga\nconsole.log(mobil);\n</code></pre> <p>Jika properti sudah ada, maka nilainya akan diubah.</p> <pre><code>mobil.merek = \"Honda\";  // Mengubah nilai properti merek\nconsole.log(mobil.merek);  // Output: \"Honda\"\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#menghapus-properti-object","title":"\ud83d\udccc Menghapus Properti Object","text":"<p>Untuk menghapus properti dalam object, kamu bisa menggunakan operator <code>delete</code>.</p> <pre><code>delete mobil.tahun;\nconsole.log(mobil);  // Output: { merek: \"Honda\", model: \"Corolla\", warna: \"Hitam\", harga: 20000 }\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#mengakses-semua-key-dan-value-dalam-object","title":"\ud83d\udccc Mengakses Semua Key dan Value dalam Object","text":"<p>Untuk mendapatkan semua key dari object, kamu bisa menggunakan <code>Object.keys()</code>. Sedangkan untuk mendapatkan semua value, gunakan <code>Object.values()</code>.</p> <pre><code>let mobil = {\n  merek: \"Honda\",\n  model: \"Civic\",\n  tahun: 2021\n};\n\nconsole.log(Object.keys(mobil));  // Output: [\"merek\", \"model\", \"tahun\"]\nconsole.log(Object.values(mobil));  // Output: [\"Honda\", \"Civic\", 2021]\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#3-array-of-objects","title":"3. Array of Objects","text":"<p>Seringkali kita bekerja dengan array yang berisi objek-objek, terutama dalam situasi di mana kita perlu menyimpan koleksi data kompleks, seperti daftar pengguna, produk, atau entitas lainnya.</p>"},{"location":"javascript/01-pemula/array-object/#contoh-array-of-objects","title":"\ud83d\udccc Contoh Array of Objects","text":"<pre><code>let users = [\n  { id: 1, nama: \"John\", usia: 30 },\n  { id: 2, nama: \"Jane\", usia: 25 },\n  { id: 3, nama: \"Bob\", usia: 35 }\n];\n\nconsole.log(users[1].nama);  // Output: \"Jane\"\n</code></pre>"},{"location":"javascript/01-pemula/array-object/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Array: Digunakan untuk menyimpan daftar data yang terurut. Elemen-elemen array diakses menggunakan indeks, dimulai dari <code>0</code>.</li> <li>Object: Digunakan untuk menyimpan data dalam bentuk pasangan key-value, yang memungkinkan kita untuk mengakses nilai menggunakan key.</li> <li>Array of Objects: Sering digunakan untuk menyimpan koleksi objek dengan struktur yang lebih kompleks, seperti daftar pengguna atau produk.</li> </ul> <p>Dengan memahami cara kerja Array dan Object, kamu akan lebih mudah mengelola data dalam aplikasi JavaScript! Sekarang, kita akan lanjut ke pembahasan tentang Fungsi Array dan berbagai metode untuk memanipulasi array. ```</p>"},{"location":"javascript/01-pemula/control-flow/","title":"\ud83d\udee0\ufe0f Struktur Kontrol di JavaScript","text":"<p>Struktur kontrol adalah cara untuk menentukan jalannya eksekusi program berdasarkan kondisi tertentu atau mengulangi operasi. Di JavaScript, ada beberapa jenis struktur kontrol seperti percabangan dan perulangan.</p>"},{"location":"javascript/01-pemula/control-flow/#1-percabangan-conditional-statements","title":"1. Percabangan (Conditional Statements)","text":"<p>Percabangan memungkinkan kita untuk mengevaluasi kondisi dan mengeksekusi kode berdasarkan hasil evaluasi tersebut.</p>"},{"location":"javascript/01-pemula/control-flow/#if-statement","title":"\ud83d\udccc If Statement","text":"<p><code>if</code> digunakan untuk mengevaluasi sebuah kondisi. Jika kondisi tersebut benar (true), maka kode di dalam blok <code>if</code> akan dieksekusi.</p> <pre><code>let angka = 10;\nif (angka &gt; 5) {\n  console.log(\"Angka lebih besar dari 5\");\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#if-else-statement","title":"\ud83d\udccc If-Else Statement","text":"<p><code>if-else</code> memungkinkan kita untuk mengevaluasi kondisi dan memberikan alternatif jika kondisi tersebut tidak benar (false).</p> <pre><code>let angka = 3;\nif (angka &gt; 5) {\n  console.log(\"Angka lebih besar dari 5\");\n} else {\n  console.log(\"Angka tidak lebih besar dari 5\");\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#if-else-if-else-statement","title":"\ud83d\udccc If-Else If-Else Statement","text":"<p>Jika kamu memiliki lebih dari dua kondisi yang perlu dievaluasi, kamu bisa menggunakan <code>else if</code> untuk memeriksa kondisi lain.</p> <pre><code>let angka = 7;\nif (angka &gt; 10) {\n  console.log(\"Angka lebih besar dari 10\");\n} else if (angka &gt; 5) {\n  console.log(\"Angka lebih besar dari 5 tapi kurang dari atau sama dengan 10\");\n} else {\n  console.log(\"Angka kurang dari atau sama dengan 5\");\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#2-operator-logika-untuk-percabangan","title":"2. Operator Logika untuk Percabangan","text":"<p>Operator logika sering digunakan dalam kondisi <code>if</code> untuk mengevaluasi beberapa kondisi sekaligus.</p>"},{"location":"javascript/01-pemula/control-flow/#and","title":"\ud83d\udccc AND (&amp;&amp;)","text":"<p><code>&amp;&amp;</code> digunakan untuk memastikan semua kondisi dalam <code>if</code> bernilai <code>true</code>.</p> <pre><code>let a = 5;\nlet b = 10;\nif (a &gt; 0 &amp;&amp; b &gt; 5) {\n  console.log(\"Kedua kondisi benar\");\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#or","title":"\ud83d\udccc OR (||)","text":"<p><code>||</code> digunakan untuk memastikan salah satu kondisi dalam <code>if</code> bernilai <code>true</code>.</p> <pre><code>let a = 3;\nlet b = 10;\nif (a &gt; 0 || b &gt; 5) {\n  console.log(\"Salah satu kondisi benar\");\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#not","title":"\ud83d\udccc NOT (!)","text":"<p><code>!</code> digunakan untuk membalikkan nilai dari kondisi.</p> <pre><code>let a = true;\nif (!a) {\n  console.log(\"Kondisi a adalah false\");\n} else {\n  console.log(\"Kondisi a adalah true\");\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#3-switch-statement","title":"3. Switch Statement","text":"<p><code>switch</code> digunakan untuk memeriksa nilai dari suatu ekspresi terhadap beberapa kemungkinan nilai yang disebut dengan case. Jika nilai ekspresi cocok dengan salah satu <code>case</code>, maka kode dalam blok <code>case</code> tersebut akan dieksekusi.</p>"},{"location":"javascript/01-pemula/control-flow/#sintaks-switch","title":"\ud83d\udccc Sintaks Switch","text":"<pre><code>let warna = \"merah\";\nswitch (warna) {\n  case \"merah\":\n    console.log(\"Ini adalah warna merah\");\n    break;\n  case \"biru\":\n    console.log(\"Ini adalah warna biru\");\n    break;\n  default:\n    console.log(\"Warna tidak dikenali\");\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#penjelasan","title":"\ud83d\udccc Penjelasan:","text":"<ul> <li><code>case</code>: Mengecek apakah ekspresi cocok dengan nilai tersebut.</li> <li><code>break</code>: Menghentikan eksekusi setelah menemukan kecocokan.</li> <li><code>default</code>: Jika tidak ada yang cocok dengan <code>case</code>, maka blok kode di <code>default</code> yang akan dieksekusi.</li> </ul>"},{"location":"javascript/01-pemula/control-flow/#4-perulangan-loops","title":"4. Perulangan (Loops)","text":"<p>Perulangan digunakan untuk mengulangi eksekusi kode beberapa kali berdasarkan kondisi tertentu.</p>"},{"location":"javascript/01-pemula/control-flow/#for-loop","title":"\ud83d\udccc For Loop","text":"<p><code>for</code> digunakan ketika kita tahu jumlah iterasi yang pasti. Biasanya digunakan untuk perulangan dengan angka yang terstruktur.</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(i);  // Output: 0 1 2 3 4\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#while-loop","title":"\ud83d\udccc While Loop","text":"<p><code>while</code> digunakan ketika kita tidak tahu berapa kali perulangan yang akan dilakukan, tapi ingin melanjutkan selama kondisi tertentu terpenuhi.</p> <pre><code>let i = 0;\nwhile (i &lt; 5) {\n  console.log(i);  // Output: 0 1 2 3 4\n  i++;\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#do-while-loop","title":"\ud83d\udccc Do-While Loop","text":"<p><code>do-while</code> mirip dengan <code>while</code>, tetapi perbedaan utamanya adalah kode di dalam blok <code>do</code> akan dijalankan setidaknya sekali, bahkan jika kondisinya salah.</p> <pre><code>let i = 0;\ndo {\n  console.log(i);  // Output: 0 1 2 3 4\n  i++;\n} while (i &lt; 5);\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#5-break-dan-continue","title":"5. Break dan Continue","text":"<p><code>break</code> dan <code>continue</code> adalah dua perintah yang dapat digunakan untuk mengontrol alur perulangan.</p>"},{"location":"javascript/01-pemula/control-flow/#break","title":"\ud83d\udccc Break","text":"<p><code>break</code> digunakan untuk keluar dari perulangan, meskipun kondisi perulangan masih memenuhi.</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  if (i === 3) {\n    break;  // Menghentikan perulangan saat i = 3\n  }\n  console.log(i);  // Output: 0 1 2\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#continue","title":"\ud83d\udccc Continue","text":"<p><code>continue</code> digunakan untuk melewati sisa iterasi saat kondisi tertentu dipenuhi dan melanjutkan ke iterasi berikutnya.</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  if (i === 3) {\n    continue;  // Melewati iterasi saat i = 3\n  }\n  console.log(i);  // Output: 0 1 2 4\n}\n</code></pre>"},{"location":"javascript/01-pemula/control-flow/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Percabangan: Gunakan <code>if</code>, <code>else if</code>, dan <code>else</code> untuk mengevaluasi kondisi dan membuat keputusan.</li> <li>Switch: Digunakan untuk memilih antara banyak kondisi dengan cara yang lebih terstruktur.</li> <li>Perulangan: Gunakan <code>for</code>, <code>while</code>, atau <code>do-while</code> untuk mengulangi kode berdasarkan kondisi.</li> <li>Break dan Continue: Kontrol alur perulangan dengan <code>break</code> (keluar dari perulangan) dan <code>continue</code> (melanjutkan ke iterasi berikutnya).</li> </ul> <p>Sekarang, kamu sudah siap untuk mulai mengendalikan alur program menggunakan percabangan dan perulangan! Selanjutnya, kita akan belajar tentang Array dan bagaimana cara menyimpan dan mengelola data dalam JavaScript. ```</p> <p>Itu dia, penjelasan lengkap tentang Control Flow di JavaScript! Kalau sudah oke, aku siap untuk lanjut ke materi berikutnya, atau kalau ada bagian yang perlu diubah atau ditambah, tinggal kasih tahu!</p>"},{"location":"javascript/01-pemula/fungsi/","title":"\ud83d\udd27 Fungsi di JavaScript","text":"<p>Fungsi adalah sekumpulan kode yang bisa digunakan kembali untuk melakukan tugas tertentu. Fungsi bisa menerima input (parameter) dan mengembalikan hasil (output). Fungsi membantu membuat kode lebih terstruktur, modular, dan lebih mudah dipelihara.</p>"},{"location":"javascript/01-pemula/fungsi/#1-deklarasi-fungsi","title":"1. Deklarasi Fungsi","text":"<p>Fungsi bisa dideklarasikan dengan menggunakan kata kunci <code>function</code>, diikuti dengan nama fungsi, parameter (opsional), dan blok kode yang berisi logika fungsi.</p>"},{"location":"javascript/01-pemula/fungsi/#sintaks-fungsi","title":"\ud83d\udcdd Sintaks Fungsi:","text":"<pre><code>function namaFungsi(parameter1, parameter2) {\n  // Blok kode\n  return hasil;  // Optional, tergantung kebutuhan\n}\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#contoh-fungsi-sederhana","title":"\ud83d\udccc Contoh Fungsi Sederhana","text":"<pre><code>function sapa() {\n  console.log(\"Halo, selamat datang!\");\n}\n\nsapa();  // Output: Halo, selamat datang!\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#2-fungsi-dengan-parameter","title":"2. Fungsi dengan Parameter","text":"<p>Parameter adalah input yang diberikan ke dalam fungsi. Fungsi bisa menerima lebih dari satu parameter.</p>"},{"location":"javascript/01-pemula/fungsi/#contoh-fungsi-dengan-parameter","title":"\ud83d\udcdd Contoh Fungsi dengan Parameter","text":"<pre><code>function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);  // Memanggil fungsi dengan argumen 5 dan 3\nconsole.log(hasil);         // Output: 8\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#3-fungsi-dengan-return-value","title":"3. Fungsi dengan Return Value","text":"<p>Fungsi dapat mengembalikan (return) nilai setelah melakukan operasi. Nilai yang dikembalikan bisa disimpan dalam variabel atau langsung digunakan.</p>"},{"location":"javascript/01-pemula/fungsi/#contoh-fungsi-dengan-return","title":"\ud83d\udcdd Contoh Fungsi dengan Return","text":"<pre><code>function kali(a, b) {\n  return a * b;\n}\n\nlet hasil = kali(4, 5);  // Memanggil fungsi dan menyimpan hasilnya\nconsole.log(hasil);       // Output: 20\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#4-fungsi-anonim-anonymous-function","title":"4. Fungsi Anonim (Anonymous Function)","text":"<p>Fungsi anonim adalah fungsi yang tidak memiliki nama dan sering digunakan di tempat-tempat yang membutuhkan fungsi sementara, seperti dalam event handler atau callback.</p>"},{"location":"javascript/01-pemula/fungsi/#contoh-fungsi-anonim","title":"\ud83d\udcdd Contoh Fungsi Anonim","text":"<pre><code>let salam = function() {\n  console.log(\"Halo, dunia!\");\n};\n\nsalam();  // Output: Halo, dunia!\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#5-fungsi-arrow-arrow-function-es6","title":"5. Fungsi Arrow (Arrow Function) \u2014 ES6","text":"<p>Fungsi arrow (fungsi panah) adalah sintaks yang lebih ringkas untuk mendeklarasikan fungsi, dan memiliki <code>this</code> yang berbeda dengan fungsi biasa.</p>"},{"location":"javascript/01-pemula/fungsi/#sintaks-arrow-function","title":"\ud83d\udcdd Sintaks Arrow Function","text":"<pre><code>const namaFungsi = (parameter1, parameter2) =&gt; {\n  // Blok kode\n  return hasil;\n}\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#contoh-arrow-function","title":"\ud83d\udccc Contoh Arrow Function","text":"<pre><code>const kurang = (a, b) =&gt; a - b;\n\nlet hasil = kurang(9, 4);\nconsole.log(hasil);  // Output: 5\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#arrow-function-tanpa-parameter","title":"\ud83d\udcdd Arrow Function Tanpa Parameter","text":"<pre><code>const sapa = () =&gt; console.log(\"Selamat pagi!\");\nsapa();  // Output: Selamat pagi!\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#6-fungsi-sebagai-parameter-callback","title":"6. Fungsi sebagai Parameter (Callback)","text":"<p>Kamu bisa mengirimkan fungsi sebagai parameter ke fungsi lain. Fungsi ini sering disebut callback function.</p>"},{"location":"javascript/01-pemula/fungsi/#contoh-fungsi-callback","title":"\ud83d\udcdd Contoh Fungsi Callback","text":"<pre><code>function prosesAngka(angka, operasi) {\n  return operasi(angka);\n}\n\nlet hasil1 = prosesAngka(5, function(num) {\n  return num * num;  // Memanggil fungsi anonim untuk mengkuadratkan angka\n});\n\nlet hasil2 = prosesAngka(10, num =&gt; num - 2);  // Menggunakan arrow function\nconsole.log(hasil1);  // Output: 25\nconsole.log(hasil2);  // Output: 8\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#7-fungsi-dengan-parameter-default-default-parameters-es6","title":"7. Fungsi dengan Parameter Default (Default Parameters) \u2014 ES6","text":"<p>Kadang kita ingin memberi nilai default pada parameter fungsi jika tidak ada argumen yang diberikan. Ini bisa dilakukan dengan default parameter.</p>"},{"location":"javascript/01-pemula/fungsi/#contoh-default-parameter","title":"\ud83d\udcdd Contoh Default Parameter","text":"<pre><code>function sapa(nama = \"Guest\") {\n  console.log(\"Halo, \" + nama);\n}\n\nsapa();         // Output: Halo, Guest\nsapa(\"Marno\");  // Output: Halo, Marno\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#8-fungsi-rekursif","title":"8. Fungsi Rekursif","text":"<p>Fungsi rekursif adalah fungsi yang memanggil dirinya sendiri untuk menyelesaikan masalah. Fungsi ini biasanya digunakan untuk menyelesaikan masalah yang memiliki struktur yang bersifat berulang, seperti menghitung faktorial atau fibonacci.</p>"},{"location":"javascript/01-pemula/fungsi/#contoh-fungsi-rekursif-faktorial","title":"\ud83d\udcdd Contoh Fungsi Rekursif: Faktorial","text":"<pre><code>function faktorial(n) {\n  if (n === 0) {  // Basis dari rekursi\n    return 1;\n  }\n  return n * faktorial(n - 1);  // Rekursi\n}\n\nconsole.log(faktorial(5));  // Output: 120\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#9-fungsi-dengan-rest-parameter-rest-parameters-es6","title":"9. Fungsi dengan Rest Parameter (Rest Parameters) \u2014 ES6","text":"<p>Rest parameter memungkinkan kita untuk mengumpulkan parameter fungsi yang tidak terbatas jumlahnya menjadi sebuah array.</p>"},{"location":"javascript/01-pemula/fungsi/#contoh-rest-parameter","title":"\ud83d\udcdd Contoh Rest Parameter","text":"<pre><code>function hitungTotal(...angka) {\n  return angka.reduce((total, num) =&gt; total + num, 0);\n}\n\nconsole.log(hitungTotal(1, 2, 3, 4));  // Output: 10\n</code></pre>"},{"location":"javascript/01-pemula/fungsi/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Fungsi adalah blok kode yang dapat digunakan kembali untuk menyelesaikan tugas tertentu.</li> <li>Fungsi dapat memiliki parameter untuk menerima input dan mengembalikan nilai (menggunakan <code>return</code>).</li> <li>Ada beberapa tipe fungsi seperti fungsi anonim, arrow function, dan fungsi rekursif.</li> <li>Rest parameter memungkinkan kita untuk menangani jumlah parameter yang fleksibel.</li> </ul> <p>Selanjutnya, kita akan belajar tentang Struktur Kontrol seperti <code>if</code>, <code>switch</code>, dan <code>loop</code>. Siap untuk mulai percabangan dan perulangan? Yuk lanjut! ```</p>"},{"location":"javascript/01-pemula/intro/","title":"\ud83d\udc4b Selamat Datang di Dunia JavaScript!","text":"<p>JavaScript (biasa disingkat JS) adalah bahasa pemrograman yang digunakan untuk membuat halaman web menjadi interaktif dan dinamis. Kalau kamu pernah klik tombol yang muncul animasi, form yang bisa dicek langsung validasinya, atau bahkan game di browser\u2014besar kemungkinan itu dibuat pakai JavaScript.</p>"},{"location":"javascript/01-pemula/intro/#apa-itu-javascript","title":"\ud83e\udde0 Apa Itu JavaScript?","text":"<p>JavaScript adalah bahasa pemrograman tingkat tinggi yang berjalan di web browser maupun di luar browser (Node.js).</p> <p>Dulu JavaScript cuma bisa jalan di browser, tapi sekarang dengan bantuan Node.js, JavaScript bisa juga dipakai buat bikin: - Backend website (kayak PHP atau Python) - Aplikasi mobile (React Native) - Aplikasi desktop (Electron) - Bahkan Internet of Things (IoT)!</p>"},{"location":"javascript/01-pemula/intro/#kenapa-harus-belajar-javascript","title":"\ud83d\udd0d Kenapa Harus Belajar JavaScript?","text":"<p>\ud83d\udd25 Karena JavaScript itu:</p> <ul> <li>Wajib hukumnya buat Frontend Web Development</li> <li>Bisa dipakai buat Fullstack Development (Frontend + Backend)</li> <li>Salah satu bahasa yang paling banyak dicari perusahaan</li> <li>Banyak tools dan komunitasnya \u2014 artinya kamu gak ngoding sendirian</li> <li>Asik dipelajari! Sintaksnya cukup mudah dan fleksibel</li> </ul>"},{"location":"javascript/01-pemula/intro/#sejarah-singkat","title":"\ud83d\udd70\ufe0f Sejarah Singkat","text":"<ul> <li>1995: Dibuat oleh Brendan Eich dalam waktu 10 hari. Dulu namanya \"Mocha\" \u2192 lalu \"LiveScript\" \u2192 akhirnya jadi JavaScript (walau nggak ada hubungannya sama Java).</li> <li>1997: Jadi standar internasional dengan nama ECMAScript (ES)</li> <li>ES6 (2015): Update besar-besaran. Tambah fitur keren kayak <code>let</code>, <code>const</code>, arrow function, class, dan lain-lain.</li> <li>Sekarang terus berkembang dan makin kuat!</li> </ul>"},{"location":"javascript/01-pemula/intro/#javascript-digunakan-di-mana","title":"\ud83d\udee0\ufe0f JavaScript Digunakan Di Mana?","text":"<ul> <li>\ud83c\udf10 Website \u2192 Interaktif, animasi, validasi form, dll</li> <li>\ud83d\udda5\ufe0f Web App \u2192 Aplikasi yang jalan di browser (Gmail, Notion)</li> <li>\ud83d\udcf1 Mobile App \u2192 React Native, Ionic</li> <li>\ud83e\udde0 Machine Learning \u2192 TensorFlow.js</li> <li>\ud83d\udd27 Backend Server \u2192 Node.js</li> <li>\ud83d\udcdf IoT &amp; Game \u2192 Yes, bisa juga!</li> </ul>"},{"location":"javascript/01-pemula/intro/#gimana-cara-menjalankan-javascript","title":"\ud83d\ude80 Gimana Cara Menjalankan JavaScript?","text":""},{"location":"javascript/01-pemula/intro/#1-langsung-di-browser-console","title":"1. Langsung di Browser (Console)","text":"<p>Buka browser (Chrome, Firefox, Edge), lalu tekan <code>F12</code> \u2192 buka tab \"Console\", ketik ini:</p> <pre><code>console.log(\"Halo dunia!\");\n</code></pre> <p>Boom! JavaScript jalan!</p>"},{"location":"javascript/01-pemula/intro/#2-langsung-di-file-html","title":"2. Langsung di File HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;Belajar JS&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Halo Dunia!&lt;/h1&gt;\n    &lt;script&gt;\n      console.log(\"Saya belajar JavaScript!\");\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"javascript/01-pemula/intro/#3-menggunakan-nodejs-di-luar-browser","title":"3. Menggunakan Node.js (di luar browser)","text":"<p>Install Node.js \u2192 buka terminal:</p> <pre><code>node\n&gt; console.log(\"Halo dunia dari Node.js!\");\n</code></pre> <p>Atau simpan di file <code>hello.js</code> lalu jalankan:</p> <pre><code>node hello.js\n</code></pre>"},{"location":"javascript/01-pemula/intro/#apa-yang-akan-kamu-pelajari-selanjutnya","title":"\ud83d\udcda Apa yang Akan Kamu Pelajari Selanjutnya?","text":"<p>Perjalanan ini baru dimulai... Di bagian Pemula ini, kamu akan belajar:</p> <ol> <li>Variabel &amp; Tipe Data</li> <li>Operator dan Perbandingan</li> <li>Struktur Kontrol (if, loop, switch)</li> <li>Array &amp; Object</li> <li>Fungsi dan Scope</li> </ol> <p>Tenang, semuanya dijelasin dengan gaya santai dan banyak contoh real.</p>"},{"location":"javascript/01-pemula/intro/#penutup","title":"\u2728 Penutup","text":"<p>Belajar JavaScript itu kayak naik sepeda\u2014agak oleng di awal, tapi makin lama makin lancar dan seru. Jadi gas terus, dan jangan takut ngulang materi. Jangan cuma dibaca doang\u2014praktik itu wajib!</p> <p>\u201cPractice makes progress, not perfect. Tapi progress jauh lebih baik daripada stuck.\u201d</p> <p>Let's go! \ud83d\ude80</p> <p>```</p>"},{"location":"javascript/01-pemula/operator/","title":"\u2797 Operator di JavaScript","text":"<p>Operator digunakan untuk melakukan operasi pada variabel dan nilai. Di JavaScript, ada berbagai jenis operator yang bisa digunakan untuk berbagai keperluan.</p>"},{"location":"javascript/01-pemula/operator/#1-operator-aritmatika","title":"1. Operator Aritmatika","text":"<p>Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, dan pembagian.</p>"},{"location":"javascript/01-pemula/operator/#penjumlahan","title":"\ud83d\udd22 Penjumlahan (+)","text":"<pre><code>let a = 5;\nlet b = 3;\nlet hasil = a + b;  // 8\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/01-pemula/operator/#pengurangan-","title":"\u2796 Pengurangan (-)","text":"<pre><code>let a = 10;\nlet b = 4;\nlet hasil = a - b;  // 6\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/01-pemula/operator/#perkalian","title":"\u2716\ufe0f Perkalian (*)","text":"<pre><code>let a = 4;\nlet b = 2;\nlet hasil = a * b;  // 8\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/01-pemula/operator/#pembagian","title":"\u2797 Pembagian (/)","text":"<pre><code>let a = 10;\nlet b = 2;\nlet hasil = a / b;  // 5\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/01-pemula/operator/#modulus","title":"\u2797 Modulus (%)","text":"<p>Operator modulus memberikan sisa hasil bagi.</p> <pre><code>let a = 10;\nlet b = 3;\nlet hasil = a % b;  // 1\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/01-pemula/operator/#pangkatkan","title":"\ud83d\udd3c Pangkatkan ()**","text":"<p>Operator eksponen digunakan untuk menghitung pangkat.</p> <pre><code>let a = 2;\nlet b = 3;\nlet hasil = a ** b;  // 8 (2^3)\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/01-pemula/operator/#2-operator-penugasan","title":"2. Operator Penugasan","text":"<p>Operator penugasan digunakan untuk memberikan nilai pada variabel.</p>"},{"location":"javascript/01-pemula/operator/#tugas","title":"\ud83d\udcdd Tugas (=)","text":"<pre><code>let x = 5;\n</code></pre>"},{"location":"javascript/01-pemula/operator/#penugasan-dengan-penjumlahan","title":"\u2795 Penugasan dengan Penjumlahan (+=)","text":"<pre><code>let x = 10;\nx += 5;  // x = x + 5\nconsole.log(x); // Output: 15\n</code></pre>"},{"location":"javascript/01-pemula/operator/#penugasan-dengan-pengurangan-","title":"\u2796 Penugasan dengan Pengurangan (-=)","text":"<pre><code>let x = 10;\nx -= 5;  // x = x - 5\nconsole.log(x); // Output: 5\n</code></pre>"},{"location":"javascript/01-pemula/operator/#penugasan-dengan-perkalian","title":"\u2716\ufe0f Penugasan dengan Perkalian (*=)","text":"<pre><code>let x = 10;\nx *= 2;  // x = x * 2\nconsole.log(x); // Output: 20\n</code></pre>"},{"location":"javascript/01-pemula/operator/#penugasan-dengan-pembagian","title":"\u2797 Penugasan dengan Pembagian (/=)","text":"<pre><code>let x = 20;\nx /= 4;  // x = x / 4\nconsole.log(x); // Output: 5\n</code></pre>"},{"location":"javascript/01-pemula/operator/#3-operator-perbandingan","title":"3. Operator Perbandingan","text":"<p>Operator perbandingan digunakan untuk membandingkan dua nilai dan menghasilkan nilai Boolean (<code>true</code> atau <code>false</code>).</p>"},{"location":"javascript/01-pemula/operator/#sama-dengan","title":"\ud83c\udfc6 Sama dengan (==)","text":"<pre><code>let a = 5;\nlet b = 5;\nconsole.log(a == b);  // Output: true\n</code></pre>"},{"location":"javascript/01-pemula/operator/#tidak-sama-dengan","title":"\ud83d\uded1 Tidak sama dengan (!=)","text":"<pre><code>let a = 5;\nlet b = 3;\nconsole.log(a != b);  // Output: true\n</code></pre>"},{"location":"javascript/01-pemula/operator/#sama-dengan-secara-tipe-dan-nilai","title":"\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 Sama dengan secara tipe dan nilai (===)","text":"<pre><code>let a = 5;\nlet b = \"5\";\nconsole.log(a === b);  // Output: false (tipe berbeda)\n</code></pre>"},{"location":"javascript/01-pemula/operator/#tidak-sama-dengan-secara-tipe-dan-nilai","title":"\u274c Tidak sama dengan secara tipe dan nilai (!==)","text":"<pre><code>let a = 5;\nlet b = \"5\";\nconsole.log(a !== b);  // Output: true (tipe berbeda)\n</code></pre>"},{"location":"javascript/01-pemula/operator/#lebih-besar-dari","title":"\ud83d\udd3c Lebih besar dari (&gt;)","text":"<pre><code>let a = 5;\nlet b = 3;\nconsole.log(a &gt; b);  // Output: true\n</code></pre>"},{"location":"javascript/01-pemula/operator/#lebih-kecil-dari","title":"\ud83d\udd3d Lebih kecil dari (&lt;)","text":"<pre><code>let a = 3;\nlet b = 5;\nconsole.log(a &lt; b);  // Output: true\n</code></pre>"},{"location":"javascript/01-pemula/operator/#lebih-besar-atau-sama-dengan","title":"\ud83d\udccf Lebih besar atau sama dengan (&gt;=)","text":"<pre><code>let a = 5;\nlet b = 5;\nconsole.log(a &gt;= b);  // Output: true\n</code></pre>"},{"location":"javascript/01-pemula/operator/#lebih-kecil-atau-sama-dengan","title":"\ud83d\udccf Lebih kecil atau sama dengan (&lt;=)","text":"<pre><code>let a = 3;\nlet b = 5;\nconsole.log(a &lt;= b);  // Output: true\n</code></pre>"},{"location":"javascript/01-pemula/operator/#4-operator-logika","title":"4. Operator Logika","text":"<p>Operator logika digunakan untuk menggabungkan beberapa kondisi.</p>"},{"location":"javascript/01-pemula/operator/#and","title":"\ud83d\udfe2 AND (&amp;&amp;)","text":"<p>Mengevaluasi menjadi <code>true</code> jika kedua kondisi benar.</p> <pre><code>let a = 5;\nlet b = 10;\nconsole.log(a &gt; 0 &amp;&amp; b &gt; 5);  // Output: true\n</code></pre>"},{"location":"javascript/01-pemula/operator/#or","title":"\ud83d\udd34 OR (||)","text":"<p>Mengevaluasi menjadi <code>true</code> jika salah satu kondisi benar.</p> <pre><code>let a = 5;\nlet b = 3;\nconsole.log(a &gt; 0 || b &gt; 5);  // Output: true\n</code></pre>"},{"location":"javascript/01-pemula/operator/#not","title":"\u274c NOT (!)","text":"<p>Mengevaluasi kebalikan dari kondisi.</p> <pre><code>let a = true;\nconsole.log(!a);  // Output: false\n</code></pre>"},{"location":"javascript/01-pemula/operator/#5-operator-ternary","title":"5. Operator Ternary","text":"<p>Operator ternary adalah cara singkat untuk menulis <code>if</code>-<code>else</code> dalam satu baris.</p> <pre><code>let usia = 18;\nlet status = usia &gt;= 18 ? \"Dewasa\" : \"Anak-anak\";\nconsole.log(status);  // Output: Dewasa\n</code></pre>"},{"location":"javascript/01-pemula/operator/#6-operator-bitwise-lanjutan","title":"6. Operator Bitwise (Lanjutan)","text":"<p>Operator bitwise beroperasi pada level bit. Biasanya digunakan untuk optimasi atau manipulasi bit-level dalam aplikasi yang membutuhkan performa tinggi.</p> <p>Contoh penggunaan:</p> <pre><code>let a = 5;  // 0101\nlet b = 3;  // 0011\nconsole.log(a &amp; b);  // Output: 1 (0101 &amp; 0011)\n</code></pre>"},{"location":"javascript/01-pemula/operator/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Operator Aritmatika: Digunakan untuk operasi matematika dasar seperti penjumlahan, pengurangan, dll.</li> <li>Operator Penugasan: Memudahkan kita dalam memberi nilai dan melakukan operasi langsung pada variabel.</li> <li>Operator Perbandingan: Digunakan untuk membandingkan dua nilai, hasilnya adalah <code>true</code> atau <code>false</code>.</li> <li>Operator Logika: Digunakan untuk menggabungkan beberapa kondisi logika.</li> <li>Operator Ternary: Cara singkat untuk membuat percabangan dengan satu baris kode.</li> </ul> <p>Selanjutnya, kita akan belajar tentang Struktur Kontrol (if, switch, loop). Yuk lanjut! ```</p>"},{"location":"javascript/01-pemula/tipe-data/","title":"\ud83e\uddee Tipe Data di JavaScript","text":"<p>Tipe data (atau data types) menentukan jenis informasi yang bisa disimpan dalam variabel. Misalnya, apakah itu angka, teks, atau bahkan objek kompleks. Di JavaScript, ada beberapa tipe data yang perlu kamu kenal.</p>"},{"location":"javascript/01-pemula/tipe-data/#1-tipe-data-primitif","title":"1. Tipe Data Primitif","text":"<p>Tipe data primitif adalah tipe data dasar yang tidak dapat diubah setelah dideklarasikan. Berikut tipe data primitif di JavaScript:</p>"},{"location":"javascript/01-pemula/tipe-data/#number-angka","title":"\ud83d\udd22 Number (Angka)","text":"<p>Untuk menyimpan angka, baik bulat maupun desimal.</p> <pre><code>let umur = 25;           // Integer\nlet harga = 100.50;      // Float\nlet pi = 3.14159;        // Pi, decimal\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#string-teks","title":"\ud83c\udd70\ufe0f String (Teks)","text":"<p>Untuk menyimpan teks. String bisa menggunakan tanda kutip ganda (<code>\"</code>) atau kutip tunggal (<code>'</code>).</p> <pre><code>let nama = \"Marno\";\nlet alamat = 'Malaysia';\nlet kalimat = \"Halo, apa kabar?\";\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#boolean-benarsalah","title":"\u2696\ufe0f Boolean (Benar/Salah)","text":"<p>Hanya ada dua nilai: <code>true</code> atau <code>false</code>.</p> <pre><code>let isAdmin = true;\nlet isLoggedIn = false;\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#null","title":"\ud83c\udfc6 Null","text":"<p>Tipe data ini menunjukkan bahwa variabel sengaja dikosongkan atau tidak memiliki nilai.</p> <pre><code>let dataKosong = null;\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#undefined","title":"\ud83d\udd32 Undefined","text":"<p>Tipe data ini berarti variabel belum diberi nilai sama sekali.</p> <pre><code>let belumDitetapkan;\nconsole.log(belumDitetapkan); // Output: undefined\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#symbol-es6","title":"\ud83d\udca5 Symbol (ES6)","text":"<p>Digunakan untuk membuat nilai unik. Biasanya digunakan dalam aplikasi yang lebih kompleks.</p> <pre><code>let id = Symbol(\"id\");\nconsole.log(id); // Output: Symbol(id)\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#bigint-es11","title":"\ud83e\udde9 BigInt (ES11)","text":"<p>Tipe data untuk angka yang sangat besar (lebih besar dari <code>Number.MAX_SAFE_INTEGER</code>).</p> <pre><code>let angkaBesar = 1234567890123456789012345678901234567890n;\nconsole.log(angkaBesar); // Output: 1234567890123456789012345678901234567890n\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#2-tipe-data-non-primitif-referensi","title":"2. Tipe Data Non-Primitif (Referensi)","text":"<p>Tipe data non-primitif adalah tipe data yang bisa diubah, dan nilainya bisa mengacu ke tempat lain. Contohnya adalah Object dan Array.</p>"},{"location":"javascript/01-pemula/tipe-data/#object","title":"\ud83d\udce6 Object","text":"<p>Digunakan untuk menyimpan pasangan key-value (seperti dictionary).</p> <pre><code>let person = {\n  nama: \"Marno\",\n  umur: 25,\n  alamat: \"Malaysia\"\n};\n\nconsole.log(person.nama); // Output: Marno\nconsole.log(person.umur); // Output: 25\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#array","title":"\ud83d\udcda Array","text":"<p>Digunakan untuk menyimpan beberapa nilai dalam satu variabel.</p> <pre><code>let warna = [\"merah\", \"biru\", \"hijau\"];\nconsole.log(warna[0]); // Output: merah\nconsole.log(warna[1]); // Output: biru\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#3-tipe-data-lainnya","title":"3. Tipe Data Lainnya","text":""},{"location":"javascript/01-pemula/tipe-data/#nan-not-a-number","title":"NaN (Not a Number)","text":"<p>Tipe data ini muncul ketika operasi yang dilakukan menghasilkan nilai yang tidak valid untuk angka, seperti pembagian dengan nol.</p> <pre><code>let hasil = 0 / 0;\nconsole.log(hasil); // Output: NaN\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#infinity-dan-infinity","title":"Infinity dan -Infinity","text":"<p>Representasi angka yang lebih besar dari angka terbesar yang bisa ditangani oleh JavaScript (positif atau negatif).</p> <pre><code>let angkaPositif = 1 / 0;\nlet angkaNegatif = -1 / 0;\n\nconsole.log(angkaPositif); // Output: Infinity\nconsole.log(angkaNegatif); // Output: -Infinity\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#4-konversi-tipe-data-type-conversion","title":"4. Konversi Tipe Data (Type Conversion)","text":"<p>JavaScript bisa otomatis mengonversi tipe data saat diperlukan. Namun, kamu juga bisa melakukan konversi manual:</p>"},{"location":"javascript/01-pemula/tipe-data/#string-ke-number","title":"\ud83d\udd04 String ke Number","text":"<pre><code>let angka = \"123\";\nlet angkaKeNumber = Number(angka);  // Konversi ke Number\nconsole.log(angkaKeNumber); // Output: 123\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#number-ke-string","title":"\ud83d\udd04 Number ke String","text":"<pre><code>let angka = 123;\nlet angkaKeString = String(angka);  // Konversi ke String\nconsole.log(angkaKeString); // Output: \"123\"\n</code></pre>"},{"location":"javascript/01-pemula/tipe-data/#5-tips-best-practice","title":"5. Tips &amp; Best Practice","text":"<ul> <li>Gunakan tipe data yang tepat: Pilih <code>Number</code> untuk angka, <code>String</code> untuk teks, dan <code>Boolean</code> untuk kondisi (true/false).</li> <li>Pahami perbedaan antara <code>null</code> dan <code>undefined</code>: <code>null</code> adalah nilai yang sengaja dihilangkan, sedangkan <code>undefined</code> berarti variabel belum diberi nilai.</li> <li>Cek tipe data menggunakan <code>typeof</code>:   <code>js   console.log(typeof \"Hello\");   // Output: string   console.log(typeof 25);        // Output: number   console.log(typeof true);      // Output: boolean</code></li> </ul>"},{"location":"javascript/01-pemula/tipe-data/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Tipe data adalah jenis informasi yang disimpan dalam variabel.</li> <li>JavaScript memiliki berbagai tipe data, baik yang primitif (Number, String, Boolean) maupun non-primitif (Object, Array).</li> <li>Pahami dan gunakan tipe data yang sesuai dengan kebutuhanmu.</li> </ul> <p>Selanjutnya, kita akan bahas tentang Operator. Siap untuk operasi matematika dan logika? Yuk lanjut! ```</p>"},{"location":"javascript/01-pemula/variabel/","title":"\ud83d\udd21 Variabel di JavaScript","text":"<p>Variabel adalah wadah untuk menyimpan data. Kayak laci\u2014kita taruh sesuatu di dalamnya, terus kita bisa ambil lagi nanti.</p> <p>Di JavaScript, kita bisa buat variabel dengan 3 cara:</p> <pre><code>var\nlet\nconst\n</code></pre>"},{"location":"javascript/01-pemula/variabel/#var-yang-tua-tapi-masih-ada","title":"\ud83e\uddd3 <code>var</code> \u2014 Yang Tua Tapi Masih Ada","text":"<pre><code>var nama = \"Marno\";\nconsole.log(nama); // Output: Marno\n</code></pre>"},{"location":"javascript/01-pemula/variabel/#tapi-hati-hati","title":"\u26a0\ufe0f Tapi hati-hati:","text":"<ul> <li>Bisa dideklarasi ulang (<code>redeclaration</code>)</li> <li>Scope-nya function, bukan block</li> <li>Kena hoisting (naik ke atas)</li> </ul> <p>\ud83d\udeab Saran: Hindari <code>var</code>, karena sering bikin bug misterius</p>"},{"location":"javascript/01-pemula/variabel/#let-favorit-developer","title":"\ud83e\uddd1\u200d\ud83d\udcbb <code>let</code> \u2014 Favorit Developer","text":"<pre><code>let umur = 25;\numur = 26; // \u2705 bisa diubah\nconsole.log(umur);\n</code></pre>"},{"location":"javascript/01-pemula/variabel/#kelebihan","title":"\u2705 Kelebihan:","text":"<ul> <li>Scope-nya block (aman!)</li> <li>Tidak bisa dideklarasi ulang dalam scope yang sama</li> </ul> <pre><code>let umur = 25;\nlet umur = 30; // \u274c error\n</code></pre>"},{"location":"javascript/01-pemula/variabel/#const-konstanta-tetap-selamanya","title":"\ud83d\udd12 <code>const</code> \u2014 Konstanta, Tetap Selamanya","text":"<pre><code>const negara = \"Malaysia\";\nconsole.log(negara);\n</code></pre>"},{"location":"javascript/01-pemula/variabel/#catatan","title":"\u26a0\ufe0f Catatan:","text":"<ul> <li>Tidak bisa diubah nilainya</li> <li>Tapi kalau isi-nya object atau array, isinya bisa diubah:</li> </ul> <pre><code>const data = [1, 2, 3];\ndata.push(4);       // \u2705 Boleh\ndata = [1, 2, 3, 4]; // \u274c Error\n</code></pre>"},{"location":"javascript/01-pemula/variabel/#perbandingan-cepat","title":"\ud83d\udd0d Perbandingan Cepat","text":"Keyword Bisa diubah Bisa deklarasi ulang Scope Hoisting <code>var</code> \u2705 Ya \u2705 Ya Function \u2705 Ya <code>let</code> \u2705 Ya \u274c Tidak Block \u274c Tidak <code>const</code> \u274c Tidak \u274c Tidak Block \u274c Tidak"},{"location":"javascript/01-pemula/variabel/#tips-best-practice","title":"\ud83e\udde0 Tips &amp; Best Practice","text":"<p>\u2705 Gunakan <code>const</code> by default \ud83d\udd01 Gunakan <code>let</code> jika perlu mengubah nilainya \u274c Hindari <code>var</code>, kecuali kamu lagi audit kode zaman Majapahit</p>"},{"location":"javascript/01-pemula/variabel/#contoh-real-life","title":"\ud83c\udfaf Contoh Real-life","text":"<pre><code>const namaDepan = \"Andi\";\nlet saldo = 10000;\n\nsaldo += 5000;\n\nconsole.log(`Halo ${namaDepan}, saldo Anda: Rp${saldo}`);\n</code></pre> <p>Output:</p> <pre><code>Halo Andi, saldo Anda: Rp15000\n</code></pre>"},{"location":"javascript/01-pemula/variabel/#kesimpulan","title":"\ud83d\udcac Kesimpulan","text":"<ul> <li>Variabel = tempat simpan data</li> <li>Gunakan <code>let</code> dan <code>const</code>, jauhi <code>var</code></li> <li>Pahami scope dan mutability (bisa diubah atau tidak)</li> </ul> <p>Selanjutnya kita akan bahas tentang Tipe Data. Yuk lanjut! ```</p>"},{"location":"javascript/02-menengah/async/","title":"\u23f3 Async Programming di JavaScript","text":"<p>Di JavaScript, beberapa operasi seperti pengambilan data dari server atau pembacaan file tidak dapat dilakukan secara langsung karena memerlukan waktu. Untuk itu, JavaScript menawarkan cara untuk menangani operasi-operasi tersebut secara asynchronous. Ini memungkinkan aplikasi tetap responsif dan tidak terblokir saat menjalankan operasi berat.</p>"},{"location":"javascript/02-menengah/async/#1-apa-itu-asynchronous-programming","title":"1. Apa itu Asynchronous Programming?","text":"<p>Asynchronous programming memungkinkan kode untuk dieksekusi secara non-blokir, yang berarti kode berikutnya dapat berjalan tanpa menunggu operasi yang sedang berlangsung selesai. Ini sangat penting ketika kita berurusan dengan tugas-tugas yang memakan waktu seperti membaca file, mengakses API, atau query database.</p>"},{"location":"javascript/02-menengah/async/#synchronous-vs-asynchronous","title":"\ud83d\udccc Synchronous vs Asynchronous","text":"<ul> <li>Synchronous: Proses yang dilakukan satu per satu. Kode akan menunggu operasi selesai sebelum melanjutkan ke operasi berikutnya.</li> <li>Asynchronous: Proses yang dapat berjalan secara bersamaan, memungkinkan operasi berikutnya untuk dijalankan tanpa menunggu operasi sebelumnya selesai.</li> </ul>"},{"location":"javascript/02-menengah/async/#contoh-synchronous","title":"\ud83d\udccc Contoh Synchronous","text":"<pre><code>console.log(\"Mulai\");\nconsole.log(\"Proses 1 selesai\");\nconsole.log(\"Proses 2 selesai\");\n</code></pre>"},{"location":"javascript/02-menengah/async/#contoh-asynchronous","title":"\ud83d\udccc Contoh Asynchronous","text":"<pre><code>console.log(\"Mulai\");\n\nsetTimeout(() =&gt; {\n  console.log(\"Proses 1 selesai\");\n}, 2000);  // Proses ini terjadi setelah 2 detik\n\nconsole.log(\"Proses 2 selesai\");\n</code></pre> <p>Pada contoh di atas, meskipun ada <code>setTimeout</code> yang memerlukan waktu 2 detik, JavaScript tidak menunggu dan langsung menjalankan <code>console.log(\"Proses 2 selesai\")</code>.</p>"},{"location":"javascript/02-menengah/async/#2-callback-functions","title":"2. Callback Functions","text":"<p>Callback adalah fungsi yang diberikan sebagai argumen kepada fungsi lain dan dijalankan setelah operasi asynchronous selesai.</p>"},{"location":"javascript/02-menengah/async/#contoh-callback","title":"\ud83d\udccc Contoh Callback","text":"<pre><code>function ambilData(callback) {\n  setTimeout(() =&gt; {\n    callback(\"Data berhasil diambil\");\n  }, 2000);\n}\n\nambilData((message) =&gt; {\n  console.log(message);  // Output: \"Data berhasil diambil\"\n});\n</code></pre> <p>Di sini, <code>ambilData</code> adalah fungsi yang menerima sebuah callback yang akan dijalankan setelah 2 detik.</p>"},{"location":"javascript/02-menengah/async/#3-promises","title":"3. Promises","text":"<p>Promise adalah objek yang mewakili penyelesaian atau kegagalan dari sebuah operasi asynchronous. Promise memiliki tiga keadaan:</p> <ol> <li>Pending: Janji belum diselesaikan.</li> <li>Fulfilled: Janji berhasil diselesaikan (resolved).</li> <li>Rejected: Janji gagal diselesaikan.</li> </ol>"},{"location":"javascript/02-menengah/async/#membuat-promise","title":"\ud83d\udccc Membuat Promise","text":"<pre><code>let promise = new Promise((resolve, reject) =&gt; {\n  let success = true;\n\n  if (success) {\n    resolve(\"Operasi berhasil\");\n  } else {\n    reject(\"Operasi gagal\");\n  }\n});\n\npromise.then((message) =&gt; {\n  console.log(message);  // Output: \"Operasi berhasil\"\n}).catch((message) =&gt; {\n  console.log(message);  // Jika terjadi error, tampilkan \"Operasi gagal\"\n});\n</code></pre> <ul> <li><code>resolve()</code> digunakan ketika operasi berhasil.</li> <li><code>reject()</code> digunakan ketika operasi gagal.</li> </ul>"},{"location":"javascript/02-menengah/async/#menggunakan-then-dan-catch","title":"\ud83d\udccc Menggunakan .then() dan .catch()","text":"<p><code>then()</code> digunakan untuk menangani hasil yang berhasil, sementara <code>catch()</code> digunakan untuk menangani error.</p> <pre><code>let promise = new Promise((resolve, reject) =&gt; {\n  let success = false;\n\n  if (success) {\n    resolve(\"Data berhasil diambil\");\n  } else {\n    reject(\"Data gagal diambil\");\n  }\n});\n\npromise\n  .then((data) =&gt; {\n    console.log(data);  // Output jika resolve\n  })\n  .catch((error) =&gt; {\n    console.log(error);  // Output jika reject\n  });\n</code></pre>"},{"location":"javascript/02-menengah/async/#4-asyncawait","title":"4. Async/Await","text":"<p><code>async/await</code> adalah cara modern untuk menangani operasi asynchronous di JavaScript dengan cara yang lebih mudah dibaca dan ditulis. <code>async</code> digunakan untuk mendeklarasikan fungsi yang akan mengembalikan sebuah Promise, dan <code>await</code> digunakan untuk menunggu penyelesaian dari sebuah Promise sebelum melanjutkan ke kode berikutnya.</p>"},{"location":"javascript/02-menengah/async/#menggunakan-asyncawait","title":"\ud83d\udccc Menggunakan async/await","text":"<pre><code>async function ambilData() {\n  let result = await new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(\"Data berhasil diambil\");\n    }, 2000);\n  });\n\n  console.log(result);  // Output: \"Data berhasil diambil\"\n}\n\nambilData();\n</code></pre> <ul> <li><code>await</code> hanya bisa digunakan di dalam fungsi yang dideklarasikan dengan <code>async</code>.</li> <li><code>await</code> menunggu sampai Promise selesai sebelum melanjutkan ke baris kode berikutnya.</li> </ul>"},{"location":"javascript/02-menengah/async/#5-error-handling-dengan-trycatch","title":"5. Error Handling dengan try/catch","text":"<p>Ketika menggunakan <code>async/await</code>, kita dapat menangani error dengan menggunakan blok <code>try/catch</code>.</p>"},{"location":"javascript/02-menengah/async/#contoh-penggunaan-trycatch","title":"\ud83d\udccc Contoh Penggunaan try/catch","text":"<pre><code>async function ambilData() {\n  try {\n    let result = await new Promise((resolve, reject) =&gt; {\n      let success = false;  // Simulasikan error\n      setTimeout(() =&gt; {\n        if (success) {\n          resolve(\"Data berhasil diambil\");\n        } else {\n          reject(\"Data gagal diambil\");\n        }\n      }, 2000);\n    });\n\n    console.log(result);\n  } catch (error) {\n    console.log(\"Error:\", error);  // Output: \"Error: Data gagal diambil\"\n  }\n}\n\nambilData();\n</code></pre> <p>Dengan <code>try/catch</code>, kita dapat menangani error yang mungkin terjadi selama proses asynchronous.</p>"},{"location":"javascript/02-menengah/async/#6-menggunakan-multiple-async-functions","title":"6. Menggunakan Multiple Async Functions","text":"<p>Jika kamu memiliki beberapa operasi asynchronous yang perlu dijalankan secara bersamaan, kamu bisa menggunakan <code>Promise.all()</code> untuk menunggu semua Promise selesai.</p>"},{"location":"javascript/02-menengah/async/#contoh-promiseall","title":"\ud83d\udccc Contoh Promise.all","text":"<pre><code>async function ambilData() {\n  let promise1 = new Promise((resolve) =&gt; setTimeout(() =&gt; resolve(\"Data 1 selesai\"), 2000));\n  let promise2 = new Promise((resolve) =&gt; setTimeout(() =&gt; resolve(\"Data 2 selesai\"), 3000));\n\n  let result = await Promise.all([promise1, promise2]);\n  console.log(result);  // Output: [\"Data 1 selesai\", \"Data 2 selesai\"]\n}\n\nambilData();\n</code></pre> <p><code>Promise.all()</code> akan menunggu hingga semua Promise dalam array selesai sebelum melanjutkan eksekusi.</p>"},{"location":"javascript/02-menengah/async/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Asynchronous Programming: Menangani operasi yang memerlukan waktu, seperti pengambilan data atau operasi IO, tanpa memblokir eksekusi program.</li> <li>Callback: Fungsi yang diberikan kepada fungsi lain dan dieksekusi setelah operasi asynchronous selesai.</li> <li>Promise: Representasi dari sebuah operasi asynchronous yang bisa berhasil atau gagal.</li> <li>async/await: Cara modern untuk menulis kode asynchronous dengan cara yang lebih mudah dibaca dan ditulis.</li> <li>Error Handling: Gunakan <code>try/catch</code> untuk menangani error yang terjadi pada operasi asynchronous.</li> </ul> <p>Dengan memahami konsep Async Programming, kamu bisa menulis kode JavaScript yang lebih efisien dan mudah dipahami. Selanjutnya, kita akan bahas tentang Event Loop dan bagaimana JavaScript mengelola operasi asynchronous di bawah tenda. ```</p>"},{"location":"javascript/02-menengah/dom-event/","title":"\ud83d\uddb1\ufe0f DOM Events di JavaScript","text":"<p>DOM Events adalah salah satu fitur terpenting dalam pengembangan web interaktif. Ketika pengguna berinteraksi dengan halaman web (misalnya mengklik tombol, menggulir halaman, atau mengisi formulir), event akan terpicu. JavaScript memungkinkan kita untuk menangani event tersebut agar aplikasi kita lebih dinamis dan responsif.</p>"},{"location":"javascript/02-menengah/dom-event/#1-apa-itu-dom-events","title":"1. Apa itu DOM Events?","text":"<p>DOM (Document Object Model) adalah representasi struktur HTML dalam bentuk objek yang dapat dimanipulasi dengan JavaScript. DOM Events adalah kejadian atau interaksi yang terjadi pada elemen-elemen di dalam dokumen HTML, seperti klik, input data, atau perubahan status elemen.</p> <p>Contoh event: <code>click</code>, <code>keydown</code>, <code>submit</code>, <code>mouseover</code>, dan banyak lagi.</p>"},{"location":"javascript/02-menengah/dom-event/#2-jenis-jenis-event-di-javascript","title":"2. Jenis-jenis Event di JavaScript","text":"<p>Berikut adalah beberapa contoh event yang sering digunakan di JavaScript:</p> <ul> <li>click: Terjadi ketika elemen di klik.</li> <li>keydown: Terjadi ketika tombol pada keyboard ditekan.</li> <li>keyup: Terjadi ketika tombol pada keyboard dilepaskan.</li> <li>submit: Terjadi ketika formulir disubmit.</li> <li>mouseover: Terjadi ketika pointer mouse berada di atas elemen.</li> <li>mouseout: Terjadi ketika pointer mouse meninggalkan elemen.</li> </ul>"},{"location":"javascript/02-menengah/dom-event/#3-menambahkan-event-listener","title":"3. Menambahkan Event Listener","text":"<p>Untuk menangani event, kita dapat menggunakan metode <code>addEventListener()</code>. Metode ini memungkinkan kita untuk mendengarkan (listen) event yang terjadi pada elemen tertentu dan menjalankan fungsi callback ketika event tersebut dipicu.</p>"},{"location":"javascript/02-menengah/dom-event/#sintaks-addeventlistener","title":"\ud83d\udccc Sintaks <code>addEventListener()</code>","text":"<pre><code>element.addEventListener(event, callback, useCapture);\n</code></pre> <ul> <li>event: Nama event yang ingin didengarkan (misalnya <code>click</code>, <code>keydown</code>).</li> <li>callback: Fungsi yang akan dijalankan ketika event terjadi.</li> <li>useCapture: (Opsional) Parameter ini menentukan apakah event harus ditangani pada fase capture atau bubbling. Default-nya adalah <code>false</code> (bubbling).</li> </ul>"},{"location":"javascript/02-menengah/dom-event/#contoh-penggunaan-addeventlistener","title":"\ud83d\udccc Contoh Penggunaan <code>addEventListener</code>","text":"<pre><code>&lt;button id=\"myButton\"&gt;Klik Saya!&lt;/button&gt;\n\n&lt;script&gt;\n  const button = document.getElementById(\"myButton\");\n\n  button.addEventListener(\"click\", function() {\n    alert(\"Tombol diklik!\");\n  });\n&lt;/script&gt;\n</code></pre> <p>Di atas, kita mendengarkan event <code>click</code> pada tombol dengan ID <code>myButton</code>. Ketika tombol tersebut diklik, fungsi callback yang menampilkan alert akan dijalankan.</p>"},{"location":"javascript/02-menengah/dom-event/#4-event-bubbling-dan-capturing","title":"4. Event Bubbling dan Capturing","text":"<p>Event Bubbling dan Event Capturing adalah dua fase yang terjadi ketika event dipicu. Pada default-nya, event menggunakan bubbling.</p>"},{"location":"javascript/02-menengah/dom-event/#event-bubbling","title":"\ud83d\udccc Event Bubbling","text":"<p>Pada bubbling, event dimulai dari elemen yang paling dalam (target) dan menyebar ke elemen-elemen luar (parent).</p> <p>Contoh:</p> <pre><code>&lt;div id=\"outer\"&gt;\n  &lt;button id=\"inner\"&gt;Klik Saya!&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  const outerDiv = document.getElementById(\"outer\");\n  const innerButton = document.getElementById(\"inner\");\n\n  outerDiv.addEventListener(\"click\", function() {\n    alert(\"Outer div diklik!\");\n  });\n\n  innerButton.addEventListener(\"click\", function() {\n    alert(\"Button diklik!\");\n  });\n&lt;/script&gt;\n</code></pre> <p>Pada contoh ini, ketika tombol diklik, akan muncul dua alert: 1. \"Button diklik!\" 2. \"Outer div diklik!\"</p> <p>Ini terjadi karena event bubbling dari tombol menyebar ke elemen induk <code>div</code>.</p>"},{"location":"javascript/02-menengah/dom-event/#event-capturing","title":"\ud83d\udccc Event Capturing","text":"<p>Pada capturing, event dimulai dari elemen paling luar dan menyebar ke elemen paling dalam. Untuk menggunakan capturing, kamu harus mengatur parameter ketiga pada <code>addEventListener()</code> menjadi <code>true</code>.</p> <pre><code>outerDiv.addEventListener(\"click\", function() {\n  alert(\"Outer div diklik pada fase capturing!\");\n}, true);\n</code></pre>"},{"location":"javascript/02-menengah/dom-event/#5-menghapus-event-listener","title":"5. Menghapus Event Listener","text":"<p>Jika kita tidak lagi membutuhkan event listener, kita bisa menghapusnya menggunakan <code>removeEventListener()</code>.</p>"},{"location":"javascript/02-menengah/dom-event/#sintaks-removeeventlistener","title":"\ud83d\udccc Sintaks <code>removeEventListener()</code>","text":"<pre><code>element.removeEventListener(event, callback);\n</code></pre>"},{"location":"javascript/02-menengah/dom-event/#contoh-menghapus-event-listener","title":"\ud83d\udccc Contoh Menghapus Event Listener","text":"<pre><code>&lt;button id=\"myButton\"&gt;Klik Saya!&lt;/button&gt;\n\n&lt;script&gt;\n  const button = document.getElementById(\"myButton\");\n\n  function handleClick() {\n    alert(\"Tombol diklik!\");\n  }\n\n  button.addEventListener(\"click\", handleClick);\n\n  // Hapus event listener setelah 3 detik\n  setTimeout(function() {\n    button.removeEventListener(\"click\", handleClick);\n    alert(\"Event listener dihapus!\");\n  }, 3000);\n&lt;/script&gt;\n</code></pre> <p>Pada contoh ini, event listener untuk tombol akan dihapus setelah 3 detik. Jadi, tombol hanya bisa diklik satu kali dalam waktu 3 detik.</p>"},{"location":"javascript/02-menengah/dom-event/#6-event-object","title":"6. Event Object","text":"<p>Saat sebuah event terjadi, objek event yang berisi informasi terkait dengan event tersebut akan diteruskan ke fungsi callback. Dengan menggunakan objek ini, kita bisa mendapatkan data seperti elemen yang memicu event, posisi mouse, key yang ditekan, dan banyak lagi.</p>"},{"location":"javascript/02-menengah/dom-event/#contoh-penggunaan-event-object","title":"\ud83d\udccc Contoh Penggunaan Event Object","text":"<pre><code>&lt;button id=\"myButton\"&gt;Klik Saya!&lt;/button&gt;\n\n&lt;script&gt;\n  const button = document.getElementById(\"myButton\");\n\n  button.addEventListener(\"click\", function(event) {\n    alert(\"Tombol diklik pada posisi X: \" + event.clientX + \", Y: \" + event.clientY);\n  });\n&lt;/script&gt;\n</code></pre> <p>Pada contoh ini, objek event memberikan informasi mengenai posisi mouse saat tombol diklik (<code>event.clientX</code> dan <code>event.clientY</code>).</p>"},{"location":"javascript/02-menengah/dom-event/#7-event-delegation","title":"7. Event Delegation","text":"<p>Event delegation adalah teknik untuk menangani event pada elemen-elemen yang baru ditambahkan atau banyak elemen yang serupa, dengan menggunakan event listener pada elemen induk. Ini sangat efisien karena kita hanya perlu menambahkan satu listener pada elemen induk dan menangani event untuk semua elemen anak.</p>"},{"location":"javascript/02-menengah/dom-event/#contoh-event-delegation","title":"\ud83d\udccc Contoh Event Delegation","text":"<pre><code>&lt;ul id=\"list\"&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n  const list = document.getElementById(\"list\");\n\n  list.addEventListener(\"click\", function(event) {\n    if (event.target.tagName === \"LI\") {\n      alert(\"Item \" + event.target.textContent + \" diklik!\");\n    }\n  });\n&lt;/script&gt;\n</code></pre> <p>Pada contoh ini, kita mendengarkan event <code>click</code> pada elemen <code>ul</code> (induk). Ketika item <code>li</code> diklik, kita menggunakan event delegation untuk menangani klik tersebut.</p>"},{"location":"javascript/02-menengah/dom-event/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>DOM Events memungkinkan kita untuk menangani interaksi pengguna dengan elemen HTML.</li> <li>Dengan <code>addEventListener()</code>, kita bisa menambahkan event listener untuk berbagai jenis event.</li> <li>Event Bubbling dan Capturing adalah dua fase yang terjadi saat event dipicu.</li> <li>Event Object memberikan informasi terkait event yang terjadi.</li> <li>Event Delegation memungkinkan kita menangani event pada banyak elemen dengan menambahkan satu event listener pada elemen induk.</li> </ul> <p>Dengan memahami dan menguasai DOM Events, aplikasi web kamu akan menjadi lebih interaktif dan dinamis! Selanjutnya, kita akan membahas lebih lanjut mengenai AJAX dan bagaimana cara mengirim permintaan HTTP secara asynchronous. ```</p>"},{"location":"javascript/02-menengah/fetch-api/","title":"\ud83c\udf10 Fetch API di JavaScript","text":"<p>Fetch API adalah cara modern untuk melakukan permintaan HTTP (seperti GET, POST, PUT, DELETE) ke server. Fetch menggantikan metode lama seperti <code>XMLHttpRequest</code> dan memberikan cara yang lebih bersih dan mudah dibaca untuk menangani permintaan dan respons HTTP secara asinkronus. Fetch API juga mengembalikan Promise, yang memungkinkan kita untuk menangani hasil permintaan HTTP dengan menggunakan <code>then()</code> atau <code>async/await</code>.</p>"},{"location":"javascript/02-menengah/fetch-api/#1-apa-itu-fetch-api","title":"1. Apa itu Fetch API?","text":"<p>Fetch API menyediakan antarmuka untuk melakukan permintaan HTTP dan mengambil respons dari server. Dengan menggunakan Promise, Fetch memungkinkan kita untuk bekerja dengan kode asinkron dengan cara yang lebih elegan.</p>"},{"location":"javascript/02-menengah/fetch-api/#fetch-api-dan-promise","title":"\ud83d\udccc Fetch API dan Promise","text":"<ul> <li><code>fetch()</code>: Metode utama dari Fetch API yang digunakan untuk membuat permintaan HTTP.</li> <li><code>then()</code>: Digunakan untuk menangani respons yang diterima setelah permintaan selesai.</li> <li><code>catch()</code>: Digunakan untuk menangani error yang terjadi selama permintaan.</li> </ul>"},{"location":"javascript/02-menengah/fetch-api/#2-sintaks-dasar-fetch","title":"2. Sintaks Dasar <code>fetch()</code>","text":"<p>Berikut adalah sintaks dasar dari <code>fetch()</code>:</p> <pre><code>fetch(url, options)\n  .then(response =&gt; response.json())  // Mengonversi respons menjadi format JSON\n  .then(data =&gt; console.log(data))     // Menampilkan data yang diterima\n  .catch(error =&gt; console.log(error)); // Menangani error jika ada\n</code></pre> <ul> <li><code>url</code>: URL tempat kita mengirim permintaan.</li> <li><code>options</code>: (Opsional) Opsi tambahan untuk permintaan seperti metode HTTP, headers, body, dll.</li> </ul>"},{"location":"javascript/02-menengah/fetch-api/#contoh-penggunaan-fetch","title":"\ud83d\udccc Contoh Penggunaan <code>fetch()</code>","text":"<pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts\")\n  .then(response =&gt; response.json())  // Mengonversi respons JSON\n  .then(data =&gt; console.log(data))     // Menampilkan data yang diterima\n  .catch(error =&gt; console.log(error)); // Menangani error\n</code></pre> <p>Pada contoh ini, kita mengirimkan permintaan GET ke URL <code>https://jsonplaceholder.typicode.com/posts</code> dan menampilkan data yang diterima dalam format JSON.</p>"},{"location":"javascript/02-menengah/fetch-api/#3-metode-http-di-fetch-api","title":"3. Metode HTTP di Fetch API","text":"<p>Fetch API mendukung berbagai metode HTTP seperti <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, dan lainnya. Kita bisa menambahkan metode ini melalui opsi <code>method</code> dalam objek <code>options</code>.</p>"},{"location":"javascript/02-menengah/fetch-api/#contoh-permintaan-get","title":"\ud83d\udccc Contoh Permintaan GET","text":"<p>Permintaan GET digunakan untuk mengambil data dari server.</p> <pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts\")\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.log(error));\n</code></pre>"},{"location":"javascript/02-menengah/fetch-api/#contoh-permintaan-post","title":"\ud83d\udccc Contoh Permintaan POST","text":"<p>Permintaan POST digunakan untuk mengirimkan data ke server. Biasanya digunakan saat mengirim formulir atau data dalam format JSON.</p> <pre><code>const postData = {\n  title: \"Post Baru\",\n  body: \"Ini adalah konten dari post baru.\",\n  userId: 1\n};\n\nfetch(\"https://jsonplaceholder.typicode.com/posts\", {\n  method: \"POST\", // Menggunakan metode POST\n  headers: {\n    \"Content-Type\": \"application/json\"  // Menyatakan bahwa data yang dikirimkan adalah JSON\n  },\n  body: JSON.stringify(postData)  // Mengonversi data menjadi format JSON\n})\n  .then(response =&gt; response.json())  // Mengonversi respons menjadi JSON\n  .then(data =&gt; console.log(data))     // Menampilkan data yang diterima\n  .catch(error =&gt; console.log(error)); // Menangani error\n</code></pre> <p>Di sini, kita mengirimkan data JSON menggunakan metode POST ke server.</p>"},{"location":"javascript/02-menengah/fetch-api/#contoh-permintaan-put","title":"\ud83d\udccc Contoh Permintaan PUT","text":"<p>Permintaan PUT digunakan untuk memperbarui data yang ada di server.</p> <pre><code>const updateData = {\n  title: \"Post Diperbarui\",\n  body: \"Ini adalah konten post yang telah diperbarui.\",\n  userId: 1\n};\n\nfetch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  method: \"PUT\", // Menggunakan metode PUT\n  headers: {\n    \"Content-Type\": \"application/json\"  // Menyatakan bahwa data yang dikirimkan adalah JSON\n  },\n  body: JSON.stringify(updateData)  // Mengonversi data menjadi format JSON\n})\n  .then(response =&gt; response.json())  // Mengonversi respons menjadi JSON\n  .then(data =&gt; console.log(data))     // Menampilkan data yang diterima\n  .catch(error =&gt; console.log(error)); // Menangani error\n</code></pre>"},{"location":"javascript/02-menengah/fetch-api/#contoh-permintaan-delete","title":"\ud83d\udccc Contoh Permintaan DELETE","text":"<p>Permintaan DELETE digunakan untuk menghapus data dari server.</p> <pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  method: \"DELETE\", // Menggunakan metode DELETE\n})\n  .then(response =&gt; {\n    if (response.ok) {\n      console.log(\"Data berhasil dihapus\");\n    } else {\n      console.log(\"Gagal menghapus data\");\n    }\n  })\n  .catch(error =&gt; console.log(error)); // Menangani error\n</code></pre>"},{"location":"javascript/02-menengah/fetch-api/#4-menangani-respons","title":"4. Menangani Respons","text":"<p>Setelah permintaan selesai, kita perlu menangani respons yang diterima dari server. Respons dari <code>fetch()</code> bukanlah data yang langsung bisa digunakan, tetapi sebuah objek <code>Response</code> yang perlu diproses lebih lanjut.</p>"},{"location":"javascript/02-menengah/fetch-api/#respons-status-dan-status-code","title":"\ud83d\udccc Respons Status dan Status Code","text":"<p>Sebelum kita memproses data, kita bisa memeriksa status dari respons menggunakan properti <code>ok</code> atau <code>status</code> dari objek <code>Response</code>.</p> <pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts\")\n  .then(response =&gt; {\n    if (response.ok) {\n      return response.json(); // Mengonversi ke format JSON jika respons berhasil\n    } else {\n      throw new Error(\"Gagal mendapatkan data\");\n    }\n  })\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.log(error)); // Menangani error\n</code></pre> <p>Di sini, kita memeriksa apakah respons berhasil dengan memeriksa properti <code>response.ok</code>. Jika respons berhasil, kita mengonversinya menjadi JSON.</p>"},{"location":"javascript/02-menengah/fetch-api/#5-menggunakan-asyncawait-dengan-fetch","title":"5. Menggunakan Async/Await dengan Fetch","text":"<p>Selain menggunakan <code>then()</code> untuk menangani <code>Promise</code>, kita juga bisa menggunakan async/await untuk menulis kode yang lebih bersih dan mudah dibaca.</p>"},{"location":"javascript/02-menengah/fetch-api/#contoh-asyncawait-dengan-fetch","title":"\ud83d\udccc Contoh Async/Await dengan Fetch","text":"<pre><code>async function fetchData() {\n  try {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    if (!response.ok) {\n      throw new Error(\"Gagal mendapatkan data\");\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfetchData();\n</code></pre> <p>Dengan async/await, kita menulis kode yang lebih mirip dengan kode synchronous meskipun masih menangani operasi asinkronus.</p>"},{"location":"javascript/02-menengah/fetch-api/#6-menangani-error-dalam-fetch-api","title":"6. Menangani Error dalam Fetch API","text":"<p>Jika terjadi kesalahan selama permintaan HTTP, kita bisa menangani error menggunakan <code>catch()</code> atau dengan menggunakan blok <code>try/catch</code> ketika menggunakan async/await.</p>"},{"location":"javascript/02-menengah/fetch-api/#error-yang-dapat-terjadi","title":"\ud83d\udccc Error yang Dapat Terjadi","text":"<ul> <li>Kesalahan jaringan: Jika ada masalah dengan koneksi internet atau server tidak dapat dijangkau.</li> <li>Status HTTP yang tidak berhasil: Jika server mengembalikan status selain 2xx, seperti 404 atau 500.</li> </ul>"},{"location":"javascript/02-menengah/fetch-api/#contoh-error-handling","title":"\ud83d\udccc Contoh Error Handling","text":"<pre><code>fetch(\"https://jsonplaceholder.typicode.com/invalid-url\")\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error(\"Gagal mendapatkan data\");\n    }\n    return response.json();\n  })\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.log(\"Terjadi error: \", error)); // Menangani error\n</code></pre>"},{"location":"javascript/02-menengah/fetch-api/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Fetch API adalah cara modern untuk melakukan permintaan HTTP dan menangani respons di JavaScript.</li> <li>Menggunakan <code>fetch()</code>, kita bisa mengirimkan permintaan HTTP dengan metode seperti GET, POST, PUT, dan DELETE.</li> <li>Respons dari <code>fetch()</code> perlu diproses lebih lanjut untuk mengonversi data menjadi format yang dapat digunakan.</li> <li>Dengan menggunakan async/await, kita bisa menulis kode yang lebih bersih dan mudah dipahami.</li> <li>Error handling sangat penting untuk menangani masalah yang terjadi selama permintaan HTTP.</li> </ul> <p>Dengan memahami Fetch API, kamu bisa berinteraksi dengan server secara asinkronus dan mengambil atau mengirim data dengan cara yang efisien dan terstruktur. Selanjutnya, kita akan bahas tentang AJAX dan bagaimana cara mengirim permintaan HTTP menggunakan teknik yang lebih lama namun masih banyak digunakan di banyak aplikasi web. ```</p>"},{"location":"javascript/02-menengah/higher-order/","title":"\ud83c\udfd7\ufe0f Higher-Order Functions di JavaScript","text":"<p>Fungsi tingkat tinggi (Higher-Order Functions) adalah fungsi yang menerima satu atau lebih fungsi sebagai argumen atau mengembalikan fungsi sebagai hasil. Ini adalah konsep dasar dalam pemrograman fungsional dan digunakan secara luas dalam JavaScript untuk menangani koleksi data, manipulasi fungsi, dan banyak lagi.</p>"},{"location":"javascript/02-menengah/higher-order/#1-apa-itu-higher-order-functions","title":"1. Apa itu Higher-Order Functions?","text":"<p>Fungsi disebut higher-order jika: - Fungsi tersebut menerima satu atau lebih fungsi sebagai argumen. - Fungsi tersebut mengembalikan fungsi lain.</p> <p>Konsep ini memungkinkan kita untuk membuat kode lebih modular dan terstruktur, serta membuat fungsi lebih fleksibel dan dapat digunakan kembali.</p>"},{"location":"javascript/02-menengah/higher-order/#contoh-fungsi-tingkat-tinggi","title":"\ud83d\udccc Contoh Fungsi Tingkat Tinggi","text":"<p>Berikut adalah contoh fungsi yang menerima fungsi sebagai argumen:</p> <pre><code>function greet(name, callback) {\n  return `Hello, ${name}. ${callback()}`;\n}\n\nfunction sayGoodbye() {\n  return \"Goodbye!\";\n}\n\nconsole.log(greet(\"John\", sayGoodbye)); // Output: Hello, John. Goodbye!\n</code></pre> <p>Di sini, fungsi <code>greet()</code> adalah fungsi tingkat tinggi karena menerima fungsi <code>sayGoodbye()</code> sebagai argumen.</p>"},{"location":"javascript/02-menengah/higher-order/#2-fungsi-yang-mengembalikan-fungsi","title":"2. Fungsi yang Mengembalikan Fungsi","text":"<p>Selain menerima fungsi sebagai argumen, fungsi tingkat tinggi juga bisa mengembalikan fungsi sebagai hasil. Berikut adalah contoh sederhana fungsi yang mengembalikan fungsi:</p> <pre><code>function multiplyBy(factor) {\n  return function(number) {\n    return number * factor;\n  };\n}\n\nconst multiplyBy2 = multiplyBy(2);\nconsole.log(multiplyBy2(5)); // Output: 10\n</code></pre> <p>Fungsi <code>multiplyBy()</code> mengembalikan fungsi lain yang kemudian digunakan untuk mengalikan angka dengan faktor yang ditentukan.</p>"},{"location":"javascript/02-menengah/higher-order/#3-fungsi-fungsi-tingkat-tinggi-dalam-javascript","title":"3. Fungsi-fungsi Tingkat Tinggi dalam JavaScript","text":"<p>JavaScript memiliki banyak metode built-in yang merupakan contoh dari higher-order functions. Beberapa di antaranya adalah metode array seperti map(), filter(), dan reduce().</p>"},{"location":"javascript/02-menengah/higher-order/#map","title":"\ud83d\udccc <code>map()</code>","text":"<p>Metode <code>map()</code> digunakan untuk membuat array baru dengan hasil pemanggilan fungsi pada setiap elemen dalam array.</p> <pre><code>const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(num =&gt; num * 2);\nconsole.log(doubled); // Output: [2, 4, 6, 8]\n</code></pre> <p>Fungsi yang diberikan pada <code>map()</code> dipanggil pada setiap elemen array, menghasilkan array baru dengan nilai yang dimodifikasi.</p>"},{"location":"javascript/02-menengah/higher-order/#filter","title":"\ud83d\udccc <code>filter()</code>","text":"<p>Metode <code>filter()</code> digunakan untuk membuat array baru yang hanya berisi elemen-elemen yang memenuhi kriteria yang ditentukan dalam fungsi.</p> <pre><code>const numbers = [1, 2, 3, 4, 5];\nconst evenNumbers = numbers.filter(num =&gt; num % 2 === 0);\nconsole.log(evenNumbers); // Output: [2, 4]\n</code></pre> <p>Di sini, fungsi yang diberikan pada <code>filter()</code> akan menyaring elemen-elemen yang genap dari array.</p>"},{"location":"javascript/02-menengah/higher-order/#reduce","title":"\ud83d\udccc <code>reduce()</code>","text":"<p>Metode <code>reduce()</code> digunakan untuk mengakumulasi nilai array menjadi satu nilai tunggal berdasarkan fungsi yang diberikan.</p> <pre><code>const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, num) =&gt; acc + num, 0);\nconsole.log(sum); // Output: 10\n</code></pre> <p>Fungsi yang diberikan pada <code>reduce()</code> menerima dua argumen: akumulator (<code>acc</code>) dan elemen saat ini (<code>num</code>). Setiap iterasi, nilai akumulator akan diperbarui dengan hasil fungsi tersebut.</p>"},{"location":"javascript/02-menengah/higher-order/#4-membuat-fungsi-tingkat-tinggi-sendiri","title":"4. Membuat Fungsi Tingkat Tinggi Sendiri","text":"<p>Kita bisa membuat fungsi tingkat tinggi yang lebih kompleks, seperti fungsi yang menggabungkan beberapa fungsi atau fungsi yang memodifikasi perilaku fungsi lain.</p>"},{"location":"javascript/02-menengah/higher-order/#contoh-fungsi-once","title":"\ud83d\udccc Contoh: Fungsi <code>once()</code>","text":"<p>Fungsi <code>once()</code> memastikan bahwa fungsi yang diberikan hanya akan dipanggil satu kali, tidak lebih.</p> <pre><code>function once(fn) {\n  let called = false;\n  return function() {\n    if (!called) {\n      fn();\n      called = true;\n    }\n  };\n}\n\nconst sayHelloOnce = once(() =&gt; console.log(\"Hello!\"));\nsayHelloOnce(); // Output: Hello!\nsayHelloOnce(); // Tidak ada output\n</code></pre> <p>Fungsi <code>once()</code> adalah contoh dari fungsi tingkat tinggi yang mengembalikan fungsi lain, yang hanya dapat dipanggil sekali.</p>"},{"location":"javascript/02-menengah/higher-order/#5-fungsi-bind-call-dan-apply","title":"5. Fungsi <code>bind()</code>, <code>call()</code>, dan <code>apply()</code>","text":"<p>Metode <code>bind()</code>, <code>call()</code>, dan <code>apply()</code> adalah contoh fungsi tingkat tinggi yang sering digunakan untuk mengubah konteks eksekusi suatu fungsi.</p>"},{"location":"javascript/02-menengah/higher-order/#bind","title":"\ud83d\udccc <code>bind()</code>","text":"<p>Metode <code>bind()</code> mengembalikan fungsi baru yang memiliki konteks tertentu (nilai <code>this</code>).</p> <pre><code>const person = {\n  name: \"Alice\",\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n};\n\nconst greetAlice = person.greet.bind(person);\ngreetAlice(); // Output: Hello, Alice\n</code></pre> <p>Dengan <code>bind()</code>, kita dapat mengikat fungsi ke objek tertentu.</p>"},{"location":"javascript/02-menengah/higher-order/#call-dan-apply","title":"\ud83d\udccc <code>call()</code> dan <code>apply()</code>","text":"<p>Metode <code>call()</code> dan <code>apply()</code> digunakan untuk memanggil fungsi dengan konteks tertentu, tetapi cara pengoperasian argumen berbeda.</p> <pre><code>function greet(greeting, punctuation) {\n  console.log(`${greeting}, ${this.name}${punctuation}`);\n}\n\nconst person = { name: \"Bob\" };\n\ngreet.call(person, \"Hello\", \"!\"); // Output: Hello, Bob!\ngreet.apply(person, [\"Hello\", \"!\"]); // Output: Hello, Bob!\n</code></pre> <p>Kedua metode ini memungkinkan kita untuk mengubah konteks (<code>this</code>) dan memanggil fungsi dengan parameter yang ditentukan.</p>"},{"location":"javascript/02-menengah/higher-order/#6-keuntungan-dan-kelemahan-fungsi-tingkat-tinggi","title":"6. Keuntungan dan Kelemahan Fungsi Tingkat Tinggi","text":""},{"location":"javascript/02-menengah/higher-order/#keuntungan","title":"\u2705 Keuntungan","text":"<ul> <li>Modularitas: Fungsi tingkat tinggi memungkinkan kita untuk memecah masalah besar menjadi bagian-bagian kecil yang lebih mudah dikelola.</li> <li>Reusable: Fungsi yang menerima atau mengembalikan fungsi lain dapat digunakan kembali di berbagai tempat.</li> <li>Mempermudah Asinkronus: Fungsi tingkat tinggi sering digunakan dalam penanganan asinkronus seperti callback, promise, dan async/await.</li> </ul>"},{"location":"javascript/02-menengah/higher-order/#kelemahan","title":"\u274c Kelemahan","text":"<ul> <li>Kompleksitas: Terlalu banyak penggunaan fungsi tingkat tinggi bisa membuat kode menjadi lebih sulit dimengerti.</li> <li>Performa: Jika tidak digunakan dengan bijak, fungsi tingkat tinggi bisa berdampak pada performa, terutama dalam operasi berulang pada data besar.</li> </ul>"},{"location":"javascript/02-menengah/higher-order/#7-kesimpulan","title":"7. Kesimpulan","text":"<p>Fungsi tingkat tinggi (Higher-Order Functions) adalah konsep penting dalam pemrograman JavaScript yang memungkinkan kita untuk menulis kode yang lebih modular dan fleksibel. Dengan menggunakan fungsi-fungsi seperti <code>map()</code>, <code>filter()</code>, dan <code>reduce()</code>, kita bisa lebih mudah menangani koleksi data. Memahami cara kerja fungsi tingkat tinggi adalah keterampilan yang sangat berharga dalam menulis kode yang efisien dan terstruktur.</p> <p>Sekarang, kita telah membahas tentang fungsi tingkat tinggi di JavaScript. Selanjutnya, kita akan melihat bagaimana konsep-konsep ini digunakan dalam berbagai pustaka dan framework JavaScript. ```</p>"},{"location":"javascript/02-menengah/modularisasi/","title":"\ud83e\udde9 Modularisasi di JavaScript","text":"<p>Modularisasi adalah teknik memecah program besar menjadi bagian-bagian kecil (modul) yang terpisah dan mandiri. Setiap modul memiliki tanggung jawab spesifik dan bisa digunakan kembali. Konsep ini sangat penting untuk menjaga kode tetap rapi, terorganisir, dan mudah dipelihara.</p>"},{"location":"javascript/02-menengah/modularisasi/#1-mengapa-perlu-modularisasi","title":"1. Mengapa Perlu Modularisasi?","text":"<p>Tanpa modularisasi, kode JavaScript bisa jadi seperti mi instan yang kebanyakan bumbu\u2014berantakan dan susah dipisah. Modularisasi membantu:</p> <ul> <li>Memecah kode menjadi bagian kecil yang terpisah.</li> <li>Menghindari penulisan ulang kode (reusability).</li> <li>Memudahkan testing, debugging, dan pengembangan tim.</li> <li>Meningkatkan keterbacaan dan maintainability.</li> </ul>"},{"location":"javascript/02-menengah/modularisasi/#2-modularisasi-tradisional-iife-namespace","title":"2. Modularisasi Tradisional: IIFE &amp; Namespace","text":"<p>Sebelum ES6, kita menggunakan IIFE (Immediately Invoked Function Expression) dan objek global sebagai \"namespace\".</p>"},{"location":"javascript/02-menengah/modularisasi/#iife-immediately-invoked-function-expression","title":"\ud83d\udccc IIFE (Immediately Invoked Function Expression)","text":"<pre><code>const MyModule = (function() {\n  const privateVar = \"Rahasia\";\n\n  function privateFunc() {\n    console.log(\"Fungsi private\");\n  }\n\n  return {\n    publicFunc: function() {\n      console.log(\"Fungsi public\");\n    }\n  };\n})();\n\nMyModule.publicFunc(); // Fungsi public\n</code></pre>"},{"location":"javascript/02-menengah/modularisasi/#namespace-objek-global","title":"\ud83d\udccc Namespace (Objek Global)","text":"<pre><code>const App = {};\nApp.sayHello = function(name) {\n  console.log(`Hello, ${name}`);\n};\nApp.sayHello(\"Marno\");\n</code></pre> <p>Kelemahannya: bisa terjadi konflik jika banyak modul memakai nama yang sama di global scope.</p>"},{"location":"javascript/02-menengah/modularisasi/#3-modularisasi-modern-dengan-es-modules-esm","title":"3. Modularisasi Modern dengan ES Modules (ESM)","text":"<p>Sejak ES6, JavaScript mendukung modularisasi native lewat <code>import</code> dan <code>export</code>.</p>"},{"location":"javascript/02-menengah/modularisasi/#export","title":"\ud83d\udee0\ufe0f Export","text":"<p>Ada dua jenis export: named export dan default export.</p>"},{"location":"javascript/02-menengah/modularisasi/#named-export","title":"Named Export","text":"<pre><code>// file: math.js\nexport const PI = 3.14;\nexport function tambah(a, b) {\n  return a + b;\n}\n</code></pre>"},{"location":"javascript/02-menengah/modularisasi/#default-export","title":"Default Export","text":"<pre><code>// file: greet.js\nexport default function(name) {\n  console.log(`Hello, ${name}`);\n}\n</code></pre>"},{"location":"javascript/02-menengah/modularisasi/#import","title":"\ud83d\udce5 Import","text":""},{"location":"javascript/02-menengah/modularisasi/#import-named","title":"Import Named","text":"<pre><code>// file: main.js\nimport { PI, tambah } from './math.js';\n\nconsole.log(tambah(2, 3)); // 5\n</code></pre>"},{"location":"javascript/02-menengah/modularisasi/#import-default","title":"Import Default","text":"<pre><code>// file: main.js\nimport greet from './greet.js';\n\ngreet('Marno'); // Hello, Marno\n</code></pre>"},{"location":"javascript/02-menengah/modularisasi/#import-semua","title":"Import Semua","text":"<pre><code>import * as MathUtils from './math.js';\n\nconsole.log(MathUtils.PI);\n</code></pre>"},{"location":"javascript/02-menengah/modularisasi/#4-struktur-proyek-modular","title":"4. Struktur Proyek Modular","text":"<p>Struktur folder modular sangat membantu dalam skala besar:</p> <pre><code>\ud83d\udce6project\n \u2523 \ud83d\udcc2modules\n \u2503 \u2523 \ud83d\udcdcmath.js\n \u2503 \u2523 \ud83d\udcdcuser.js\n \u2523 \ud83d\udcdcmain.js\n</code></pre> <p>Contoh isi <code>math.js</code>:</p> <pre><code>export function tambah(a, b) {\n  return a + b;\n}\n\nexport function kurang(a, b) {\n  return a - b;\n}\n</code></pre> <p>Lalu digunakan di <code>main.js</code>:</p> <pre><code>import { tambah, kurang } from './modules/math.js';\n\nconsole.log(tambah(10, 5)); // 15\n</code></pre>"},{"location":"javascript/02-menengah/modularisasi/#5-modularisasi-di-nodejs-commonjs","title":"5. Modularisasi di Node.js (CommonJS)","text":"<p>Jika kamu menggunakan Node.js, format modul sedikit berbeda (CommonJS).</p>"},{"location":"javascript/02-menengah/modularisasi/#export_1","title":"\ud83d\udce6 Export","text":"<pre><code>// file: utils.js\nconst sayHello = (name) =&gt; {\n  console.log(`Hi, ${name}`);\n};\n\nmodule.exports = { sayHello };\n</code></pre>"},{"location":"javascript/02-menengah/modularisasi/#import_1","title":"\ud83d\udce5 Import","text":"<pre><code>// file: index.js\nconst { sayHello } = require('./utils');\nsayHello('Marno');\n</code></pre> <p>Catatan: CommonJS masih dominan di banyak proyek Node.js, tapi bisa diganti ke ES Module (<code>\"type\": \"module\"</code> di <code>package.json</code>) jika dibutuhkan.</p>"},{"location":"javascript/02-menengah/modularisasi/#6-tips-modularisasi","title":"6. Tips Modularisasi","text":"<ul> <li>\ud83d\udca1 Satu file, satu tanggung jawab. Jangan gabung semua fungsi dalam satu file.</li> <li>\ud83d\udcc1 Gunakan folder untuk memisahkan domain aplikasi.</li> <li>\u2728 Gunakan <code>index.js</code> untuk ekspor ulang semua modul dari folder.</li> </ul> <p>Contoh:</p> <pre><code>// file: modules/index.js\nexport * from './math.js';\nexport * from './user.js';\n</code></pre>"},{"location":"javascript/02-menengah/modularisasi/#7-kesimpulan","title":"7. Kesimpulan","text":"<p>Modularisasi bikin hidup (dan ngoding) lebih damai. Dengan memecah kode jadi bagian-bagian kecil dan terpisah, kita bisa:</p> <ul> <li>Bekerja lebih cepat</li> <li>Menulis kode lebih bersih</li> <li>Mengelola proyek besar tanpa stres</li> </ul> <p>Mulai biasakan diri untuk menulis kode yang modular, karena ini jadi fondasi utama dalam membangun aplikasi modern, baik di frontend maupun backend.</p> <p>\ud83d\udcda Selanjutnya kita akan belajar tentang <code>NPM</code> dan cara menggunakan package pihak ketiga untuk memperkuat modul kita layaknya upgrade karakter di game RPG. Stay tuned! ```</p>"},{"location":"javascript/02-menengah/struktur-data/","title":"\ud83e\uddf1 Struktur Data di JavaScript","text":"<p>Struktur data adalah cara menyimpan dan mengorganisasi data agar mudah digunakan secara efisien. JavaScript menyediakan beberapa struktur data bawaan yang penting untuk dipahami\u2014terutama saat membangun aplikasi yang lebih kompleks.</p> <p>Di level ini, kita akan bahas:</p> <ul> <li>Array</li> <li>Object</li> <li>Set</li> <li>Map</li> <li>WeakSet &amp; WeakMap (bonus buat yang suka deep dive)</li> </ul>"},{"location":"javascript/02-menengah/struktur-data/#1-array-revisit","title":"1. Array Revisit \ud83d\udd01","text":"<p>Kita udah kenalan sama array di level pemula, tapi sekarang kita bahas fitur-fitur lanjutannya.</p>"},{"location":"javascript/02-menengah/struktur-data/#metode-penting-array","title":"Metode Penting Array:","text":"Method Fungsi <code>push()</code> Menambah elemen di akhir array <code>pop()</code> Menghapus elemen terakhir dari array <code>shift()</code> Menghapus elemen pertama <code>unshift()</code> Menambah elemen di awal array <code>slice()</code> Mengambil sebagian array (tidak merusak asli) <code>splice()</code> Menambah/menghapus elemen (modifikasi array) <code>map()</code> Membuat array baru dari setiap elemen <code>filter()</code> Menyaring elemen <code>reduce()</code> Menggabungkan nilai"},{"location":"javascript/02-menengah/struktur-data/#contoh","title":"Contoh:","text":"<pre><code>const angka = [1, 2, 3, 4, 5];\nconst hasil = angka.map(num =&gt; num * 2); // [2, 4, 6, 8, 10]\n</code></pre>"},{"location":"javascript/02-menengah/struktur-data/#2-object-revisit","title":"2. Object Revisit \ud83e\uddf0","text":"<p>Object menyimpan data dalam bentuk pasangan key-value.</p> <pre><code>const user = {\n  nama: \"Marno\",\n  umur: 22,\n  alamat: \"Kebun Sawit\"\n};\n\nconsole.log(user[\"nama\"]);     // Marno\nconsole.log(user.umur);        // 22\n</code></pre>"},{"location":"javascript/02-menengah/struktur-data/#fitur-modern","title":"Fitur Modern:","text":"<ul> <li>Destructuring: memecah object jadi variabel</li> <li>Optional Chaining: akses properti dengan aman</li> <li>Spread Operator: menggabungkan atau menyalin object</li> </ul> <pre><code>const { nama, umur } = user;\nconsole.log(nama); // Marno\n</code></pre>"},{"location":"javascript/02-menengah/struktur-data/#3-set","title":"3. Set \ud83e\uddfa","text":"<p><code>Set</code> adalah koleksi nilai unik. Gak ada elemen duplikat.</p> <pre><code>const buah = new Set([\"apel\", \"mangga\", \"apel\"]);\nconsole.log(buah); // Set { 'apel', 'mangga' }\n</code></pre>"},{"location":"javascript/02-menengah/struktur-data/#metode-set","title":"Metode Set:","text":"<ul> <li><code>add()</code></li> <li><code>delete()</code></li> <li><code>has()</code></li> <li><code>size</code></li> </ul>"},{"location":"javascript/02-menengah/struktur-data/#4-map","title":"4. Map \ud83d\uddfa\ufe0f","text":"<p><code>Map</code> mirip object, tapi key-nya bisa tipe data apapun dan teratur berdasarkan urutan penambahan.</p> <pre><code>const myMap = new Map();\nmyMap.set(\"nama\", \"Marno\");\nmyMap.set(123, \"Nomor ID\");\n\nconsole.log(myMap.get(\"nama\")); // Marno\n</code></pre>"},{"location":"javascript/02-menengah/struktur-data/#keunggulan-map","title":"Keunggulan Map:","text":"<ul> <li>Bisa pakai object atau tipe data lain sebagai key</li> <li>Lebih konsisten performanya daripada object jika digunakan sebagai dictionary</li> </ul>"},{"location":"javascript/02-menengah/struktur-data/#5-weakset-weakmap-advanced-stuff","title":"5. WeakSet &amp; WeakMap (Advanced Stuff) \ud83e\udde0","text":"<ul> <li><code>WeakSet</code> hanya bisa menyimpan object dan tidak dapat di-loop.</li> <li><code>WeakMap</code> hanya menerima object sebagai key dan memiliki memory management otomatis (GC friendly).</li> </ul> <p>Contoh:</p> <pre><code>let obj = { nama: \"Marno\" };\nconst ws = new WeakSet();\nws.add(obj);\n\nconst wm = new WeakMap();\nwm.set(obj, \"data rahasia\");\n</code></pre> <p>Catatan: Umumnya digunakan untuk caching dan pengelolaan data internal library/framework.</p>"},{"location":"javascript/02-menengah/struktur-data/#6-kapan-menggunakan-apa","title":"6. Kapan Menggunakan Apa?","text":"Kebutuhan Struktur Data Daftar elemen urut &amp; duplikat <code>Array</code> Key-value data biasa <code>Object</code> Kumpulan nilai unik <code>Set</code> Key-value dengan key fleksibel <code>Map</code> Caching atau private storage <code>WeakMap</code>, <code>WeakSet</code>"},{"location":"javascript/02-menengah/struktur-data/#7-kesimpulan","title":"7. Kesimpulan","text":"<p>Struktur data bukan cuma sekadar \"cara nyimpan data\", tapi fondasi dalam menulis program yang:</p> <ul> <li>\ud83d\udd04 Lebih efisien</li> <li>\ud83e\uddf9 Lebih rapi</li> <li>\ud83d\ude80 Lebih scalable</li> </ul> <p>Pahami struktur data = punya kekuatan untuk membuat program yang cepat dan powerful.</p> <p>\ud83e\udde0 Selanjutnya kita akan masuk ke dunia yang lebih dalam lagi, seperti OOP dan bagaimana cara bikin class kayak di Java atau Python. Yuk, gas terus belajar JS sampai level dewa! ```</p>"},{"location":"javascript/03-mahir/event-loop/","title":"\ud83d\udd04 Memahami Event Loop di JavaScript","text":"<p>Event Loop adalah salah satu konsep paling penting (dan kadang paling bikin pusing) dalam JavaScript, terutama karena JavaScript single-threaded tapi bisa menangani operasi async seperti HTTP request, setTimeout, dan lainnya.</p> <p>Kalau kamu pernah bingung kenapa <code>console.log(\"A\")</code> muncul duluan padahal ada <code>setTimeout(..., 0)</code>, itu kerjaan si Event Loop.</p>"},{"location":"javascript/03-mahir/event-loop/#1-javascript-itu-single-threaded","title":"1. JavaScript itu Single-threaded","text":"<p>Artinya, hanya satu instruksi yang bisa dijalankan dalam satu waktu. Tapi\u2026 kok bisa jalanin banyak hal sekaligus kayak fetch data, timer, dan animasi?</p> <p>Jawabannya: karena JavaScript punya Event Loop yang bekerja bareng Call Stack dan Web APIs / Callback Queue (jika di browser) atau libuv (jika di Node.js).</p>"},{"location":"javascript/03-mahir/event-loop/#2-komponen-penting","title":"2. Komponen Penting","text":""},{"location":"javascript/03-mahir/event-loop/#call-stack","title":"\ud83e\udde0 Call Stack","text":"<p>Tempat eksekusi kode sinkron. Modelnya LIFO (Last In, First Out).</p>"},{"location":"javascript/03-mahir/event-loop/#web-apis","title":"\ud83d\udd78\ufe0f Web APIs","text":"<p>Disediakan oleh browser (atau libuv di Node.js) untuk handle async seperti: - <code>setTimeout</code> - <code>fetch</code> - <code>DOM events</code></p>"},{"location":"javascript/03-mahir/event-loop/#callback-queue-task-queue","title":"\ud83d\udce9 Callback Queue (Task Queue)","text":"<p>Menampung callback yang siap dieksekusi setelah Call Stack kosong.</p>"},{"location":"javascript/03-mahir/event-loop/#event-loop","title":"\ud83d\udd01 Event Loop","text":"<p>Yang ngecek terus: \"Eh, Call Stack kosong gak? Kalau kosong, ayo masukin callback dari Queue!\"</p>"},{"location":"javascript/03-mahir/event-loop/#3-ilustrasi-sederhana","title":"3. Ilustrasi Sederhana","text":"<pre><code>console.log(\"A\");\n\nsetTimeout(() =&gt; {\n  console.log(\"B\");\n}, 0);\n\nconsole.log(\"C\");\n</code></pre>"},{"location":"javascript/03-mahir/event-loop/#output","title":"Output:","text":"<pre><code>A\nC\nB\n</code></pre> <p>Kenapa B terakhir padahal 0ms?</p> <p>Karena: 1. <code>setTimeout</code> didaftarkan ke Web API. 2. <code>console.log(\"C\")</code> lanjut dieksekusi. 3. Setelah Call Stack kosong, callback <code>setTimeout</code> dimasukkan ke Queue. 4. Event Loop mengeksekusinya setelah semua sync selesai.</p>"},{"location":"javascript/03-mahir/event-loop/#4-microtask-queue-vs-callback-queue","title":"4. Microtask Queue vs Callback Queue","text":"<p>Selain Callback Queue, ada juga Microtask Queue. Ini lebih prioritas dan diisi oleh: - <code>Promise.then()</code> - <code>MutationObserver</code></p> <pre><code>console.log(\"Start\");\n\nsetTimeout(() =&gt; console.log(\"Timeout\"), 0);\n\nPromise.resolve().then(() =&gt; console.log(\"Promise\"));\n\nconsole.log(\"End\");\n</code></pre>"},{"location":"javascript/03-mahir/event-loop/#output_1","title":"Output:","text":"<pre><code>Start\nEnd\nPromise\nTimeout\n</code></pre> <p>Promise punya prioritas lebih tinggi dibanding <code>setTimeout</code>. Mereka masuk ke Microtask Queue.</p>"},{"location":"javascript/03-mahir/event-loop/#5-visualisasi-event-loop","title":"5. Visualisasi Event Loop","text":"<pre><code>\ud83d\udce6 Code masuk ke \u2192 Call Stack\n\u23f1 Async call dikirim ke \u2192 Web API\n\u2705 Selesai? Callback dikirim ke \u2192 Task Queue\n\ud83c\udf00 Call Stack kosong? Event Loop \u2192 Masukkan callback ke Call Stack\n</code></pre>"},{"location":"javascript/03-mahir/event-loop/#6-debugging-event-loop-tips-dev","title":"6. Debugging Event Loop (Tips Dev)","text":"<ul> <li>Gunakan <code>console.log()</code> untuk lacak urutan eksekusi.</li> <li>Gunakan browser DevTools tab \u201cPerformance\u201d untuk lihat event loop dan call stack.</li> <li>Tools seperti Loupe bisa bantu visualisasi event loop.</li> </ul>"},{"location":"javascript/03-mahir/event-loop/#7-kesimpulan","title":"7. Kesimpulan","text":"Konsep Penjelasan Singkat Single-threaded JavaScript cuma punya 1 jalur eksekusi Web API Jalur khusus buat ngatur operasi async Event Loop Jembatan antara async dan eksekusi utama Task vs Microtask Microtask punya prioritas lebih tinggi <p>\ud83d\udd01 Event Loop bukan cuma teori, tapi dasar dari semua hal async di JavaScript. Pahami ini dan kamu bakal bisa nge-handle <code>async/await</code>, <code>fetch</code>, <code>Promise</code>, dan sejenisnya kayak ninja!</p> <p>\ud83d\udcda Selanjutnya: kita akan menyelami dunia <code>async/await</code> dan bagaimana menulis kode async yang kelihatan kayak sync\u2014biar hidupmu sebagai dev jadi lebih damai. ```</p>"},{"location":"javascript/03-mahir/functional/","title":"\ud83e\udde0 Pemrograman Fungsional di JavaScript","text":"<p>Pemrograman Fungsional (Functional Programming / FP) adalah paradigma yang berfokus pada penggunaan fungsi murni (pure functions) dan penghindaran efek samping. Gaya ini makin populer karena menghasilkan kode yang:</p> <ul> <li>Lebih bersih</li> <li>Lebih mudah diuji</li> <li>Lebih modular dan fleksibel</li> </ul>"},{"location":"javascript/03-mahir/functional/#1-apa-itu-pemrograman-fungsional","title":"1. Apa itu Pemrograman Fungsional?","text":"<p>FP mendorong kita untuk menulis program sebagai kumpulan fungsi kecil dan dapat digunakan ulang. FP menghindari perubahan langsung terhadap data (mutasi), dan lebih suka membuat data baru.</p>"},{"location":"javascript/03-mahir/functional/#ciri-ciri-fp","title":"Ciri-ciri FP:","text":"<ul> <li>\ud83d\udce6 Pure functions \u2014 hasil hanya bergantung pada input</li> <li>\ud83d\udeab No side effects \u2014 tidak mengubah state global / input</li> <li>\ud83d\udd01 Immutability \u2014 data tidak diubah, tapi disalin</li> <li>\ud83d\udd17 Function composition \u2014 fungsi digabung seperti lego</li> </ul>"},{"location":"javascript/03-mahir/functional/#2-pure-function","title":"2. Pure Function","text":"<p>Fungsi yang: 1. Tidak mengubah input. 2. Selalu mengembalikan output yang sama untuk input yang sama.</p> <pre><code>// PURE\nfunction tambah(a, b) {\n  return a + b;\n}\n\n// TIDAK PURE\nlet total = 0;\nfunction tambahKeTotal(a) {\n  total += a; // efek samping!\n}\n</code></pre>"},{"location":"javascript/03-mahir/functional/#3-immutability-tidak-mengubah-data-asli","title":"3. Immutability (Tidak Mengubah Data Asli)","text":"<pre><code>const angka = [1, 2, 3];\n\n// Menggunakan spread operator untuk membuat salinan\nconst angkaBaru = [...angka, 4];\n\nconsole.log(angka);      // [1, 2, 3]\nconsole.log(angkaBaru);  // [1, 2, 3, 4]\n</code></pre>"},{"location":"javascript/03-mahir/functional/#4-higher-order-functions-hof","title":"4. Higher-Order Functions (HOF)","text":"<p>Fungsi yang: - Menerima fungsi lain sebagai argumen - atau Mengembalikan fungsi</p> <p>Contoh:</p> <pre><code>function kalikan(faktor) {\n  return function(angka) {\n    return angka * faktor;\n  }\n}\n\nconst kaliDua = kalikan(2);\nconsole.log(kaliDua(5)); // 10\n</code></pre>"},{"location":"javascript/03-mahir/functional/#5-map-filter-reduce-trio-fp-legendaris","title":"5. Map, Filter, Reduce \u2014 Trio FP Legendaris \ud83d\udd25","text":""},{"location":"javascript/03-mahir/functional/#map","title":"<code>map()</code>","text":"<pre><code>const angka = [1, 2, 3];\nconst hasil = angka.map(x =&gt; x * 2); // [2, 4, 6]\n</code></pre>"},{"location":"javascript/03-mahir/functional/#filter","title":"<code>filter()</code>","text":"<pre><code>const angka = [1, 2, 3, 4];\nconst genap = angka.filter(x =&gt; x % 2 === 0); // [2, 4]\n</code></pre>"},{"location":"javascript/03-mahir/functional/#reduce","title":"<code>reduce()</code>","text":"<pre><code>const angka = [1, 2, 3, 4];\nconst total = angka.reduce((acc, curr) =&gt; acc + curr, 0); // 10\n</code></pre>"},{"location":"javascript/03-mahir/functional/#6-function-composition","title":"6. Function Composition","text":"<p>Menggabungkan beberapa fungsi kecil jadi satu proses.</p> <pre><code>const tambah1 = x =&gt; x + 1;\nconst kali2 = x =&gt; x * 2;\n\nconst gabung = x =&gt; kali2(tambah1(x));\n\nconsole.log(gabung(3)); // (3 + 1) * 2 = 8\n</code></pre>"},{"location":"javascript/03-mahir/functional/#7-currying","title":"7. Currying","text":"<p>Mengubah fungsi dengan banyak argumen menjadi rangkaian fungsi satu argumen.</p> <pre><code>function kali(a) {\n  return function(b) {\n    return a * b;\n  }\n}\n\nconst kali3 = kali(3);\nconsole.log(kali3(5)); // 15\n</code></pre>"},{"location":"javascript/03-mahir/functional/#8-kenapa-functional-programming-penting","title":"8. Kenapa Functional Programming Penting?","text":"<p>\u2705 Mudah diuji (karena pure)</p> <p>\u2705 Tidak tergantung pada state global</p> <p>\u2705 Cocok untuk kode paralel/async</p> <p>\u2705 Membuat bug lebih sedikit</p> <p>JavaScript bukan bahasa FP murni, tapi mendukung gaya ini dengan sangat baik. Kamu bisa menggunakannya saat butuh menulis kode yang clean, predictable, dan reusable.</p>"},{"location":"javascript/03-mahir/functional/#9-library-yang-mendukung-fp","title":"9. Library yang Mendukung FP","text":"<p>Kalau kamu makin dalam, bisa cek: - Ramda.js - Lodash/fp - RxJS (reaktif programming, cocok buat async event)</p>"},{"location":"javascript/03-mahir/functional/#10-kesimpulan","title":"10. Kesimpulan","text":"Konsep Penjelasan Pure Function Tidak mengubah state eksternal Immutability Data tidak diubah langsung HOF Fungsi yang menerima/mengembalikan fungsi Composition Gabungkan fungsi menjadi alur proses Currying Fungsi jadi rantai <p>\ud83d\udcda Selanjutnya kita akan bahas Object-Oriented Programming (OOP)\u2014biar kamu bisa bandingkan dan pilih gaya mana yang paling cocok sesuai kebutuhan proyekmu.</p> <p>```</p>"},{"location":"javascript/03-mahir/keamanan/","title":"\ud83d\udee1\ufe0f Keamanan JavaScript di Browser &amp; Frontend","text":"<p>Keamanan dalam JavaScript sangat penting, terutama saat membuat aplikasi web. Walaupun mayoritas tanggung jawab keamanan ada di sisi backend, sisi frontend (JavaScript) tetap rawan eksploitasi.</p> <p>Di halaman ini, kita akan bahas ancaman umum dan cara mencegahnya. Biar aplikasi kamu gak jadi target empuk hacker, ya kan?</p>"},{"location":"javascript/03-mahir/keamanan/#1-ancaman-umum-di-javascript","title":"1. \ud83d\udea8 Ancaman Umum di JavaScript","text":""},{"location":"javascript/03-mahir/keamanan/#xss-cross-site-scripting","title":"\u26a0\ufe0f XSS (Cross-Site Scripting)","text":"<p>XSS adalah serangan di mana hacker menyisipkan JavaScript berbahaya ke halaman web.</p> <p>Contoh:</p> <pre><code>&lt;input value=\"&lt;script&gt;alert('Hacked!')&lt;/script&gt;\" /&gt;\n</code></pre> <p>Jika input ini langsung ditampilkan tanpa disanitasi, boom! Kode jahat akan jalan di browser korban.</p> <p>Solusi: - Jangan pernah langsung render input user ke HTML tanpa sanitasi. - Gunakan DOM manipulation API seperti <code>textContent</code>, bukan <code>innerHTML</code>.</p> <pre><code>// \u274c Rentan XSS\nelement.innerHTML = userInput;\n\n// \u2705 Aman\nelement.textContent = userInput;\n</code></pre>"},{"location":"javascript/03-mahir/keamanan/#csrf-cross-site-request-forgery","title":"\u26a0\ufe0f CSRF (Cross-Site Request Forgery)","text":"<p>Serangan di mana user tanpa sadar mengirim request yang berbahaya (biasanya lewat cookie yang udah login).</p> <p>Walau mitigasi utama ada di server (CSRF token, SameSite cookie), kamu bisa bantu dengan memastikan frontend hanya mengirim request saat user melakukan aksi nyata (misalnya klik tombol).</p>"},{"location":"javascript/03-mahir/keamanan/#klikjacking","title":"\u26a0\ufe0f Klikjacking","text":"<p>Menipu user agar mengklik sesuatu yang tidak mereka sadari, misalnya tombol tersembunyi di iframe.</p> <p>Solusi frontend: Tambahkan header <code>X-Frame-Options: DENY</code> di backend (tapi kamu bisa bantu validasi iframe juga di frontend).</p>"},{"location":"javascript/03-mahir/keamanan/#leaking-data-ke-konsol","title":"\u26a0\ufe0f Leaking Data ke Konsol","text":"<p>Jangan pernah log data sensitif ke console browser! Hacker bisa buka DevTools dan lihat semua data.</p> <pre><code>// \u274c Jangan lakukan ini di production\nconsole.log(user.password);\n</code></pre>"},{"location":"javascript/03-mahir/keamanan/#2-tips-menulis-javascript-yang-aman","title":"2. \u2705 Tips Menulis JavaScript yang Aman","text":""},{"location":"javascript/03-mahir/keamanan/#1-escape-dan-sanitasi-input-user","title":"\ud83e\uddfd 1. Escape dan sanitasi input user","text":"<p>Gunakan library seperti: - <code>DOMPurify</code> - <code>sanitize-html</code></p> <pre><code>import DOMPurify from 'dompurify';\n\nconst cleanInput = DOMPurify.sanitize(userInput);\n</code></pre>"},{"location":"javascript/03-mahir/keamanan/#2-validasi-di-sisi-klien-dan-server","title":"\ud83d\udd12 2. Validasi di sisi klien DAN server","text":"<p>Frontend itu ibarat pagar bambu\u2014bisa diloncati. Jadi jangan andalkan validasi frontend saja.</p>"},{"location":"javascript/03-mahir/keamanan/#3-matikan-eval-function-dan-sejenisnya","title":"\ud83e\uddef 3. Matikan <code>eval()</code>, <code>Function()</code>, dan sejenisnya","text":"<p>Fungsi-fungsi ini bisa mengeksekusi string sebagai kode\u2014dan itu horor.</p> <pre><code>// \u274c Gak aman\neval(\"alert('Hacked')\");\n\n// \u2705 Hindari, dan cari alternatif aman\n</code></pre>"},{"location":"javascript/03-mahir/keamanan/#4-obfuscate-kode-javascript","title":"\ud83c\udfad 4. Obfuscate kode JavaScript","text":"<p>Jangan biarkan kode mentah bisa dibaca semua orang. Gunakan tool seperti: - Terser - UglifyJS</p> <p>Tapi ingat: obfuscation \u2260 security. Itu cuma bikin ribet, bukan bikin aman 100%.</p>"},{"location":"javascript/03-mahir/keamanan/#5-hati-hati-dengan-dependencies","title":"\ud83d\udce6 5. Hati-hati dengan dependencies","text":"<ul> <li>Selalu periksa package dengan <code>npm audit</code></li> <li>Update library secara rutin</li> <li>Hindari menggunakan package dari sumber gak jelas</li> </ul>"},{"location":"javascript/03-mahir/keamanan/#3-tools-praktik-keamanan","title":"3. \ud83e\uddea Tools &amp; Praktik Keamanan","text":"<ul> <li>\ud83d\udd0d npm audit</li> <li>\ud83d\udd0d Snyk \u2014 cek kerentanan dependencies</li> <li>\ud83d\udd0d Lighthouse Security Checks</li> <li>\ud83d\udd12 Helmet.js \u2014 middleware untuk proteksi HTTP headers</li> </ul>"},{"location":"javascript/03-mahir/keamanan/#4-contoh-best-practice","title":"4. \ud83d\udd10 Contoh Best Practice","text":"<pre><code>// \u2705 Gunakan CSP (Content Security Policy)\n&lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"&gt;\n\n// \u2705 Gunakan HTTPS selalu\nif (location.protocol !== 'https:') {\n  location.replace(`https:${location.href.substring(location.protocol.length)}`);\n}\n</code></pre>"},{"location":"javascript/03-mahir/keamanan/#5-kesimpulan","title":"5. Kesimpulan","text":"Masalah Solusi Frontend XSS Gunakan <code>textContent</code>, DOMPurify CSRF Gunakan metode POST + token Klikjacking Validasi iframe atau header <code>X-Frame-Options</code> Data leak Jangan <code>console.log()</code> data sensitif eval() Hindari penggunaan Dependencies Audit rutin dan verifikasi <p>\ud83c\udfaf Ingat: Frontend bukan tempat utama untuk keamanan, tapi bisa jadi pertahanan pertama. Tugas kamu adalah meminimalkan risiko, bukan jadi superhero \u2014 tapi hey, dengan best practices ini, kamu udah layak pakai jubah. \ud83e\uddb8\u200d\u2642\ufe0f</p> <p>```</p>"},{"location":"javascript/03-mahir/konsep-lanjut/","title":"\ud83d\ude80 Konsep Lanjutan dalam JavaScript","text":"<p>Selamat datang di tingkat akhir dari dokumentasi JavaScript! Di bagian ini, kita akan menyelam lebih dalam ke fitur-fitur lanjutan yang akan memperkuat pemahamanmu sebagai developer JavaScript modern. </p> <p>Konsep-konsep ini sering digunakan dalam pengembangan aplikasi kompleks, library besar, atau framework seperti React, Vue, dan lainnya.</p>"},{"location":"javascript/03-mahir/konsep-lanjut/#1-closures","title":"1. \ud83d\udd01 Closures","text":"<p>Closure adalah kombinasi dari function dan lingkungan leksikalnya.</p> <pre><code>function luar() {\n  let counter = 0;\n  return function dalam() {\n    counter++;\n    console.log(counter);\n  };\n}\n\nconst hitung = luar();\nhitung(); // 1\nhitung(); // 2\n</code></pre> <p>Closure bisa menyimpan state meski fungsi luar sudah selesai dieksekusi.</p>"},{"location":"javascript/03-mahir/konsep-lanjut/#2-encapsulation-via-closures","title":"2. \ud83d\udd12 Encapsulation via Closures","text":"<p>Membuat data \"private\" di JavaScript menggunakan closure:</p> <pre><code>function createCounter() {\n  let count = 0;\n  return {\n    increment() {\n      count++;\n    },\n    getCount() {\n      return count;\n    }\n  };\n}\n\nconst counter = createCounter();\ncounter.increment();\nconsole.log(counter.getCount()); // 1\n</code></pre>"},{"location":"javascript/03-mahir/konsep-lanjut/#3-factory-functions","title":"3. \ud83c\udfed Factory Functions","text":"<p>Fungsi yang mengembalikan objek baru.</p> <pre><code>function createUser(name) {\n  return {\n    name,\n    greet() {\n      console.log(`Halo, ${name}!`);\n    }\n  };\n}\n\nconst user = createUser('Marno');\nuser.greet(); // Halo, Marno!\n</code></pre>"},{"location":"javascript/03-mahir/konsep-lanjut/#4-prototypes-inheritance","title":"4. \ud83e\uddec Prototypes &amp; Inheritance","text":"<p>JavaScript menggunakan prototype-based inheritance, bukan class-based seperti Java.</p> <pre><code>function User(name) {\n  this.name = name;\n}\n\nUser.prototype.sayHi = function() {\n  console.log(`Hi, saya ${this.name}`);\n};\n\nconst u = new User(\"Marno\");\nu.sayHi(); // Hi, saya Marno\n</code></pre>"},{"location":"javascript/03-mahir/konsep-lanjut/#5-context-this-binding","title":"5. \ud83c\udfad Context (<code>this</code>) &amp; Binding","text":"<p><code>this</code> adalah referensi ke konteks saat fungsi dipanggil.</p> <pre><code>const user = {\n  name: \"Marno\",\n  sayHi() {\n    console.log(`Hi ${this.name}`);\n  }\n};\n\nuser.sayHi(); // Hi Marno\n</code></pre> <p>Kalau dipisah:</p> <pre><code>const greet = user.sayHi;\ngreet(); // \u274c undefined (karena this-nya hilang)\n\nconst boundGreet = user.sayHi.bind(user);\nboundGreet(); // \u2705 Hi Marno\n</code></pre>"},{"location":"javascript/03-mahir/konsep-lanjut/#6-recursion-rekursif","title":"6. \ud83d\udd04 Recursion (Rekursif)","text":"<p>Fungsi yang memanggil dirinya sendiri. Berguna untuk struktur data tree atau nested array.</p> <pre><code>function faktorial(n) {\n  if (n === 1) return 1;\n  return n * faktorial(n - 1);\n}\n\nconsole.log(faktorial(5)); // 120\n</code></pre>"},{"location":"javascript/03-mahir/konsep-lanjut/#7-generator-functions","title":"7. \ud83e\uddf5 Generator Functions","text":"<p>Fungsi yang bisa \"pause\" dan \"lanjut\" dengan <code>yield</code>.</p> <pre><code>function* angka() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst it = angka();\nconsole.log(it.next().value); // 1\nconsole.log(it.next().value); // 2\n</code></pre>"},{"location":"javascript/03-mahir/konsep-lanjut/#8-lazy-evaluation","title":"8. \ud83d\udce5 Lazy Evaluation","text":"<p>Digunakan untuk evaluasi data hanya saat dibutuhkan.</p> <p>Generator dan async iterators mendukung ini secara natural:</p> <pre><code>function* infiniteCounter() {\n  let i = 0;\n  while (true) yield i++;\n}\n</code></pre>"},{"location":"javascript/03-mahir/konsep-lanjut/#9-proxy-reflect","title":"9. \ud83d\udd27 Proxy &amp; Reflect","text":"<p>Untuk mengintersepsi operasi terhadap objek.</p> <pre><code>const handler = {\n  get(target, prop) {\n    return prop in target ? target[prop] : \"Ga ada bro!\";\n  }\n};\n\nconst obj = new Proxy({ nama: \"Marno\" }, handler);\n\nconsole.log(obj.nama); // Marno\nconsole.log(obj.umur); // Ga ada bro!\n</code></pre>"},{"location":"javascript/03-mahir/konsep-lanjut/#10-meta-programming","title":"10. \ud83e\udde0 Meta Programming","text":"<p>Manipulasi program menggunakan program itu sendiri: biasanya melibatkan <code>Proxy</code>, <code>Reflect</code>, atau <code>eval()</code> (hati-hati yang ini ya).</p>"},{"location":"javascript/03-mahir/konsep-lanjut/#11-symbol","title":"11. \ud83e\uddf1 Symbol","text":"<p>Tipe data primitif baru untuk membuat property unik.</p> <pre><code>const id = Symbol('id');\nconst user = {\n  [id]: 123\n};\n\nconsole.log(user[id]); // 123\n</code></pre>"},{"location":"javascript/03-mahir/konsep-lanjut/#12-optional-chaining-nullish-coalescing","title":"12. \ud83e\uddea Optional Chaining &amp; Nullish Coalescing","text":"<pre><code>const user = { profile: { name: \"Marno\" } };\n\nconsole.log(user.profile?.name); // Marno\nconsole.log(user.address?.street); // undefined\n\nconst umur = user.age ?? 20; // Kalau undefined/null, pakai 20\n</code></pre>"},{"location":"javascript/03-mahir/konsep-lanjut/#kesimpulan","title":"Kesimpulan","text":"<p>Konsep-konsep lanjutan ini adalah fondasi dari framework modern dan pattern tingkat tinggi di JavaScript. Walau kelihatan rumit, kalau kamu kuasai ini semua... kamu udah bisa dianggap sebagai JavaScript Sifu \ud83d\ude0e</p> Konsep Fungsi Closure Simpan state privat Factory Function Buat objek tanpa <code>class</code> Prototypes Dasar inheritance di JavaScript <code>this</code> &amp; binding Konteks eksekusi fungsi Recursion Penyelesaian masalah struktural/nested Generator Fungsi yang bisa dihentikan sementara Proxy &amp; Reflect Kontrol penuh atas operasi objek Optional Chaining Aman akses properti dalam struktur dalam <p>\ud83d\ude80 Lanjutkan perjalananmu ke topik-topik seperti testing, performa, dan bahkan TypeScript agar makin lengkap!</p> <p>```</p>"},{"location":"javascript/03-mahir/oop/","title":"\ud83e\uddf1 Object-Oriented Programming (OOP) di JavaScript","text":"<p>Walaupun JavaScript awalnya bukan bahasa OOP seperti Java atau C++, JS mendukung paradigma Object-Oriented Programming melalui object literals, prototype, dan <code>class</code>. Konsep OOP ini sangat berguna untuk membangun aplikasi skala besar yang modular dan reusable.</p>"},{"location":"javascript/03-mahir/oop/#apa-itu-oop","title":"\ud83e\udde0 Apa Itu OOP?","text":"<p>OOP adalah pendekatan pemrograman berbasis objek. Setiap objek berisi: - Properties (data) - Methods (fungsi untuk melakukan aksi)</p>"},{"location":"javascript/03-mahir/oop/#empat-pilar-oop","title":"\ud83e\uddec Empat Pilar OOP","text":""},{"location":"javascript/03-mahir/oop/#1-encapsulation","title":"1. Encapsulation","text":"<p>Menyembunyikan detail internal dan hanya mengekspos apa yang perlu digunakan.</p> <pre><code>class User {\n  constructor(name) {\n    this._name = name;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(namaBaru) {\n    this._name = namaBaru;\n  }\n}\n</code></pre>"},{"location":"javascript/03-mahir/oop/#2-abstraction","title":"2. Abstraction","text":"<p>Menyederhanakan kompleksitas dengan hanya menampilkan fitur penting.</p> <pre><code>class MesinATM {\n  tarikTunai(jumlah) {\n    this.#verifikasiKartu();\n    console.log(`Menarik Rp${jumlah}`);\n  }\n\n  #verifikasiKartu() {\n    console.log(\"Kartu diverifikasi\");\n  }\n}\n\nconst atm = new MesinATM();\natm.tarikTunai(500000);\n// atm.#verifikasiKartu(); \u274c Error, method ini private\n</code></pre>"},{"location":"javascript/03-mahir/oop/#3-inheritance","title":"3. Inheritance","text":"<p>Mewarisi properti dan metode dari class lain.</p> <pre><code>class Kendaraan {\n  constructor(merk) {\n    this.merk = merk;\n  }\n\n  jalan() {\n    console.log(`${this.merk} berjalan`);\n  }\n}\n\nclass Mobil extends Kendaraan {\n  klakson() {\n    console.log(\"Tin tin!\");\n  }\n}\n\nconst avanza = new Mobil(\"Avanza\");\navanza.jalan();   // Avanza berjalan\navanza.klakson(); // Tin tin!\n</code></pre>"},{"location":"javascript/03-mahir/oop/#4-polymorphism","title":"4. Polymorphism","text":"<p>Objek bisa punya banyak bentuk (method override).</p> <pre><code>class Hewan {\n  suara() {\n    console.log(\"Hewan bersuara\");\n  }\n}\n\nclass Kucing extends Hewan {\n  suara() {\n    console.log(\"Meong\");\n  }\n}\n\nconst h = new Hewan();\nconst k = new Kucing();\n\nh.suara(); // Hewan bersuara\nk.suara(); // Meong (override)\n</code></pre>"},{"location":"javascript/03-mahir/oop/#membuat-class-di-javascript","title":"\ud83c\udfd7\ufe0f Membuat Class di JavaScript","text":""},{"location":"javascript/03-mahir/oop/#sintaks-dasar","title":"Sintaks Dasar","text":"<pre><code>class Person {\n  constructor(nama, umur) {\n    this.nama = nama;\n    this.umur = umur;\n  }\n\n  sapa() {\n    console.log(`Hai, saya ${this.nama}, umur ${this.umur}`);\n  }\n}\n\nconst orang = new Person(\"Marno\", 20);\norang.sapa();\n</code></pre>"},{"location":"javascript/03-mahir/oop/#inheritance-pewarisan","title":"\u2699\ufe0f Inheritance (Pewarisan)","text":"<p>Gunakan <code>extends</code> untuk membuat subclass:</p> <pre><code>class Pegawai extends Person {\n  constructor(nama, umur, jabatan) {\n    super(nama, umur); // panggil constructor parent\n    this.jabatan = jabatan;\n  }\n\n  kerja() {\n    console.log(`${this.nama} sedang bekerja sebagai ${this.jabatan}`);\n  }\n}\n</code></pre>"},{"location":"javascript/03-mahir/oop/#private-fields-methods","title":"\ud83d\udd12 Private Fields &amp; Methods","text":"<p>JavaScript mendukung properti dan method private dengan prefix <code>#</code>:</p> <pre><code>class Bank {\n  #saldo = 1000;\n\n  lihatSaldo() {\n    console.log(`Saldo: Rp${this.#saldo}`);\n  }\n}\n</code></pre>"},{"location":"javascript/03-mahir/oop/#static-method-property","title":"\ud83d\udee0\ufe0f Static Method &amp; Property","text":"<p>Tidak perlu buat instance untuk mengaksesnya.</p> <pre><code>class MathTools {\n  static tambah(a, b) {\n    return a + b;\n  }\n}\n\nconsole.log(MathTools.tambah(2, 3)); // 5\n</code></pre>"},{"location":"javascript/03-mahir/oop/#object-literal-vs-class","title":"\ud83e\uddf0 Object Literal vs Class","text":"<pre><code>// Object literal\nconst motor = {\n  merk: \"Yamaha\",\n  nyalakan() {\n    console.log(\"Motor nyala\");\n  }\n};\n\n// Class\nclass Motor {\n  constructor(merk) {\n    this.merk = merk;\n  }\n  nyalakan() {\n    console.log(\"Motor nyala\");\n  }\n}\n</code></pre>"},{"location":"javascript/03-mahir/oop/#prototype-di-balik-layar","title":"\ud83d\udd04 Prototype di Balik Layar","text":"<p>Class di JavaScript hanyalah \"sintaks manis\" (syntactic sugar) dari sistem prototype.</p> <pre><code>function Orang(nama) {\n  this.nama = nama;\n}\nOrang.prototype.sapa = function () {\n  console.log(`Halo, saya ${this.nama}`);\n};\n\nconst o = new Orang(\"Marno\");\no.sapa();\n</code></pre>"},{"location":"javascript/03-mahir/oop/#perbandingan-oop-vs-functional","title":"\ud83e\uddea Perbandingan OOP vs Functional","text":"Aspek OOP Functional Paradigma Objek dan class Fungsi sebagai unit utama State Mutable Immutable Komposisi Lewat inheritance Lewat fungsi-fungsi kecil Contoh cocok Aplikasi UI, Game, ERP Manipulasi data, logika bisnis"},{"location":"javascript/03-mahir/oop/#kapan-gunakan-oop","title":"\ud83d\ude80 Kapan Gunakan OOP?","text":"<p>\u2705 Cocok untuk: - Struktur data kompleks - Banyak entitas/aktor (User, Kendaraan, Produk, dll) - Aplikasi berbasis komponen</p>"},{"location":"javascript/03-mahir/oop/#kesimpulan","title":"\ud83e\udde0 Kesimpulan","text":"<p>Dengan OOP, kamu bisa membuat aplikasi yang: - Lebih terstruktur - Lebih mudah dipelihara - Lebih scalable</p> <p>Tapi ingat: OOP bukan satu-satunya cara. Kadang fungsional lebih ringkas dan aman.</p> <p>\ud83c\udfaf Pilih alat yang tepat untuk kebutuhanmu. Tapi menguasai OOP akan membuka pintu ke banyak framework besar seperti React, Angular, dan Vue.</p> <p>```</p>"},{"location":"javascript/03-mahir/tools/","title":"\ud83e\uddf0 Tools &amp; Ekosistem JavaScript Modern","text":"<p>JavaScript bukan cuma bahasa pemrograman \u2014 dia punya ekosistem yang super luas. Buat bikin aplikasi modern, kamu butuh lebih dari sekadar <code>console.log</code>. Yuk kenalan sama tools yang bikin coding JS makin ngebut dan rapi!</p>"},{"location":"javascript/03-mahir/tools/#1-package-manager","title":"\ud83d\ude80 1. Package Manager","text":""},{"location":"javascript/03-mahir/tools/#npm-node-package-manager","title":"\ud83d\udce6 NPM (Node Package Manager)","text":"<p>Manajer paket default di Node.js. Hampir semua library JS modern bisa di-install lewat sini.</p> <pre><code>npm init -y\nnpm install lodash\n</code></pre>"},{"location":"javascript/03-mahir/tools/#yarn","title":"\ud83e\uddf6 Yarn","text":"<p>Alternatif dari NPM. Lebih cepat dan efisien untuk beberapa kasus.</p> <pre><code>yarn add axios\n</code></pre>"},{"location":"javascript/03-mahir/tools/#2-module-bundler","title":"\ud83e\uddd1\u200d\ud83c\udfed 2. Module Bundler","text":"<p>Digunakan untuk menggabungkan banyak file menjadi satu bundle untuk production.</p>"},{"location":"javascript/03-mahir/tools/#webpack","title":"\ud83d\udd27 Webpack","text":"<p>Super fleksibel. Butuh konfigurasi yang cukup banyak.</p> <pre><code>npm install --save-dev webpack webpack-cli\n</code></pre>"},{"location":"javascript/03-mahir/tools/#vite","title":"\u2728 Vite","text":"<p>Bundler modern, super cepat. Banyak dipakai di proyek React, Vue, Svelte, dll.</p> <pre><code>npm create vite@latest\n</code></pre>"},{"location":"javascript/03-mahir/tools/#parcel","title":"\ud83d\udce6 Parcel","text":"<p>Zero config, cocok buat pemula.</p> <pre><code>npm install -g parcel-bundler\n</code></pre>"},{"location":"javascript/03-mahir/tools/#3-code-linter","title":"\ud83e\uddf9 3. Code Linter","text":"<p>Linter bantu kamu menjaga konsistensi dan mencegah bug.</p>"},{"location":"javascript/03-mahir/tools/#eslint","title":"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f ESLint","text":"<p>Cek kode kamu biar rapi dan bebas error kecil.</p> <pre><code>npm install eslint --save-dev\nnpx eslint .\n</code></pre>"},{"location":"javascript/03-mahir/tools/#prettier","title":"\ud83c\udf66 Prettier","text":"<p>Auto-formatting buat bikin kode kamu enak dibaca.</p> <pre><code>npm install --save-dev prettier\nnpx prettier --write .\n</code></pre> <p>\u26a0\ufe0f Tips: Gunakan <code>eslint-plugin-prettier</code> biar ESLint dan Prettier bisa kerja bareng!</p>"},{"location":"javascript/03-mahir/tools/#4-transpiler","title":"\ud83d\udd01 4. Transpiler","text":""},{"location":"javascript/03-mahir/tools/#babel","title":"\ud83d\udd24 Babel","text":"<p>Mengubah kode modern (ES6+) jadi kompatibel ke browser lama.</p> <pre><code>npm install --save-dev @babel/core @babel/cli @babel/preset-env\n</code></pre>"},{"location":"javascript/03-mahir/tools/#5-testing-framework","title":"\ud83d\udd2c 5. Testing Framework","text":""},{"location":"javascript/03-mahir/tools/#jest","title":"\ud83e\uddea Jest","text":"<p>Framework testing paling populer di JavaScript.</p> <pre><code>npm install --save-dev jest\n</code></pre>"},{"location":"javascript/03-mahir/tools/#mocha-chai","title":"\u2705 Mocha + Chai","text":"<p>Alternatif ringan yang bisa dikustomisasi.</p> <pre><code>npm install --save-dev mocha chai\n</code></pre>"},{"location":"javascript/03-mahir/tools/#6-dev-server","title":"\ud83c\udf10 6. Dev Server","text":""},{"location":"javascript/03-mahir/tools/#live-server-vs-code-extension","title":"\ud83d\udd25 Live Server (VS Code Extension)","text":"<p>Auto-reload ketika kamu save file HTML/JS.</p>"},{"location":"javascript/03-mahir/tools/#vite-dev-server","title":"\ud83e\uddde\u200d\u2642\ufe0f Vite Dev Server","text":"<p>Built-in di Vite, super cepat dan mendukung hot module replacement.</p>"},{"location":"javascript/03-mahir/tools/#7-version-control","title":"\ud83d\udd04 7. Version Control","text":""},{"location":"javascript/03-mahir/tools/#git","title":"\ud83e\uddd9\u200d\u2642\ufe0f Git","text":"<p>Simpan dan kelola histori perubahan kode kamu.</p> <pre><code>git init\ngit add .\ngit commit -m \"First commit\"\n</code></pre> <p>Gunakan bersama GitHub, GitLab, atau Bitbucket buat kolaborasi bareng tim.</p>"},{"location":"javascript/03-mahir/tools/#8-deployment-tools","title":"\u2601\ufe0f 8. Deployment Tools","text":""},{"location":"javascript/03-mahir/tools/#netlify","title":"\ud83d\udce4 Netlify","text":"<p>Deploy aplikasi JS statis (seperti Vite/React) langsung dari GitHub.</p>"},{"location":"javascript/03-mahir/tools/#vercel","title":"\ud83d\ude80 Vercel","text":"<p>Deploy cepat untuk proyek frontend dan serverless.</p>"},{"location":"javascript/03-mahir/tools/#github-pages","title":"\ud83d\udee0 GitHub Pages","text":"<p>Cocok untuk dokumentasi dan proyek statis.</p> <pre><code># Kalau pakai mkdocs:\nmkdocs gh-deploy\n</code></pre>"},{"location":"javascript/03-mahir/tools/#tools-tambahan-lainnya","title":"\ud83c\udfaf Tools Tambahan Lainnya","text":"Kategori Tools Populer Type Checker TypeScript Package Checker npm audit, snyk Formatter Prettier Debugger Chrome DevTools, VS Code Debug REST API Client Postman, Insomnia Env Manager dotenv Task Runner Gulp, npm scripts"},{"location":"javascript/03-mahir/tools/#contoh-struktur-proyek-modern","title":"\ud83d\udce6 Contoh Struktur Proyek Modern","text":"<pre><code>\ud83d\udcc1 my-app\n\u251c\u2500\u2500 \ud83d\udcc1 src\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 components/\n\u251c\u2500\u2500 \ud83d\udcc1 public\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 .eslintrc.js\n\u251c\u2500\u2500 .prettierrc\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n</code></pre>"},{"location":"javascript/03-mahir/tools/#kesimpulan","title":"\ud83e\udde0 Kesimpulan","text":"<p>Tools ini bukan cuma gaya-gayaan, tapi benar-benar ngebantu:</p> <p>\u2705 Menjaga kualitas kode \u2705 Mempercepat proses development \u2705 Mempermudah kolaborasi dan deployment</p> <p>\ud83c\udf89 JavaScript modern itu powerful banget \u2014 asal kamu tahu alatnya!</p> <p>```</p>"},{"location":"javascript/04-best-practices/clean-code/","title":"Clean Code","text":"<pre><code># \ud83e\uddfc Clean Code dalam JavaScript\n\nMenulis kode yang *jalan* itu gampang. Tapi menulis kode yang *enak dibaca* dan *mudah dipelihara*? Nah, itu seninya!\n\nDokumen ini berisi prinsip dan praktik clean code khusus untuk JavaScript, biar kode kamu gak cuma bisa jalan, tapi juga bikin tim kamu bilang: \"**Nicee! Ini baru kode bersih!**\"\n\n---\n\n## \ud83e\udd14 Apa Itu Clean Code?\n\n&gt; Clean code adalah kode yang mudah dibaca, dimengerti, diubah, dan diuji.\n\nBayangkan kamu baca kode orang lain tanpa stres, atau 6 bulan ke depan kamu buka lagi kode lama kamu dan langsung ngerti \u2014 itulah clean code.\n\n---\n\n## \ud83e\udde0 Prinsip Clean Code\n\n### 1. Gunakan Penamaan yang Jelas\n\n**\u274c Hindari:**\n\n```javascript\nlet a = 10;\nfunction d(x) {\n  return x * a;\n}\n</code></pre> <p>\u2705 Gunakan:</p> <pre><code>let baseSalary = 10;\nfunction calculateBonus(multiplier) {\n  return multiplier * baseSalary;\n}\n</code></pre>"},{"location":"javascript/04-best-practices/clean-code/#2-hindari-kode-berulang-dry-dont-repeat-yourself","title":"2. Hindari Kode Berulang (DRY - Don't Repeat Yourself)","text":"<p>\u274c Hindari:</p> <pre><code>function printAdmin() {\n  console.log(\"Role: Admin\");\n}\nfunction printUser() {\n  console.log(\"Role: User\");\n}\n</code></pre> <p>\u2705 Gunakan:</p> <pre><code>function printRole(role) {\n  console.log(`Role: ${role}`);\n}\n</code></pre>"},{"location":"javascript/04-best-practices/clean-code/#3-fungsi-harus-fokus-pada-satu-tugas-single-responsibility","title":"3. Fungsi Harus Fokus pada Satu Tugas (Single Responsibility)","text":"<p>\u274c Hindari:</p> <pre><code>function handleUserData(user) {\n  saveToDatabase(user);\n  sendEmail(user.email);\n  updateUI(user);\n}\n</code></pre> <p>\u2705 Gunakan:</p> <pre><code>function saveUser(user) { /*...*/ }\nfunction notifyUser(user) { /*...*/ }\nfunction renderUser(user) { /*...*/ }\n</code></pre>"},{"location":"javascript/04-best-practices/clean-code/#4-hindari-magic-number-dan-string","title":"4. Hindari Magic Number dan String","text":"<p>\u274c Hindari:</p> <pre><code>if (status === 2) {\n  // Approved\n}\n</code></pre> <p>\u2705 Gunakan:</p> <pre><code>const STATUS_APPROVED = 2;\nif (status === STATUS_APPROVED) {\n  // Approved\n}\n</code></pre>"},{"location":"javascript/04-best-practices/clean-code/#5-jaga-panjang-fungsi-file","title":"5. Jaga Panjang Fungsi &amp; File","text":"<ul> <li>Fungsi idealnya kurang dari 20 baris</li> <li>File JavaScript sebaiknya fokus pada 1 topik (modular)</li> </ul>"},{"location":"javascript/04-best-practices/clean-code/#contoh-clean-vs-dirty-code","title":"\u270d\ufe0f Contoh Clean vs Dirty Code","text":"<p>\ud83d\udca9 Dirty Code:</p> <pre><code>function q(a, b) {\n  if (!a || !b) {\n    return;\n  }\n  if (a.length === b.length) {\n    return true;\n  } else {\n    return false;\n  }\n}\n</code></pre> <p>\u2728 Clean Code:</p> <pre><code>function hasSameLength(array1, array2) {\n  if (!array1 || !array2) return false;\n  return array1.length === array2.length;\n}\n</code></pre>"},{"location":"javascript/04-best-practices/clean-code/#tambahkan-comment-saat-perlu-bukan-pengganti-nama-yang-buruk","title":"\ud83e\uddea Tambahkan Comment Saat Perlu (Bukan Pengganti Nama yang Buruk)","text":"<pre><code>// \u274c Jangan begini:\nlet x = 86400; // jumlah detik dalam sehari\n\n// \u2705 Lebih baik:\nconst SECONDS_IN_A_DAY = 86400;\n</code></pre>"},{"location":"javascript/04-best-practices/clean-code/#gunakan-tools-clean-code","title":"\ud83e\uddf0 Gunakan Tools Clean Code","text":"Tool Fungsi ESLint Deteksi potensi error dan gaya Prettier Auto-format kode Husky + lint-staged Cegah commit buruk <pre><code>npm install eslint prettier --save-dev\n</code></pre>"},{"location":"javascript/04-best-practices/clean-code/#tambahan-tips-clean-code","title":"\ud83d\udccf Tambahan Tips Clean Code","text":"<ul> <li>Gunakan async/await, hindari callback hell</li> <li>Gunakan default parameters</li> <li>Pecah kode ke dalam modul kecil</li> <li>Gunakan array methods seperti <code>.map()</code>, <code>.filter()</code>, <code>.reduce()</code> dibanding for loop kalau memungkinkan</li> </ul>"},{"location":"javascript/04-best-practices/clean-code/#clean-code-itu-seni-bukan-aturan-kaku","title":"\ud83e\uddd8 Clean Code itu Seni, bukan Aturan Kaku","text":"<p>\"Clean code itu bukan tentang bikin komputer ngerti, tapi bikin developer lain ngerti.\"</p> <p>Kamu gak harus 100% sempurna \u2014 yang penting terus improve. Sedikit demi sedikit, lama-lama kode kamu bakal makin kece \u2728</p>"},{"location":"javascript/04-best-practices/clean-code/#referensi-tambahan","title":"\ud83d\udcda Referensi Tambahan","text":"<ul> <li>Clean Code oleh Robert C. Martin</li> <li>JavaScript Clean Code (Dev.to)</li> <li>Airbnb JavaScript Style Guide</li> </ul>"},{"location":"javascript/04-best-practices/clean-code/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>Clean code bikin hidup kamu dan tim kamu lebih mudah. Kode yang bersih = lebih sedikit bug, lebih mudah maintenance, dan lebih profesional.</p> <p>Mulai biasakan dari sekarang! \ud83d\udcaa</p> <p>```</p>"},{"location":"javascript/04-best-practices/debugging/","title":"Debugging","text":"<pre><code># \ud83d\udc1b Debugging JavaScript: Cara Ngejar Bug Tanpa Bikin Emosi\n\nDebugging itu bagian dari hidup developer. Kode error? Tenang, bukan kamu aja yang ngalamin. Yang penting kamu tahu cara ngejar bug kayak detektif JavaScript. \ud83d\udd0d\n\n---\n\n## \ud83e\udd2f Apa Itu Debugging?\n\n&gt; Debugging adalah proses menemukan dan memperbaiki bug (kesalahan logika, runtime error, dsb.) dalam kode program.\n\nIntinya: bikin kode kamu *berjalan sebagaimana mestinya*, bukan *bertingkah aneh pas dijalankan* \ud83d\ude05\n\n---\n\n## \ud83d\udee0 Tools Wajib Debugging\n\n### 1. `console.log()` \u2014 Sahabat Setia\n\nGunakan ini untuk melihat isi variabel, jalannya fungsi, atau nge-track flow:\n\n```javascript\nfunction hitungDiskon(harga, diskon) {\n  console.log(\"Harga Awal:\", harga);\n  console.log(\"Diskon:\", diskon);\n  return harga - (harga * diskon);\n}\n</code></pre> <p>Tips: Gunakan <code>console.table()</code> untuk array atau objek biar lebih rapi.</p>"},{"location":"javascript/04-best-practices/debugging/#2-developer-tools-devtools-di-browser","title":"2. Developer Tools (DevTools) di Browser","text":"<p>Hampir semua browser modern punya DevTools bawaan (buka dengan <code>F12</code> atau klik kanan \u2192 Inspect).</p> <p>\u2705 Fitur penting: - Console: lihat log &amp; error - Sources \u2192 Breakpoints: pause eksekusi kode - Network: cek request API - Performance: analisis kecepatan</p>"},{"location":"javascript/04-best-practices/debugging/#3-breakpoint-dan-step-by-step-debugging","title":"3. Breakpoint dan Step-By-Step Debugging","text":"<ol> <li>Buka tab <code>Sources</code></li> <li>Klik baris kode untuk set breakpoint</li> <li>Reload halaman</li> <li>Eksekusi berhenti di titik tersebut</li> <li>Gunakan tombol <code>Step over</code>, <code>Step into</code>, <code>Step out</code> untuk menelusuri</li> </ol>"},{"location":"javascript/04-best-practices/debugging/#4-gunakan-linter-eslint","title":"4. Gunakan Linter (ESLint)","text":"<p>Linting bisa bantu kamu deteksi error bahkan sebelum dijalankan.</p> <pre><code>npm install eslint --save-dev\nnpx eslint script.js\n</code></pre>"},{"location":"javascript/04-best-practices/debugging/#5-debugging-di-nodejs","title":"5. Debugging di Node.js","text":"<p>Jalankan dengan mode debug:</p> <pre><code>node inspect script.js\n</code></pre> <p>Atau gunakan VS Code debugger yang powerful banget!</p>"},{"location":"javascript/04-best-practices/debugging/#tips-trik-debugging-yang-efektif","title":"\u26a0\ufe0f Tips &amp; Trik Debugging yang Efektif","text":""},{"location":"javascript/04-best-practices/debugging/#1-reproduksi-bug","title":"1. Reproduksi Bug","text":"<ul> <li>Coba ulangi langkah-langkah yang menyebabkan bug</li> <li>Buat test case kecil kalau bisa</li> </ul>"},{"location":"javascript/04-best-practices/debugging/#2-gunakan-consoletrace","title":"2. Gunakan <code>console.trace()</code>","text":"<p>Lihat stack trace langsung dari mana fungsi dipanggil:</p> <pre><code>function test() {\n  console.trace(\"Trace dari sini\");\n}\n</code></pre>"},{"location":"javascript/04-best-practices/debugging/#3-isolasi-masalah","title":"3. Isolasi Masalah","text":"<p>Pecah kode menjadi bagian-bagian kecil. Coba blok mana yang ngaco.</p>"},{"location":"javascript/04-best-practices/debugging/#4-baca-pesan-error-nya","title":"4. Baca Pesan Error-nya!","text":"<p>Error JavaScript sekarang cukup informatif. Baca baik-baik bagian seperti: - Uncaught TypeError - SyntaxError - ReferenceError</p>"},{"location":"javascript/04-best-practices/debugging/#contoh-bug-umum","title":"\u274c Contoh Bug Umum","text":"<pre><code>let x;\nconsole.log(x.length); // \u274c TypeError: Cannot read property 'length' of undefined\n</code></pre> <p>Solusi:</p> <pre><code>if (x) {\n  console.log(x.length);\n}\n</code></pre>"},{"location":"javascript/04-best-practices/debugging/#debugging-asynchronous-code","title":"\ud83d\udca5 Debugging Asynchronous Code","text":"<p>Debugging <code>setTimeout</code>, <code>Promise</code>, <code>fetch</code>, dan <code>async/await</code> bisa tricky.</p> <p>Gunakan log chain atau catch error dengan try-catch:</p> <pre><code>async function getUser() {\n  try {\n    const res = await fetch('/user');\n    const data = await res.json();\n    console.log(data);\n  } catch (error) {\n    console.error(\"Gagal ambil user:\", error);\n  }\n}\n</code></pre>"},{"location":"javascript/04-best-practices/debugging/#teknik-lain-yang-bisa-dicoba","title":"\ud83e\udde9 Teknik Lain yang Bisa Dicoba","text":"<ul> <li>Unit testing: Tangkap bug sejak dini</li> <li>Code review: Bug kadang ketemu saat didiskusikan</li> <li>Rubber duck debugging: Jelaskan masalah ke... boneka (atau teman \ud83d\ude05)</li> <li>Comment sebagian kode: Untuk sempitkan pencarian bug</li> </ul>"},{"location":"javascript/04-best-practices/debugging/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>Debugging emang bisa nyebelin. Tapi kalau kamu ngerti caranya, itu jadi skill super power yang bikin kamu jadi dev yang dicari banyak perusahaan. Serius.</p> <p>\u201cProgramming is like being a detective in a crime movie where you are also the murderer.\u201d \u2014 Filipe Fortes \ud83d\ude08</p> <p>Keep calm &amp; trace the bug. Kamu pasti bisa \ud83d\udcaa</p> <p>```</p>"},{"location":"javascript/04-best-practices/error-handling/","title":"error-handling","text":"<pre><code># \ud83d\udea8 Penanganan Error di JavaScript: Jangan Panik, Tangani!\n\nError dalam pemrograman itu bukan musuh, tapi sinyal bahwa \"Hey, ada yang perlu diperbaiki di sini!\". Kalau kamu bisa tangani error dengan baik, maka kamu bukan cuma ngoding, tapi ngoding dengan **profesionalisme level dewa** \u2694\ufe0f\n\n---\n\n## \ud83d\ude35\u200d\ud83d\udcab Apa Itu Error?\n\n&gt; Error adalah kondisi saat program tidak bisa berjalan sebagaimana mestinya karena ada kesalahan di dalam kode atau input.\n\nError bisa muncul dari:\n- Kesalahan sintaks (typo, kurung kurang, dll)\n- Akses ke variabel yang belum dideklarasi\n- Operasi yang tidak valid (bagi 0? oof.)\n- Masalah jaringan/API\n- dll.\n\n---\n\n## \ud83e\uddea Jenis-jenis Error di JavaScript\n\n| Jenis Error        | Penjelasan                                  |\n|--------------------|----------------------------------------------|\n| `SyntaxError`      | Salah penulisan kode                         |\n| `ReferenceError`   | Akses variabel yang belum dideklarasi        |\n| `TypeError`        | Akses method atau properti yang gak valid    |\n| `RangeError`       | Nilai di luar jangkauan                      |\n| `EvalError`        | Terkait dengan penggunaan `eval()`           |\n| `URIError`         | URI tidak valid (`decodeURIComponent`, dll) |\n\nContoh:\n\n```javascript\nconsole.log(x); // \u274c ReferenceError: x is not defined\n</code></pre>"},{"location":"javascript/04-best-practices/error-handling/#teknik-dasar-menangani-error","title":"\u2705 Teknik Dasar Menangani Error","text":""},{"location":"javascript/04-best-practices/error-handling/#1-trycatch","title":"1. <code>try...catch</code>","text":"<pre><code>try {\n  let result = riskyFunction();\n  console.log(result);\n} catch (error) {\n  console.error(\"Terjadi error:\", error.message);\n}\n</code></pre>"},{"location":"javascript/04-best-practices/error-handling/#2-trycatchfinally","title":"2. <code>try...catch...finally</code>","text":"<pre><code>try {\n  console.log(\"Mulai...\");\n  riskyFunction();\n} catch (e) {\n  console.error(\"Oops!\", e);\n} finally {\n  console.log(\"Cleanup jalan terus, error atau tidak.\");\n}\n</code></pre>"},{"location":"javascript/04-best-practices/error-handling/#menangani-error-asynchronous-promise-asyncawait","title":"\ud83d\udd04 Menangani Error Asynchronous (Promise &amp; Async/Await)","text":""},{"location":"javascript/04-best-practices/error-handling/#promise","title":"Promise","text":"<pre><code>fetch('/api/data')\n  .then(res =&gt; res.json())\n  .then(data =&gt; console.log(data))\n  .catch(err =&gt; console.error(\"Fetch error:\", err));\n</code></pre>"},{"location":"javascript/04-best-practices/error-handling/#asyncawait","title":"Async/Await","text":"<pre><code>async function getData() {\n  try {\n    const res = await fetch('/api/data');\n    const data = await res.json();\n    console.log(data);\n  } catch (err) {\n    console.error(\"Async error:\", err);\n  }\n}\n</code></pre>"},{"location":"javascript/04-best-practices/error-handling/#custom-error-bikin-error-sendiri","title":"\ud83d\udea7 Custom Error: Bikin Error Sendiri","text":"<pre><code>class ValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ValidationError\";\n  }\n}\n\nfunction validateData(data) {\n  if (!data.name) {\n    throw new ValidationError(\"Nama harus diisi.\");\n  }\n}\n</code></pre> <p>Gunakan <code>instanceof</code> untuk mengecek jenis error:</p> <pre><code>try {\n  validateData({});\n} catch (err) {\n  if (err instanceof ValidationError) {\n    console.warn(\"Input tidak valid:\", err.message);\n  } else {\n    throw err;\n  }\n}\n</code></pre>"},{"location":"javascript/04-best-practices/error-handling/#best-practice-error-handling","title":"\ud83d\udc6e Best Practice Error Handling","text":"<p>\u2705 Gunakan <code>try/catch</code> untuk blok kode yang rawan error \u2705 Log dengan jelas \u2014 pakai <code>console.error()</code> atau sistem logging \u2705 Hindari swallow error (nangkap error tapi gak ngapa-ngapain) \u2705 Buat error sejelas mungkin untuk debugging \u2705 Tangani error dari <code>fetch</code>, API, parsing, dan I/O</p>"},{"location":"javascript/04-best-practices/error-handling/#hindari-ini","title":"\ud83e\uddfc Hindari Ini!","text":"<pre><code>try {\n  // kode\n} catch (e) {\n  // kosong, jangan gini!\n}\n</code></pre> <p>Gak ada log, gak ada tindakan. Ini bikin debugging jadi mimpi buruk. Minimal log error-nya!</p>"},{"location":"javascript/04-best-practices/error-handling/#bonus-global-error-handler-browser","title":"\ud83e\udde0 Bonus: Global Error Handler (Browser)","text":"<p>Tangkap semua error JS yang gak ditangani:</p> <pre><code>window.onerror = function(message, source, lineno, colno, error) {\n  console.error(\"Global error handler:\", message);\n};\n</code></pre>"},{"location":"javascript/04-best-practices/error-handling/#logging-lebih-serius-opsional","title":"\ud83d\udce6 Logging Lebih Serius (Opsional)","text":"<p>Untuk aplikasi besar: - Gunakan tool seperti Sentry - Atau logging ke server via API</p>"},{"location":"javascript/04-best-practices/error-handling/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>Penanganan error yang baik = kode yang stabil, mudah debug, dan tahan banting. Jangan takut error \u2014 peluk mereka, tangani dengan lembut, dan log dengan cerdas.</p> <p>\u201cGood error handling turns you from a junior coder into a pro dev.\u201d \u2014 Gen Z Dev \ud83d\ude0e</p> <p>Stay safe, happy debugging! \ud83d\udcaa ```</p>"},{"location":"javascript/04-best-practices/eslintrc-prettierrc/","title":"Eslintcr & Prettier","text":""},{"location":"javascript/04-best-practices/eslintrc-prettierrc/#file-eslintrcjs","title":"\ud83e\udde0 File <code>.eslintrc.js</code>","text":"<pre><code>module.exports = {\n  env: {\n    browser: true,\n    es2021: true,\n    node: true,\n  },\n  extends: [\n    \"eslint:recommended\",\n    \"prettier\", // Integrasi biar gak tabrakan sama Prettier\n  ],\n  parserOptions: {\n    ecmaVersion: \"latest\",\n    sourceType: \"module\",\n  },\n  rules: {\n    // \ud83d\udea8 Gaya koding konsisten\n    indent: [\"error\", 2],\n    quotes: [\"error\", \"single\"],\n    semi: [\"error\", \"always\"],\n    \"no-unused-vars\": [\"warn\"],\n    \"no-console\": [\"warn\"],\n    \"no-debugger\": [\"error\"],\n\n    // \u2728 Optional tambahan\n    \"prefer-const\": [\"error\"],\n    \"eqeqeq\": [\"error\", \"always\"],\n    \"no-var\": [\"error\"],\n  },\n};\n</code></pre>"},{"location":"javascript/04-best-practices/eslintrc-prettierrc/#file-prettierrc","title":"\ud83c\udfa8 File <code>.prettierrc</code>","text":"<pre><code>{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"printWidth\": 80,\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"trailingComma\": \"es5\",\n  \"bracketSpacing\": true,\n  \"arrowParens\": \"avoid\"\n}\n</code></pre>"},{"location":"javascript/04-best-practices/eslintrc-prettierrc/#opsional-tambahkan-script-di-packagejson","title":"\ud83e\udde9 Opsional: Tambahkan Script di <code>package.json</code>","text":"<p>Kalau kamu pake Node.js dan punya <code>package.json</code>, tambahin:</p> <pre><code>\"scripts\": {\n  \"lint\": \"eslint .\",\n  \"format\": \"prettier --write .\"\n}\n</code></pre>"},{"location":"javascript/04-best-practices/eslintrc-prettierrc/#bonus-auto-fix-pas-save-di-vscode","title":"\ud83d\ude80 Bonus: Auto-fix pas save (di VSCode)","text":"<ol> <li>Install extensions:</li> <li>ESLint</li> <li> <p>Prettier \u2013 Code formatter</p> </li> <li> <p>Lalu tambahkan ke <code>settings.json</code> VSCode:</p> </li> </ol> <pre><code>{\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": true,\n    \"source.fixAll.eslint\": true\n  },\n  \"eslint.validate\": [\"javascript\"],\n  \"prettier.enable\": true\n}\n</code></pre>"},{"location":"javascript/04-best-practices/komentar/","title":"\ud83d\udcac Panduan Menulis Komentar yang Baik di JavaScript","text":"<p>Komentar itu kayak bumbu masakan. Kalau pas, bikin enak. Kalau kebanyakan... malah bikin pusing. \ud83c\udf5c</p> <p>Tujuan komentar: - Menjelaskan kenapa, bukan apa. - Memberi konteks untuk logika yang kompleks. - Membantu developer lain (atau diri sendiri 6 bulan kemudian \ud83d\ude05).</p>"},{"location":"javascript/04-best-practices/komentar/#komentar-bukan-pengganti-kode-yang-jelas","title":"\ud83e\udde0 Komentar Bukan Pengganti Kode yang Jelas","text":"<pre><code>// \u274c Komentar nggak perlu\n// Menambahkan 1 ke nilai i\ni = i + 1;\n</code></pre> <p>Kode di atas udah cukup jelas. Komentar kayak gitu malah mubazir dan bikin penuh layar.</p>"},{"location":"javascript/04-best-practices/komentar/#komentar-yang-bagus-itu","title":"\u2705 Komentar yang Bagus Itu...","text":""},{"location":"javascript/04-best-practices/komentar/#1-menjelaskan-alasan-di-balik-kode","title":"1. Menjelaskan Alasan di Balik Kode","text":"<pre><code>// Menghindari bug Safari saat parsing JSON besar\nconst data = JSON.parse(jsonString);\n</code></pre>"},{"location":"javascript/04-best-practices/komentar/#2-memberi-konteks-untuk-logika-kompleks","title":"2. Memberi Konteks untuk Logika Kompleks","text":"<pre><code>// Menghitung gaji prorata jika karyawan masuk pertengahan bulan\nconst proratedSalary = (baseSalary / daysInMonth) * daysWorked;\n</code></pre>"},{"location":"javascript/04-best-practices/komentar/#3-menandai-hal-penting","title":"3. Menandai Hal Penting","text":"<p>Gunakan tag seperti:</p> <ul> <li><code>TODO:</code> \u279c yang harus dikerjakan nanti</li> <li><code>FIXME:</code> \u279c ada yang salah, perlu dibenerin</li> <li><code>HACK:</code> \u279c solusi darurat yang belum ideal</li> <li><code>NOTE:</code> \u279c catatan penting</li> </ul> <pre><code>// TODO: Tambahkan validasi untuk input kosong\n// FIXME: Crash kalau data kosong\n// HACK: Pakai delay manual karena bug dari API\n</code></pre>"},{"location":"javascript/04-best-practices/komentar/#komentar-yang-harus-dihindari","title":"\u274c Komentar yang Harus Dihindari","text":""},{"location":"javascript/04-best-practices/komentar/#1-menjelaskan-kode-yang-jelas","title":"1. Menjelaskan Kode yang Jelas","text":"<pre><code>// Mengatur x menjadi 10\nlet x = 10;\n</code></pre>"},{"location":"javascript/04-best-practices/komentar/#2-komentar-redundant","title":"2. Komentar Redundant","text":"<pre><code>// Fungsi ini menambahkan dua angka\nfunction tambah(a, b) {\n  return a + b;\n}\n</code></pre> <p>Kalo kamu merasa perlu komentar kayak gitu, coba ubah nama fungsi jadi lebih jelas aja.</p>"},{"location":"javascript/04-best-practices/komentar/#tips-menulis-komentar","title":"\u2728 Tips Menulis Komentar","text":"<ul> <li>Tulis sejelas mungkin. Hindari singkatan aneh atau bahasa alien.</li> <li>Gunakan bahasa yang konsisten. Kalau dokumentasimu pakai bahasa Indonesia, jangan tiba-tiba pakai bahasa Klingon.</li> <li>Letakkan komentar di atas kode yang dijelaskan, bukan di samping.</li> </ul> <pre><code>// Menghindari NaN jika nilai kosong\nconst nilai = parseFloat(input) || 0;\n</code></pre>"},{"location":"javascript/04-best-practices/komentar/#komentar-vs-dokumentasi","title":"\ud83d\udccc Komentar vs Dokumentasi","text":"<p>Gunakan komentar untuk: - Penjelasan cepat - Catatan penting dalam kode</p> <p>Gunakan dokumentasi terpisah (seperti ini!) untuk: - Penjelasan lengkap fungsi - Tutorial penggunaan modul - Panduan best practice</p>"},{"location":"javascript/04-best-practices/komentar/#zen-of-komentar","title":"\ud83e\uddd8\u200d\u2640\ufe0f Zen of Komentar","text":"<p>\"Kode yang bagus butuh sedikit komentar. Tapi komentar yang bagus bisa menyelamatkan proyek.\" \u2014 Seorang developer yang trauma debug jam 3 pagi \ud83d\ude35\u200d\ud83d\udcab</p>"},{"location":"javascript/04-best-practices/komentar/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>Komentar bukan tempat curhat. Tapi dia bisa jadi penyelamat di saat genting. Gunakan dengan bijak, dan ingat: komentar yang baik = tim yang bahagia \ud83e\udef6</p> <p>```</p> <p>Kalau kamu mau, kita juga bisa bikin template komentar atau style guide komentar internal. Mau dibuatkan? \ud83d\ude04</p>"},{"location":"javascript/04-best-practices/performance/","title":"Performance","text":"<pre><code># \u26a1 Optimasi Performa JavaScript: Biar Ngebut Kayak Mobil F1\n\nPerforma adalah hal krusial, terutama saat web/app kamu harus responsif, cepat, dan gak bikin user ngantuk nungguin loading. Semakin efisien kodenya, semakin bahagia user-nya (dan servernya juga). \ud83d\ude0e\n\n---\n\n## \ud83d\udea6 Kenapa Performa Penting?\n\n- \u23f1\ufe0f Loading lambat = user kabur\n- \ud83d\udd01 Operasi berat = browser freeze\n- \ud83e\udde0 Kode boros = RAM browser nangis\n- \ud83d\udcc9 SEO bisa terdampak dari kecepatan situs\n\n---\n\n## \ud83d\udd0d Teknik Dasar Optimasi\n\n### 1. Hindari Reflow dan Repaint Berlebihan (DOM Manipulasi)\n\nManipulasi DOM yang sering bisa memperlambat render halaman:\n\n\u274c Buruk:\n```javascript\nfor (let i = 0; i &lt; 1000; i++) {\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n}\n</code></pre> <p>\u2705 Lebih baik:</p> <pre><code>const fragment = document.createDocumentFragment();\nfor (let i = 0; i &lt; 1000; i++) {\n  const div = document.createElement(\"div\");\n  fragment.appendChild(div);\n}\ndocument.body.appendChild(fragment);\n</code></pre>"},{"location":"javascript/04-best-practices/performance/#2-debounce-dan-throttle","title":"2. Debounce dan Throttle","text":"<p>Buat event seperti scroll atau resize gak nembak terus-terusan.</p> <p>\ud83d\udccc Debounce:</p> <pre><code>function debounce(fn, delay) {\n  let timeout;\n  return function () {\n    clearTimeout(timeout);\n    timeout = setTimeout(fn, delay);\n  };\n}\n</code></pre> <p>\ud83d\udccc Throttle:</p> <pre><code>function throttle(fn, limit) {\n  let waiting = false;\n  return function () {\n    if (!waiting) {\n      fn();\n      waiting = true;\n      setTimeout(() =&gt; waiting = false, limit);\n    }\n  };\n}\n</code></pre>"},{"location":"javascript/04-best-practices/performance/#3-gunakan-variabel-secukupnya","title":"3. Gunakan Variabel Secukupnya","text":"<p>Jangan bikin variabel yang gak dipakai. Dan jangan ngeloop data besar kalau gak perlu.</p> <pre><code>// Jangan\nlet unusedVar = \"ini gak dipakai\";\n\n// Hindari nested loop berat:\nfor (let i = 0; i &lt; users.length; i++) {\n  for (let j = 0; j &lt; orders.length; j++) {\n    // \ud83d\udc0c lambat banget\n  }\n}\n</code></pre>"},{"location":"javascript/04-best-practices/performance/#4-optimalkan-loop-dan-array","title":"4. Optimalkan Loop dan Array","text":"<p>\u274c Lambat:</p> <pre><code>for (let i = 0; i &lt; arr.length; i++) { ... }\n</code></pre> <p>\u2705 Lebih optimal:</p> <pre><code>for (let i = 0, len = arr.length; i &lt; len; i++) { ... }\n</code></pre> <p>Atau gunakan <code>.forEach()</code> untuk lebih bersih.</p>"},{"location":"javascript/04-best-practices/performance/#5-lazy-load-gambar-script","title":"5. Lazy Load Gambar &amp; Script","text":"<p>Tunda load resource yang gak langsung dibutuhkan.</p> <pre><code>&lt;img src=\"foto.jpg\" loading=\"lazy\" /&gt;\n&lt;script async src=\"script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"javascript/04-best-practices/performance/#6-gunakan-web-worker-untuk-proses-berat","title":"6. Gunakan Web Worker untuk Proses Berat","text":"<p>Pisahkan proses berat dari main thread biar UI gak freeze:</p> <pre><code>const worker = new Worker(\"worker.js\");\nworker.postMessage(\"data\");\n\nworker.onmessage = function (e) {\n  console.log(\"Dari worker:\", e.data);\n};\n</code></pre>"},{"location":"javascript/04-best-practices/performance/#tips-advance","title":"\ud83e\udde0 Tips Advance","text":"<ul> <li>Cache hasil fetch atau perhitungan berat</li> <li>Gunakan pagination &amp; virtual scrolling untuk data besar</li> <li>Compress data JSON (pakai gzip di backend)</li> <li>Gunakan framework/library ringan</li> <li>Hindari deep cloning berlebihan (<code>JSON.parse(JSON.stringify(...))</code> itu berat!)</li> </ul>"},{"location":"javascript/04-best-practices/performance/#alat-analisis-performa","title":"\ud83d\udcca Alat Analisis Performa","text":"<ul> <li>Lighthouse (Chrome DevTools)</li> <li>Performance tab (Chrome DevTools)</li> <li>WebPageTest.org</li> <li>JSPerf.com (benchmarking)</li> </ul>"},{"location":"javascript/04-best-practices/performance/#checklist-optimasi","title":"\u2705 Checklist Optimasi","text":"Checklist Status Gunakan <code>let</code>/<code>const</code> dengan tepat \u2705 Hindari DOM manipulasi berulang \u2705 Gunakan debounce/throttle \u2705 Gunakan fragment untuk batch DOM \u2705 Gunakan lazy loading \u2705 Hindari nested loop \u2705 Gunakan cache \u2705 Analisis performa secara rutin \u2705"},{"location":"javascript/04-best-practices/performance/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>Optimasi performa bukan cuma soal nulis kode yang jalan, tapi kode yang jalan cepat dan efisien. Di dunia nyata, user gak mau nunggu. Dan kamu gak mau bikin browser crash, kan?</p> <p>\"Fast code is clean code. Clean code is happy dev. Happy dev = peaceful world.\" \u2014 Orang bijak JavaScript \ud83c\udf0d</p> <p>Tulis kode se-efisien mungkin. Minimal, jangan bikin laptop user nyalain kipas jet \ud83d\ude80 ```</p>"},{"location":"javascript/04-best-practices/refactor/","title":"Refactor","text":"<pre><code># \ud83d\udd27 Refactoring JavaScript: Biar Kode Gak Kayak Mie Kusut\n\nRefactoring adalah seni memperbaiki struktur kode tanpa mengubah fungsinya. Bukan cuma biar \"keliatan rapi\", tapi biar lebih **mudah dibaca, di-debug, di-maintain, dan di-scale**. Coding itu bukan lomba cepat-cepetan, tapi lomba siapa yang bikin kode bisa dinikmati developer lain \u2014 termasuk kamu sendiri di masa depan \ud83d\ude04\n\n---\n\n## \ud83e\udd14 Kenapa Perlu Refactor?\n\n- Kode sulit dibaca &amp; dimengerti\n- Banyak pengulangan (DRY dong!)\n- Fungsi terlalu panjang\n- Nama variabel gak jelas (`x`, `data1`, `temp`??)\n- Struktur tidak konsisten\n- Performa bisa ditingkatkan\n- Waktu revisit project, kamu pengen nangis\n\n---\n\n## \ud83e\ude9a Prinsip Refactoring\n\n| Prinsip         | Makna                                                                 |\n|------------------|-----------------------------------------------------------------------|\n| DRY              | Don\u2019t Repeat Yourself \u2013 Hindari duplikasi kode                       |\n| KISS             | Keep It Simple, Stupid \u2013 Sederhanakan logika                         |\n| SRP              | Single Responsibility Principle \u2013 Satu fungsi = satu tugas           |\n| YAGNI            | You Aren\u2019t Gonna Need It \u2013 Jangan overengineering                    |\n| Meaningful Names | Gunakan nama variabel dan fungsi yang menjelaskan maksudnya          |\n\n---\n\n## \ud83d\udee0\ufe0f Contoh Refactor\n\n### 1. Nama Variabel &amp; Fungsi yang Buruk\n\n\u274c Sebelum:\n\n```javascript\nfunction a(d) {\n  return d * 12.5 / 100;\n}\n</code></pre> <p>\u2705 Sesudah:</p> <pre><code>function hitungDiskon(persen) {\n  return persen * 12.5 / 100;\n}\n</code></pre>"},{"location":"javascript/04-best-practices/refactor/#2-duplikasi-kode","title":"2. Duplikasi Kode","text":"<p>\u274c Sebelum:</p> <pre><code>if (role === 'admin') {\n  console.log('Hai admin!');\n}\nif (role === 'admin') {\n  aksesAdmin();\n}\n</code></pre> <p>\u2705 Sesudah:</p> <pre><code>if (role === 'admin') {\n  console.log('Hai admin!');\n  aksesAdmin();\n}\n</code></pre>"},{"location":"javascript/04-best-practices/refactor/#3-fungsi-panjang","title":"3. Fungsi Panjang","text":"<p>\u274c Fungsi terlalu panjang:</p> <pre><code>function prosesUser(user) {\n  // validasi\n  if (!user.nama) throw 'Nama wajib';\n  if (!user.email) throw 'Email wajib';\n  // format data\n  user.nama = user.nama.toUpperCase();\n  user.email = user.email.toLowerCase();\n  // simpan\n  saveToDB(user);\n}\n</code></pre> <p>\u2705 Dipecah jadi fungsi kecil:</p> <pre><code>function validasiUser(user) {\n  if (!user.nama) throw 'Nama wajib';\n  if (!user.email) throw 'Email wajib';\n}\n\nfunction formatUser(user) {\n  return {\n    ...user,\n    nama: user.nama.toUpperCase(),\n    email: user.email.toLowerCase()\n  };\n}\n\nfunction prosesUser(user) {\n  validasiUser(user);\n  const dataSiap = formatUser(user);\n  saveToDB(dataSiap);\n}\n</code></pre>"},{"location":"javascript/04-best-practices/refactor/#4-refactor-ifelse-menjadi-object-lookup","title":"4. Refactor IF/ELSE Menjadi Object Lookup","text":"<p>\u274c Banyak if-else:</p> <pre><code>if (status === 'aktif') {\n  return 'User aktif';\n} else if (status === 'nonaktif') {\n  return 'User nonaktif';\n} else if (status === 'banned') {\n  return 'User diblokir';\n}\n</code></pre> <p>\u2705 Pakai object lookup:</p> <pre><code>const statusMap = {\n  aktif: 'User aktif',\n  nonaktif: 'User nonaktif',\n  banned: 'User diblokir'\n};\n\nreturn statusMap[status] || 'Status tidak dikenal';\n</code></pre>"},{"location":"javascript/04-best-practices/refactor/#tips-refactor-aman","title":"\ud83e\uddea Tips Refactor Aman","text":"<ol> <li>Unit Test itu wajib sebelum refactor!</li> <li>Refactor perlahan, satu bagian kecil dulu</li> <li>Jangan refactor sambil nambah fitur baru</li> <li>Gunakan formatter otomatis (Prettier, ESLint)</li> <li>Commit kecil per perubahan, jangan 1 commit besar</li> </ol>"},{"location":"javascript/04-best-practices/refactor/#tools-bantu-refactoring","title":"\ud83d\udd25 Tools Bantu Refactoring","text":"<ul> <li>ESLint \u2192 untuk deteksi potensi masalah kode</li> <li>Prettier \u2192 auto format kode</li> <li>Jest \u2192 untuk testing</li> <li>VSCode Refactor tools (<code>F2</code>, <code>Ctrl+Shift+R</code>, dsb)</li> </ul>"},{"location":"javascript/04-best-practices/refactor/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>Refactoring itu kaya bebersih rumah. Emang capek di awal, tapi bikin nyaman dan enak ditinggali lama-lama.</p> <p>\"Refactor itu bukan tentang mengubah kode, tapi bikin kode jadi punya masa depan.\" \u2014 Dev bijak \u2728</p> <p>Rutin refactor = kode sehat + developer waras = tim produktif \ud83d\udcaa ```</p>"},{"location":"javascript/04-best-practices/style-guide/","title":"Style Guide","text":"<pre><code># \ud83c\udfa8 Panduan Gaya Penulisan Kode JavaScript (Style Guide)\n\nNulis kode itu kayak ngelukis: beda orang, beda gaya. Tapi kalau kerjanya bareng-bareng, kita butuh **aturan main** biar nggak kayak hasil karya anak TK yang nyampur crayon. \ud83c\udfa8\n\nStyle guide bikin kode kita:\n- Konsisten\n- Mudah dibaca\n- Gampang dipelihara\n- Dan yang pasti... bikin reviewer senyum-senyum \ud83d\ude0f\n\n---\n\n## \ud83e\uddf1 Dasar-Dasar Penulisan\n\n### 1. Gunakan `const` dan `let` \u2014 hindari `var`\n\n```javascript\n// \u274c Jangan\nvar nama = \"Marno\";\n\n// \u2705 Lebih baik\nconst nama = \"Marno\"; // untuk nilai yang tidak berubah\nlet umur = 25;         // untuk nilai yang bisa berubah\n</code></pre>"},{"location":"javascript/04-best-practices/style-guide/#2-gunakan-semicolon-secara-konsisten","title":"2. Gunakan Semicolon (<code>;</code>) Secara Konsisten","text":"<pre><code>// \u2705 Gunakan\nconst angka = 10;\n</code></pre> <p>JavaScript kadang \"ngerti-ngertiin\", tapi jangan biarkan parser nebak-nebak. Pakai semicolon!</p>"},{"location":"javascript/04-best-practices/style-guide/#3-indentasi-2-spasi-atau-4-spasi-yang-penting-konsisten","title":"3. Indentasi 2 Spasi (atau 4 spasi, yang penting konsisten)","text":"<pre><code>function sapa() {\n  console.log(\"Halo!\");\n}\n</code></pre>"},{"location":"javascript/04-best-practices/style-guide/#penamaan-yang-jelas","title":"\u2728 Penamaan yang Jelas","text":"Jenis Gaya Contoh Variabel/fungsi <code>camelCase</code> <code>jumlahBuah</code>, <code>tambahData()</code> Class <code>PascalCase</code> <code>UserModel</code>, <code>PanenRekap</code> Konstanta global <code>UPPER_SNAKE</code> <code>MAX_LIMIT</code>, <code>API_URL</code> <pre><code>const MAX_RETRIES = 3;\nclass DataFetcher { ... }\n</code></pre>"},{"location":"javascript/04-best-practices/style-guide/#struktur-dan-format","title":"\ud83e\uddfc Struktur dan Format","text":""},{"location":"javascript/04-best-practices/style-guide/#1-satu-statement-per-baris","title":"1. Satu Statement per Baris","text":"<pre><code>// \u274c Jangan\nlet a = 1; let b = 2;\n\n// \u2705 Lebih baik\nlet a = 1;\nlet b = 2;\n</code></pre>"},{"location":"javascript/04-best-practices/style-guide/#2-spasi-itu-penting","title":"2. Spasi Itu Penting!","text":"<pre><code>// \u274c Jangan\nif(x===10){console.log(\"yes\");}\n\n// \u2705 Lebih baik\nif (x === 10) {\n  console.log(\"yes\");\n}\n</code></pre>"},{"location":"javascript/04-best-practices/style-guide/#3-jangan-gunakan-magic-number","title":"3. Jangan Gunakan Magic Number","text":"<pre><code>// \u274c Jangan\nif (umur &gt; 17) {...}\n\n// \u2705 Lebih baik\nconst MINIMUM_UMUR = 17;\nif (umur &gt; MINIMUM_UMUR) {...}\n</code></pre>"},{"location":"javascript/04-best-practices/style-guide/#fungsi-dan-logika","title":"\ud83e\udde0 Fungsi dan Logika","text":""},{"location":"javascript/04-best-practices/style-guide/#1-satu-fungsi-satu-tugas","title":"1. Satu Fungsi, Satu Tugas","text":"<pre><code>// \u274c Jangan\nfunction prosesDataDanSimpanKeDatabase() {...}\n\n// \u2705 Lebih baik\nfunction prosesData() {...}\nfunction simpanKeDatabase() {...}\n</code></pre>"},{"location":"javascript/04-best-practices/style-guide/#2-hindari-fungsi-terlalu-panjang","title":"2. Hindari Fungsi Terlalu Panjang","text":"<p>Jika fungsi udah panjang kayak sinetron, itu tandanya perlu dipotong jadi episode-episode alias subfungsi.</p>"},{"location":"javascript/04-best-practices/style-guide/#struktur-folder-dan-file","title":"\ud83d\udcc2 Struktur Folder dan File","text":"<pre><code>.\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2514\u2500\u2500 Button.js\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u2514\u2500\u2500 formatDate.js\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2502   \u2514\u2500\u2500 Home.js\n\u2514\u2500\u2500 index.js\n</code></pre> <p>Pisahkan fungsi, komponen, dan halaman sesuai peranannya.</p>"},{"location":"javascript/04-best-practices/style-guide/#kapan-gunakan-eslint-dan-prettier","title":"\u2705 Kapan Gunakan ESLint dan Prettier?","text":"<p>Kalau kamu ingin otomatisasi gaya penulisan, install:</p> <pre><code>npm install eslint prettier --save-dev\n</code></pre> <p>Lalu setup <code>.eslintrc.js</code> dan <code>.prettierrc</code></p> <p>Contoh config:</p> <pre><code>// .eslintrc.js\nmodule.exports = {\n  env: {\n    browser: true,\n    es2021: true\n  },\n  extends: ['eslint:recommended'],\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module'\n  },\n  rules: {\n    semi: ['error', 'always'],\n    quotes: ['error', 'single']\n  }\n};\n</code></pre> <pre><code>// .prettierrc\n{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"tabWidth\": 2\n}\n</code></pre>"},{"location":"javascript/04-best-practices/style-guide/#bonus-tips","title":"\ud83d\udd25 Bonus Tips","text":"<ul> <li>Komentar \u2192 hanya jika benar-benar perlu.</li> <li>Jangan komentar \"kode yang jelas\". Tapi jelaskan kenapa, bukan apa.</li> </ul> <pre><code>// \u274c Buruk\n// Mengatur variabel i menjadi 0\nlet i = 0;\n\n// \u2705 Baik\n// Memulai dari indeks pertama untuk iterasi user\nlet i = 0;\n</code></pre>"},{"location":"javascript/04-best-practices/style-guide/#zen-of-javascript-style","title":"\ud83e\uddd8\u200d\u2642\ufe0f Zen of JavaScript Style","text":"<p>\"Kode itu dibaca lebih sering daripada ditulis.\"</p> <p>Kalau kamu pusing lihat kode sendiri seminggu kemudian... saatnya ubah gaya nulismu, bestie.</p>"},{"location":"javascript/04-best-practices/style-guide/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>Style guide bukan aturan ketat, tapi pedoman hidup buat bikin proyek kamu sehat, kolaboratif, dan scalable. Mau nulis sendiri atau tim besar, patuhi style guide seperti kamu patuhi rambu lalu lintas. \ud83d\udea6</p> <p>Konsistensi &gt; Gaya pribadi Bikin kode indah, biar yang baca juga bahagia \u2728</p> <p>```</p> <p>Kalau kamu mau, kita bisa buatkan file <code>.eslintrc.js</code> dan <code>.prettierrc</code> juga biar tinggal pakai di proyekmu. Mau sekalian dibikinin? \ud83d\ude0e</p>"},{"location":"javascript/04-best-practices/testing/","title":"Testing","text":"<pre><code># \ud83e\uddea Testing di JavaScript: Biar Nggak Cuma \"Feeling Aman\"\n\nTesting bukan cuma buat developer perfeksionis. Ini *senjata rahasia* buat memastikan kode kamu jalan sesuai harapan \u2014 **dan tetap jalan walau udah dioprek-oprek orang satu tim**. Kalau kamu pernah nambah fitur terus tiba-tiba bagian lain rusak, berarti kamu udah kenal si \"regression bug\". Testing bisa jadi tamengmu. \ud83d\udee1\ufe0f\n\n---\n\n## \ud83d\udccc Kenapa Perlu Testing?\n\n- Pastikan kode **berfungsi dengan benar**\n- Lindungi dari **bug tersembunyi**\n- Bantu proses **refactor tanpa takut**\n- Jadi dokumentasi hidup\n- Bikin kamu terlihat profesional di mata tech lead \ud83d\ude0e\n\n---\n\n## \ud83e\uddec Jenis-Jenis Testing\n\n| Jenis                | Fokus                                                             |\n|----------------------|-------------------------------------------------------------------|\n| Unit Test            | Fungsi/unit terkecil (biasanya 1 fungsi)                          |\n| Integration Test     | Beberapa fungsi/module bekerja bareng                             |\n| End-to-End (E2E) Test| Simulasi interaksi user dari awal sampai akhir                    |\n| Snapshot Test        | Membandingkan output sekarang dengan output sebelumnya            |\n\n---\n\n## \ud83d\udd27 Alat Testing Populer\n\n| Tool        | Keterangan                              |\n|-------------|------------------------------------------|\n| Jest        | Paling populer untuk unit test           |\n| Mocha + Chai| Alternatif fleksibel                     |\n| Vitest      | Cepat dan modern, mirip Jest             |\n| Cypress     | Untuk end-to-end testing berbasis browser|\n| Playwright  | Mirip Cypress, tapi kuat buat testing multi-browser |\n\n---\n\n## \ud83d\ude80 Contoh Unit Test dengan Jest\n\n### 1. Fungsi yang Diuji\n\n```javascript\n// utils/math.js\nfunction tambah(a, b) {\n  return a + b;\n}\nmodule.exports = tambah;\n</code></pre>"},{"location":"javascript/04-best-practices/testing/#2-file-testing-nya","title":"2. File Testing-nya","text":"<pre><code>// __tests__/math.test.js\nconst tambah = require('../utils/math');\n\ntest('menjumlahkan 2 + 3 harusnya 5', () =&gt; {\n  expect(tambah(2, 3)).toBe(5);\n});\n</code></pre>"},{"location":"javascript/04-best-practices/testing/#3-jalankan-test","title":"3. Jalankan Test","text":"<pre><code>npx jest\n</code></pre>"},{"location":"javascript/04-best-practices/testing/#setup-jest-manual","title":"\u2699\ufe0f Setup Jest (Manual)","text":"<pre><code>npm init -y\nnpm install --save-dev jest\n</code></pre> <p>Di <code>package.json</code>, tambahkan:</p> <pre><code>\"scripts\": {\n  \"test\": \"jest\"\n}\n</code></pre>"},{"location":"javascript/04-best-practices/testing/#contoh-test-lain","title":"\ud83e\udd16 Contoh Test Lain","text":""},{"location":"javascript/04-best-practices/testing/#test-fungsi-asynchronous","title":"Test Fungsi Asynchronous","text":"<pre><code>// asyncFunction.js\nfunction getUser(id) {\n  return Promise.resolve({ id, name: 'Marno' });\n}\n\nmodule.exports = getUser;\n</code></pre> <pre><code>// asyncFunction.test.js\nconst getUser = require('../utils/asyncFunction');\n\ntest('ambil user by id', async () =&gt; {\n  const user = await getUser(10);\n  expect(user.name).toBe('Marno');\n});\n</code></pre>"},{"location":"javascript/04-best-practices/testing/#best-practice-testing","title":"\ud83e\uddfc Best Practice Testing","text":"<ul> <li>Gunakan nama test yang jelas</li> <li>Jangan test hal yang gak penting (kayak <code>2 + 2 = 4</code>)</li> <li>Pisahkan test dari logic (misal: folder <code>__tests__</code> atau <code>tests</code>)</li> <li>Gunakan coverage untuk cek sejauh mana kode kamu dites</li> </ul> <pre><code>npx jest --coverage\n</code></pre>"},{"location":"javascript/04-best-practices/testing/#tdd-vs-bdd","title":"\ud83e\udde0 TDD vs BDD","text":"Istilah Penjelasan TDD Test-Driven Development \u2192 tulis test dulu, baru implementasi kodenya BDD Behavior-Driven Development \u2192 fokus ke perilaku aplikasi yang diharapkan"},{"location":"javascript/04-best-practices/testing/#testing-frontend-dom","title":"\ud83e\udd13 Testing Frontend DOM","text":"<p>Misal kamu punya tombol:</p> <pre><code>&lt;button id=\"klik\"&gt;Klik aku!&lt;/button&gt;\n&lt;p id=\"output\"&gt;&lt;/p&gt;\n</code></pre> <p>Dan script:</p> <pre><code>document.getElementById(\"klik\").addEventListener(\"click\", () =&gt; {\n  document.getElementById(\"output\").textContent = \"Sudah diklik!\";\n});\n</code></pre> <p>Dengan tool seperti Jest + jsdom, kamu bisa test manipulasi DOM-nya.</p>"},{"location":"javascript/04-best-practices/testing/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>Testing bukan buang-buang waktu. Justru hemat waktu dari masa depan yang penuh bug dan lembur. Bahkan kalau kamu kerja solo, testing itu seperti ngasih jaminan ke diri sendiri:</p> <p>\"Kalau rusak, aku tahu kenapa.\" \u2014 Kamu yang masa depan \u2728</p> <p>Mulailah dari unit test, perlahan ke integration, dan kalau udah pede, masuk ke E2E. Yang penting: tes itu investasi, bukan beban \ud83d\udcb8</p>"},{"location":"javascript/04-best-practices/testing/#checklist-testing","title":"\u2705 Checklist Testing","text":"Kegiatan Status Setup Jest / Vitest \u2705 Buat minimal 1 unit test \u2705 Jalankan <code>npm test</code> rutin \u2705 Gunakan coverage \u2705 Simulasikan edge-case \u2705 Tambahkan test saat refactor \u2705 ``` <p>Dokumentasi best practices udah lengkap nih bro! Kalau mau lanjut, bisa kita tambahkan:</p> <ul> <li>Halaman \"FAQ JavaScript\"</li> <li>Panduan kontribusi (<code>CONTRIBUTING.md</code>)</li> <li>Panduan deploy ke GitHub Pages lagi</li> <li>Atau bikin PDF export dari MkDocs</li> </ul> <p>Mau lanjut ke mana dulu? \ud83d\ude0e\ud83d\udcd8</p>"}]}