{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"Selamat Datang di Dokumentasi Pemrograman","text":"<p>Ini adalah dokumentasi lengkap untuk berbagai bahasa pemrograman. Anda dapat memilih bahasa pemrograman yang ingin dipelajari melalui tombol di bawah ini.</p>"},{"location":"#pilih-bahasa-pemrograman","title":"Pilih Bahasa Pemrograman:","text":"JAVA               JS               SQL               PHP               PHP"},{"location":"#tentang-dokumentasi","title":"Tentang Dokumentasi","text":"<p>Dokumentasi ini mencakup berbagai bahasa pemrograman mulai dari pengenalan dasar hingga topik lanjutan. Anda bisa memilih bahasa pemrograman yang ingin dipelajari dengan mudah melalui menu di atas.</p> <ol> <li>Java - Pengenalan Java, OOP, dan aplikasi Android.</li> <li>JavaScript - Pengenalan JavaScript, DOM, dan pengembangan web.</li> <li>SQL - Pengenalan SQL, query, dan database management.</li> <li>PHP - Pengenalan PHP, server-side scripting, dan web development.</li> </ol> <p>Selamat belajar dan semoga sukses!</p>"},{"location":"PHP/01-pemula/01-Pengenalan-PHP/","title":"01 Pengenalan PHP","text":""},{"location":"PHP/01-pemula/02-Instalasi-dan-Setup/","title":"02 Instalasi dan Setup","text":""},{"location":"PHP/01-pemula/03-Struktur-Dasar-Program-PHP/","title":"03 Struktur Dasar Program PHP","text":""},{"location":"PHP/01-pemula/04-Tipe-Data-dan-Variabel/","title":"04 Tipe Data dan Variabel","text":""},{"location":"PHP/01-pemula/05-Operator/","title":"05 Operator","text":""},{"location":"PHP/01-pemula/06-Struktur-Kontrol/","title":"06 Struktur Kontrol","text":""},{"location":"PHP/01-pemula/07-Perulangan/","title":"07 Perulangan","text":""},{"location":"PHP/01-pemula/08-Fungsi/","title":"08 Fungsi","text":""},{"location":"PHP/01-pemula/09-Array/","title":"09 Array","text":""},{"location":"PHP/01-pemula/10-Superglobal/","title":"10 Superglobal","text":""},{"location":"PHP/01-pemula/11-Form-Handling/","title":"11 Form Handling","text":""},{"location":"PHP/01-pemula/12-Include-dan-Require/","title":"12 Include dan Require","text":""},{"location":"PHP/02-menengah/13-String-dan-Regex/","title":"13 String dan Regex","text":""},{"location":"PHP/02-menengah/14-File-Handling/","title":"14 File Handling","text":""},{"location":"PHP/02-menengah/15-Session-Cookie/","title":"15 Session Cookie","text":""},{"location":"PHP/02-menengah/16-Upload-File/","title":"16 Upload File","text":""},{"location":"PHP/02-menengah/17-Validasi-Data/","title":"17 Validasi Data","text":""},{"location":"PHP/02-menengah/18-MySQL-Koneksi/","title":"18 MySQL Koneksi","text":""},{"location":"PHP/02-menengah/19-CRUD-MySQL/","title":"19 CRUD MySQL","text":""},{"location":"PHP/02-menengah/20-Modularisasi-Kode/","title":"20 Modularisasi Kode","text":""},{"location":"PHP/02-menengah/21-Error-Handling/","title":"21 Error Handling","text":""},{"location":"PHP/03-mahir/22-OOP-di-PHP/","title":"22 OOP di PHP","text":""},{"location":"PHP/03-mahir/23-Constructor-Inheritance/","title":"23 Constructor Inheritance","text":""},{"location":"PHP/03-mahir/24-Interface-Abstract/","title":"24 Interface Abstract","text":""},{"location":"PHP/03-mahir/25-Trait/","title":"25 Trait","text":""},{"location":"PHP/03-mahir/26-Namespace-Autoloading/","title":"26 Namespace Autoloading","text":""},{"location":"PHP/03-mahir/27-Composer/","title":"27 Composer","text":""},{"location":"PHP/03-mahir/28-Design-Pattern/","title":"28 Design Pattern","text":""},{"location":"PHP/03-mahir/29-REST-API/","title":"29 REST API","text":""},{"location":"PHP/03-mahir/30-JSON-HTTP/","title":"30 JSON HTTP","text":""},{"location":"PHP/03-mahir/31-Middleware/","title":"31 Middleware","text":""},{"location":"PHP/04-best-practices/32-Clean-Code/","title":"32 Clean Code","text":""},{"location":"PHP/04-best-practices/33-Struktur-Folder/","title":"33 Struktur Folder","text":""},{"location":"PHP/04-best-practices/34-Validasi-Sanitasi/","title":"34 Validasi Sanitasi","text":""},{"location":"PHP/04-best-practices/35-Keamanan/","title":"35 Keamanan","text":""},{"location":"PHP/04-best-practices/36-Password-Hashing/","title":"36 Password Hashing","text":""},{"location":"PHP/04-best-practices/37-Env-File/","title":"37 Env File","text":""},{"location":"PHP/04-best-practices/38-Code-Style/","title":"38 Code Style","text":""},{"location":"PHP/04-best-practices/39-Unit-Testing/","title":"39 Unit Testing","text":""},{"location":"PHP/04-best-practices/40-Logging-Debugging/","title":"40 Logging Debugging","text":""},{"location":"PHP/05-mini-proyek/41-Login-Sederhana/","title":"41 Login Sederhana","text":""},{"location":"PHP/05-mini-proyek/42-CRUD-Mahasiswa/","title":"42 CRUD Mahasiswa","text":""},{"location":"PHP/05-mini-proyek/43-Sistem-Voting/","title":"43 Sistem Voting","text":""},{"location":"PHP/05-mini-proyek/44-Galeri-Foto/","title":"44 Galeri Foto","text":""},{"location":"PHP/05-mini-proyek/45-Catatan-Harian/","title":"45 Catatan Harian","text":""},{"location":"PHP/05-mini-proyek/46-Pemesanan-Tiket/","title":"46 Pemesanan Tiket","text":""},{"location":"PHP/05-mini-proyek/47-Blog-Sederhana/","title":"47 Blog Sederhana","text":""},{"location":"PHP/05-mini-proyek/48-REST-API-Mobile/","title":"48 REST API Mobile","text":""},{"location":"belajar-java/","title":"\ud83d\udcd8 Belajar Java dari Nol","text":"<p>Selamat datang di dokumentasi Belajar Java dari Nol! Dokumentasi ini dirancang buat kamu yang pengen belajar bahasa pemrograman Java dari dasar sampai siap bikin aplikasi sendiri \u2014 entah itu CLI, desktop, sampai Android.</p>"},{"location":"belajar-java/#apa-yang-akan-kamu-pelajari","title":"\ud83d\ude80 Apa yang Akan Kamu Pelajari?","text":"<ul> <li>Dasar-dasar Java</li> <li>Struktur kode dan sintaks</li> <li>Konsep Object-Oriented Programming (OOP)</li> <li>Penggunaan koleksi (List, Map, dll.)</li> <li>Penanganan error (Exception)</li> <li>Bekerja dengan file</li> <li>GUI dengan Swing</li> <li>Dasar-dasar pengembangan aplikasi Android dengan Java</li> <li>Mini proyek yang bisa langsung kamu coba</li> </ul>"},{"location":"belajar-java/#tools-yang-disarankan","title":"\ud83e\uddf0 Tools yang Disarankan","text":"<ul> <li>IDE: IntelliJ IDEA / VS Code / Eclipse</li> <li>Java Version: Java 8 atau di atasnya</li> <li>Build Tool (opsional): Maven atau Gradle</li> </ul>"},{"location":"belajar-java/#daftar-isi","title":"\ud83d\uddfa\ufe0f Daftar Isi","text":"<ol> <li>Pengenalan Java</li> <li>Variabel &amp; Tipe Data</li> <li>Kondisi &amp; Perulangan</li> <li>Array &amp; String</li> <li>Method &amp; Function</li> <li>OOP dalam Java</li> <li>Exception Handling</li> <li>Collection Framework</li> <li>File Handling</li> <li>GUI dengan Swing</li> <li>Mini Project</li> <li>Java Android Dasar</li> </ol> <p>\ud83d\udcda Yuk mulai dari Bab 1 - Pengenalan Java !</p>"},{"location":"belajar-java/01-Pengenalan-Java/","title":"01. Pengenalan Java","text":""},{"location":"belajar-java/01-Pengenalan-Java/#apa-itu-java","title":"\ud83e\udde0 Apa itu Java?","text":"<p>Java adalah bahasa pemrograman yang dikembangkan oleh Sun Microsystems dan dirilis pada tahun 1995. Sekarang, Java dimiliki oleh Oracle. Java termasuk ke dalam bahasa pemrograman yang bersifat object-oriented, stabil, dan banyak digunakan di berbagai platform \u2014 dari desktop, web, hingga mobile (Android).</p>"},{"location":"belajar-java/01-Pengenalan-Java/#kenapa-harus-belajar-java","title":"\u26a1 Kenapa Harus Belajar Java?","text":"<ul> <li>\u2705 Bahasa OOP yang kuat (Class, Object, Inheritance, Polymorphism, dll.)</li> <li>\ud83d\udd01 Cross-platform: Write Once, Run Anywhere</li> <li>\ud83e\uddf1 Banyak digunakan di enterprise-level applications</li> <li>\ud83d\udcf1 Bahasa utama untuk pengembangan Android</li> <li>\ud83d\udd10 Aman dan memiliki fitur Garbage Collection</li> </ul>"},{"location":"belajar-java/01-Pengenalan-Java/#fitur-fitur-java","title":"\ud83d\udee0\ufe0f Fitur-Fitur Java","text":"Fitur Penjelasan Platform Independent Bisa dijalankan di OS manapun asal ada JVM (Java Virtual Machine) Object-Oriented Semuanya berorientasi pada objek dan class Robust &amp; Secure Penanganan error (exception), memory management yang aman Multithreaded Bisa menjalankan banyak thread/program secara paralel High Performance Meski bukan secepat C++, tapi cukup optimal dengan JIT Compiler"},{"location":"belajar-java/01-Pengenalan-Java/#program-pertamamu-hello-world","title":"\ud83d\udc4b Program Pertamamu: Hello World","text":"<pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n</code></pre>"},{"location":"belajar-java/01-Pengenalan-Java/#penjelasan","title":"\ud83d\udcac Penjelasan:","text":"<ul> <li><code>public class HelloWorld</code> \u2192 Nama class harus sama dengan nama file (<code>HelloWorld.java</code>)</li> <li><code>public static void main</code> \u2192 Method utama yang akan dieksekusi pertama kali</li> <li><code>System.out.println()</code> \u2192 Cetak teks ke layar</li> </ul>"},{"location":"belajar-java/01-Pengenalan-Java/#tipe-bahasa-java","title":"\ud83d\udd0d Tipe Bahasa Java","text":"<ul> <li>Compiled &amp; Interpreted: Kode Java dikompilasi ke bytecode, lalu dijalankan oleh JVM.</li> <li>Statis &amp; Strong Typing: Harus deklarasi tipe data, dan tipe harus konsisten.</li> <li>Versatile: Cocok buat backend, game, desktop, dan mobile apps.</li> </ul>"},{"location":"belajar-java/01-Pengenalan-Java/#instalasi-java-singkat","title":"\ud83d\udce6 Instalasi Java (Singkat)","text":"<ol> <li>Download Java JDK</li> <li>Install dan atur JAVA_HOME di environment variables</li> <li>Cek lewat terminal:</li> </ol> <pre><code>java -version\n</code></pre> <p>Next \ud83d\udc49 02. Variabel &amp; Tipe Data</p>"},{"location":"belajar-java/02-Instalasi-dan-Setup-Java/","title":"02. Instalasi dan Setup Java","text":"<p>Sebelum ngetik kode Java pertamamu, pastikan Java Development Kit (JDK) sudah terinstal di komputermu. Tanpa JDK, kita ibarat mau masak mie tapi gak punya kompor \ud83e\udd37\u200d\u2642\ufe0f.</p>"},{"location":"belajar-java/02-Instalasi-dan-Setup-Java/#langkah-1-download-jdk","title":"\ud83d\udd3d Langkah 1: Download JDK","text":"<ol> <li>Kunjungi https://www.oracle.com/java/technologies/javase-downloads.html</li> <li>Pilih versi terbaru dari Java SE Development Kit</li> <li>Download sesuai sistem operasi kamu (Windows / macOS / Linux)</li> <li>Ikuti wizard instalasi sampai selesai</li> </ol>"},{"location":"belajar-java/02-Instalasi-dan-Setup-Java/#langkah-2-setting-environment-variables-windows","title":"\u2699\ufe0f Langkah 2: Setting Environment Variables (Windows)","text":"<p>Agar kamu bisa pakai perintah <code>java</code> dan <code>javac</code> dari mana aja di terminal.</p> <ol> <li>Buka Control Panel &gt; System &gt; Advanced system settings</li> <li>Klik tombol Environment Variables</li> <li>Tambahkan:</li> <li>JAVA_HOME \u2192 arahkan ke folder JDK, contoh: <code>C:\\Program Files\\Java\\jdk-21</code></li> <li>Edit <code>Path</code> \u2192 Tambahkan <code>%JAVA_HOME%\\bin</code></li> </ol>"},{"location":"belajar-java/02-Instalasi-dan-Setup-Java/#cek-di-terminal-command-prompt","title":"\ud83d\udd0d Cek di Terminal (Command Prompt)","text":"<pre><code>java -version\njavac -version\n</code></pre> <p>Kalau berhasil, harusnya muncul versi JDK kamu. Misalnya:</p> <pre><code>java version \"21.0.1\" 2023-10-17\njavac 21.0.1\n</code></pre>"},{"location":"belajar-java/02-Instalasi-dan-Setup-Java/#ide-rekomendasi","title":"\ud83d\udee0\ufe0f IDE Rekomendasi","text":"<p>Gunakan salah satu editor/IDE berikut untuk nulis dan ngejalanin kode Java kamu:</p> IDE Kelebihan IntelliJ IDEA Fitur lengkap, pintar banget, auto-suggest mantap Eclipse Gratis dan open source VS Code Ringan, butuh plugin Java tambahan NetBeans Sudah include GUI builder, cocok buat pemula"},{"location":"belajar-java/02-Instalasi-dan-Setup-Java/#testing-program-pertama","title":"\ud83d\udcbb Testing Program Pertama","text":"<p>Buat file <code>HelloWorld.java</code>:</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Halo dunia, ini Java!\");\n    }\n}\n</code></pre>"},{"location":"belajar-java/02-Instalasi-dan-Setup-Java/#compile-dan-jalankan-via-terminal","title":"\ud83d\udd27 Compile dan Jalankan (via Terminal)","text":"<pre><code>javac HelloWorld.java\njava HelloWorld\n</code></pre> <p>Output:</p> <pre><code>Halo dunia, ini Java!\n</code></pre>"},{"location":"belajar-java/02-Instalasi-dan-Setup-Java/#troubleshooting-umum","title":"\u2757 Troubleshooting Umum","text":"Masalah Solusi <code>'javac' is not recognized</code> Path JDK belum diset, cek <code>JAVA_HOME</code> dan <code>Path</code> Error saat compile Cek syntax, nama file harus sama dengan nama class Output nggak muncul Pastikan <code>System.out.println()</code> kamu bener <p>Next \ud83d\udc49 03. Variabel &amp; Tipe Data</p>"},{"location":"belajar-java/03-Program-Pertama-di-Java/","title":"03. Program Pertama di Java","text":"<p>Saatnya kita ngetik baris kode pertamamu! Di bab ini, kita bakal bikin program klasik: Hello, World! Tapi jangan salah, dari program simpel ini, kamu bakal paham struktur dasar program Java.</p>"},{"location":"belajar-java/03-Program-Pertama-di-Java/#struktur-dasar-program-java","title":"\ud83e\uddfe Struktur Dasar Program Java","text":"<pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n</code></pre>"},{"location":"belajar-java/03-Program-Pertama-di-Java/#penjelasan-baris-per-baris","title":"\ud83e\udde9 Penjelasan Baris per Baris","text":"Baris Kode Penjelasan <code>public class HelloWorld</code> Deklarasi class dengan nama <code>HelloWorld</code>. Harus sama dengan nama file. <code>{</code> Tanda buka blok kode (harus ada pasangannya!) <code>public static void main(...)</code> Method utama yang akan dieksekusi pertama kali oleh JVM. <code>System.out.println(\"...\")</code> Perintah untuk mencetak teks ke layar. <code>}</code> Tanda tutup blok. Jangan lupa ya, ini bukan sekadar estetika \ud83d\ude05"},{"location":"belajar-java/03-Program-Pertama-di-Java/#compile-dan-jalankan-program","title":"\ud83d\udd28 Compile dan Jalankan Program","text":""},{"location":"belajar-java/03-Program-Pertama-di-Java/#simpan-file","title":"\ud83d\udcc1 Simpan File","text":"<p>Simpan file dengan nama HelloWorld.java (case-sensitive!)</p>"},{"location":"belajar-java/03-Program-Pertama-di-Java/#compile-dengan-javac","title":"\ud83e\udde0 Compile dengan <code>javac</code>","text":"<pre><code>javac HelloWorld.java\n</code></pre> <p>Jika sukses, akan terbentuk file <code>HelloWorld.class</code> (bytecode).</p>"},{"location":"belajar-java/03-Program-Pertama-di-Java/#jalankan-dengan-java","title":"\u25b6\ufe0f Jalankan dengan <code>java</code>","text":"<pre><code>java HelloWorld\n</code></pre> <p>Output:</p> <pre><code>Hello, World!\n</code></pre>"},{"location":"belajar-java/03-Program-Pertama-di-Java/#file-class-dan-bytecode","title":"\ud83d\uddc3\ufe0f File Class dan Bytecode","text":"<p>Setelah di-compile, file <code>.java</code> kamu akan berubah jadi <code>.class</code> yang berisi bytecode.</p> <p>\ud83e\udde0 JVM (Java Virtual Machine) akan membaca bytecode ini dan menjalankannya sesuai sistem operasi kamu. Makanya Java bisa jalan di mana aja: Write Once, Run Anywhere \ud83d\ude80</p>"},{"location":"belajar-java/03-Program-Pertama-di-Java/#coba-sendiri-cetak-nama-kamu","title":"\ud83d\udc47 Coba Sendiri: Cetak Nama Kamu","text":"<p>Ubah program jadi kayak gini:</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Halo, nama saya Budi!\");\n    }\n}\n</code></pre> <p>Compile lagi dan jalankan. Ganti <code>\"Budi\"</code> dengan nama kamu. Biar makin bonding sama Java-nya \ud83d\ude04</p>"},{"location":"belajar-java/03-Program-Pertama-di-Java/#catatan","title":"\ud83d\udca1 Catatan:","text":"<ul> <li>Java itu case-sensitive, jadi <code>Main</code> beda dengan <code>main</code>.</li> <li>Nama file harus sama dengan nama class utama (yang punya <code>main</code> method).</li> <li>Setiap statement di Java harus diakhiri dengan titik koma (<code>;</code>).</li> </ul> <p>Next \ud83d\udc49 04. Variabel &amp; Tipe Data</p>"},{"location":"belajar-java/04-Struktur-Dasar-Program-Java/","title":"04. Struktur Dasar Program Java","text":"<p>Di Java, setiap program punya struktur tertentu yang harus diikuti biar bisa dikompilasi dan dijalankan. Anggap aja kayak fondasi rumah \u2014 kalau fondasinya kacau, rumahnya roboh. Nah, sama juga dengan program Java.</p>"},{"location":"belajar-java/04-Struktur-Dasar-Program-Java/#komponen-dasar-program-java","title":"\ud83c\udfd7\ufe0f Komponen Dasar Program Java","text":"<p>Berikut adalah struktur umum dari program Java:</p> <pre><code>// Ini komentar\npublic class NamaClass {\n\n    // Method utama\n    public static void main(String[] args) {\n        // Statement/kode program di sini\n        System.out.println(\"Halo Java!\");\n    }\n}\n</code></pre>"},{"location":"belajar-java/04-Struktur-Dasar-Program-Java/#penjelasan-struktur","title":"\ud83d\udd0d Penjelasan Struktur","text":"Bagian Fungsi <code>// komentar</code> Baris komentar, tidak dijalankan oleh program <code>public class NamaClass</code> Deklarasi class, wajib sama dengan nama file (case-sensitive) <code>{ ... }</code> Menandai blok kode (awalan dan akhiran) <code>public static void main(...)</code> Method utama yang akan dijalankan oleh JVM <code>String[] args</code> Parameter untuk input via command line <code>System.out.println(...)</code> Menampilkan output ke layar"},{"location":"belajar-java/04-Struktur-Dasar-Program-Java/#ingat","title":"\ud83e\udde0 Ingat!","text":"<ul> <li>Nama file harus sama persis dengan nama class (misalnya <code>HelloWorld.java</code>).</li> <li>Java bersifat case-sensitive \u2192 <code>Main</code> beda dengan <code>main</code>.</li> <li>Setiap statement diakhiri titik koma (;).</li> <li>Semua kode Java harus ada dalam class \u2014 nggak ada yang \"kode bebas\" di luar class seperti di Python.</li> </ul>"},{"location":"belajar-java/04-Struktur-Dasar-Program-Java/#contoh-program-komplet","title":"\ud83d\udee0\ufe0f Contoh Program Komplet","text":"<pre><code>public class SelamatDatang {\n    public static void main(String[] args) {\n        System.out.println(\"Selamat datang di dunia Java!\");\n        System.out.println(\"Belajar bareng yuk!\");\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>Selamat datang di dunia Java!\nBelajar bareng yuk!\n</code></pre>"},{"location":"belajar-java/04-Struktur-Dasar-Program-Java/#tujuan-struktur-yang-kaku","title":"\ud83c\udfaf Tujuan Struktur yang Kaku","text":"<p>Mungkin kamu mikir, \u201cKenapa harus ribet banget, sih?\u201d Nah, struktur ini bikin Java jadi:</p> <ul> <li>Lebih terorganisir</li> <li>Lebih mudah dirawat di project besar</li> <li>Lebih aman (terkontrol dengan OOP)</li> </ul>"},{"location":"belajar-java/04-Struktur-Dasar-Program-Java/#tips-buat-pemula","title":"\ud83c\udf92 Tips Buat Pemula","text":"<ul> <li>Gunakan indentasi dan konsistensi penulisan biar kodenya gampang dibaca.</li> <li>Latihan terus bikin program kecil dengan struktur lengkap.</li> <li>Jangan takut error \u2014 error adalah sahabat programmer sejati \ud83d\ude0e</li> </ul> <p>Next \ud83d\udc49 05. Variabel dan Tipe Data</p>"},{"location":"belajar-java/05-Tipe-Data-dan-Variabel/","title":"05. Tipe Data dan Variabel","text":"<p>Variabel itu kayak wadah. Kamu bisa nyimpen data di situ, dan bisa dipakai lagi nanti. Tapi... gak semua wadah cocok buat semua benda. Makanya, di Java kita punya berbagai tipe data.</p>"},{"location":"belajar-java/05-Tipe-Data-dan-Variabel/#apa-itu-variabel","title":"\ud83e\uddea Apa Itu Variabel?","text":"<p>Variabel adalah tempat untuk menyimpan data yang bisa digunakan dalam program.</p> <pre><code>int umur = 20;\n</code></pre> <p>Penjelasan: - <code>int</code> \u2192 tipe data (bilangan bulat) - <code>umur</code> \u2192 nama variabel - <code>20</code> \u2192 nilai yang disimpan</p>"},{"location":"belajar-java/05-Tipe-Data-dan-Variabel/#aturan-penamaan-variabel","title":"\ud83c\udfaf Aturan Penamaan Variabel","text":"<ul> <li>Harus dimulai dengan huruf (tidak boleh angka di depan)</li> <li>Tidak boleh pakai spasi atau karakter aneh (gunakan underscore <code>_</code> atau camelCase)</li> <li>Tidak boleh pakai keyword Java (kayak <code>class</code>, <code>public</code>, dll)</li> <li>Case-sensitive (<code>umur</code> beda dengan <code>Umur</code>)</li> </ul>"},{"location":"belajar-java/05-Tipe-Data-dan-Variabel/#tipe-data-primitif-di-java","title":"\ud83e\uddf0 Tipe Data Primitif di Java","text":"Tipe Data Contoh Nilai Deskripsi <code>int</code> 1, 100, -5 Bilangan bulat <code>double</code> 3.14, -0.001 Bilangan desimal (pecahan) <code>char</code> 'A', 'z', '1' Satu karakter (pakai tanda petik tunggal) <code>boolean</code> <code>true</code>, <code>false</code> Logika benar/salah <code>float</code> 3.14f Bilangan pecahan ukuran kecil <code>long</code> 123456789L Bilangan bulat besar <code>byte</code> 127, -128 Bilangan kecil (-128 s/d 127) <code>short</code> 32000 Bilangan bulat ukuran menengah"},{"location":"belajar-java/05-Tipe-Data-dan-Variabel/#contoh-penggunaan","title":"\ud83e\uddea Contoh Penggunaan","text":"<pre><code>public class ContohVariabel {\n    public static void main(String[] args) {\n        int umur = 25;\n        double tinggi = 172.5;\n        char golonganDarah = 'O';\n        boolean sudahMenikah = false;\n\n        System.out.println(\"Umur: \" + umur);\n        System.out.println(\"Tinggi: \" + tinggi);\n        System.out.println(\"Golongan Darah: \" + golonganDarah);\n        System.out.println(\"Status Menikah: \" + sudahMenikah);\n    }\n}\n</code></pre>"},{"location":"belajar-java/05-Tipe-Data-dan-Variabel/#tipe-data-referensi","title":"\ud83e\udde0 Tipe Data Referensi","text":"<p>Selain tipe primitif, Java juga punya tipe data referensi, contohnya:</p> <ul> <li><code>String</code> \u2192 untuk teks</li> <li><code>Array</code>, <code>Class</code>, <code>Object</code> \u2192 data yang lebih kompleks</li> </ul> <p>Contoh:</p> <pre><code>String nama = \"Marno\";\n</code></pre>"},{"location":"belajar-java/05-Tipe-Data-dan-Variabel/#deklarasi-dan-inisialisasi","title":"\ud83d\udd01 Deklarasi dan Inisialisasi","text":"<p>Deklarasi aja:</p> <pre><code>int umur;\n</code></pre> <p>Deklarasi + inisialisasi:</p> <pre><code>int umur = 20;\n</code></pre>"},{"location":"belajar-java/05-Tipe-Data-dan-Variabel/#error-umum","title":"\ud83d\udeab Error Umum","text":"Kesalahan Solusi <code>cannot find symbol</code> Variabel belum dideklarasikan <code>possible loss of precision</code> Assign tipe besar ke tipe kecil tanpa casting <code>incompatible types</code> Tipe data tidak cocok"},{"location":"belajar-java/05-Tipe-Data-dan-Variabel/#tips-pro","title":"\ud83e\uddd9 Tips Pro","text":"<ul> <li>Gunakan nama variabel yang deskriptif</li> <li>Untuk pecahan, default-nya <code>double</code>, kalau mau <code>float</code> tambahkan <code>f</code> di akhir (contoh: <code>3.14f</code>)</li> <li><code>String</code> bukan tipe primitif, tapi sering banget dipakai</li> </ul> <p>Next \ud83d\udc49 06. Operator di Java</p>"},{"location":"belajar-java/06-Operator-di-Java/","title":"06. Operator di Java","text":"<p>Operator adalah simbol atau karakter spesial yang digunakan untuk melakukan operasi pada variabel dan nilai. Java punya banyak jenis operator yang siap dipakai buat segala kondisi\u2014dari hitung-hitungan sampai logika super ribet.</p>"},{"location":"belajar-java/06-Operator-di-Java/#operator-aritmatika","title":"\u2795 Operator Aritmatika","text":"Operator Fungsi Contoh <code>+</code> Penjumlahan <code>a + b</code> <code>-</code> Pengurangan <code>a - b</code> <code>*</code> Perkalian <code>a * b</code> <code>/</code> Pembagian <code>a / b</code> <code>%</code> Modulus (sisa) <code>a % b</code> <p>\ud83e\udde0 Catatan: Kalau kamu bagi <code>int</code> dengan <code>int</code>, hasilnya juga <code>int</code> (dibulatkan ke bawah).</p>"},{"location":"belajar-java/06-Operator-di-Java/#contoh-aritmatika","title":"\ud83e\uddee Contoh Aritmatika","text":"<pre><code>int a = 10, b = 3;\nSystem.out.println(a + b);  // 13\nSystem.out.println(a - b);  // 7\nSystem.out.println(a * b);  // 30\nSystem.out.println(a / b);  // 3\nSystem.out.println(a % b);  // 1\n</code></pre>"},{"location":"belajar-java/06-Operator-di-Java/#operator-penugasan-assignment","title":"\ud83d\udd01 Operator Penugasan (Assignment)","text":"Operator Fungsi Contoh <code>=</code> Menetapkan nilai <code>a = 5</code> <code>+=</code> Tambah lalu assign <code>a += 2</code> \u21d2 <code>a = a + 2</code> <code>-=</code> Kurang lalu assign <code>a -= 2</code> <code>*=</code> Kali lalu assign <code>a *= 2</code> <code>/=</code> Bagi lalu assign <code>a /= 2</code> <code>%=</code> Mod lalu assign <code>a %= 2</code>"},{"location":"belajar-java/06-Operator-di-Java/#operator-perbandingan-relasional","title":"\ud83d\udd0d Operator Perbandingan (Relasional)","text":"Operator Fungsi Contoh <code>==</code> Sama dengan <code>a == b</code> <code>!=</code> Tidak sama dengan <code>a != b</code> <code>&gt;</code> Lebih besar <code>a &gt; b</code> <code>&lt;</code> Lebih kecil <code>a &lt; b</code> <code>&gt;=</code> Lebih besar atau sama <code>a &gt;= b</code> <code>&lt;=</code> Lebih kecil atau sama <code>a &lt;= b</code> <p>Hasil dari operator ini selalu <code>boolean</code> (true atau false).</p>"},{"location":"belajar-java/06-Operator-di-Java/#operator-logika","title":"\ud83d\udd17 Operator Logika","text":"Operator Nama Contoh <code>&amp;&amp;</code> AND <code>a &gt; 5 &amp;&amp; b &lt; 10</code> <code>||</code> OR <code>a &gt; 5 || b &lt; 10</code> <code>!</code> NOT <code>!(a &gt; 5)</code>"},{"location":"belajar-java/06-Operator-di-Java/#contoh-penggunaan-logika","title":"\ud83e\udde0 Contoh Penggunaan Logika","text":"<pre><code>int umur = 20;\nboolean punyaSIM = true;\n\nif (umur &gt;= 17 &amp;&amp; punyaSIM) {\n    System.out.println(\"Boleh nyetir\");\n} else {\n    System.out.println(\"Belum boleh nyetir\");\n}\n</code></pre>"},{"location":"belajar-java/06-Operator-di-Java/#operator-unary","title":"\ud83e\uddd9 Operator Unary","text":"Operator Fungsi Contoh <code>+</code> Nilai positif <code>+a</code> <code>-</code> Nilai negatif <code>-a</code> <code>++</code> Increment (naik 1) <code>a++</code> / <code>++a</code> <code>--</code> Decrement (turun 1) <code>a--</code> / <code>--a</code>"},{"location":"belajar-java/06-Operator-di-Java/#operator-ternary-cepat-ringkas","title":"\ud83d\udd25 Operator Ternary (Cepat &amp; Ringkas)","text":"<pre><code>String hasil = (nilai &gt;= 75) ? \"Lulus\" : \"Remedial\";\n</code></pre> <p>Artinya: kalau <code>nilai &gt;= 75</code>, maka <code>hasil</code> = <code>\"Lulus\"</code>, selain itu <code>\"Remedial\"</code>.</p>"},{"location":"belajar-java/06-Operator-di-Java/#operator-instanceof","title":"\ud83d\udc40 Operator instanceof","text":"<p>Cek apakah sebuah objek adalah instance dari class tertentu.</p> <pre><code>if (objek instanceof String) {\n    System.out.println(\"Ini adalah String\");\n}\n</code></pre>"},{"location":"belajar-java/06-Operator-di-Java/#tips-cepat","title":"\ud83d\udca1 Tips Cepat","text":"<ul> <li>Gunakan <code>==</code> untuk angka, <code>equals()</code> untuk membandingkan String.</li> <li>Gunakan <code>++</code> dengan hati-hati \u2014 bisa beda antara <code>++a</code> dan <code>a++</code>.</li> </ul> <p>Next \ud83d\udc49 07. Percabangan (if, else, switch)</p>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/","title":"07. Percabangan (if, else, switch)","text":"<p>Percabangan itu kayak simpang jalan: kalau kondisi tertentu terpenuhi, program bisa belok ke arah yang sesuai. Di Java, kita punya beberapa cara buat ngatur alur ini:</p>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/#if-statement","title":"\ud83e\udde0 if Statement","text":"<p>Paling dasar dan paling sering dipakai.</p> <pre><code>if (kondisi) {\n    // kode jika kondisi true\n}\n</code></pre>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/#contoh","title":"Contoh:","text":"<pre><code>int umur = 20;\n\nif (umur &gt;= 17) {\n    System.out.println(\"Kamu boleh buat SIM.\");\n}\n</code></pre>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/#if-else","title":"\ud83d\udd01 if - else","text":"<pre><code>if (kondisi) {\n    // kode jika true\n} else {\n    // kode jika false\n}\n</code></pre>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/#contoh_1","title":"Contoh:","text":"<pre><code>int nilai = 65;\n\nif (nilai &gt;= 75) {\n    System.out.println(\"Lulus\");\n} else {\n    System.out.println(\"Remedial\");\n}\n</code></pre>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/#if-else-if-else","title":"\ud83d\udd01 if - else if - else","text":"<p>Untuk lebih dari dua kemungkinan.</p> <pre><code>if (nilai &gt;= 90) {\n    System.out.println(\"A\");\n} else if (nilai &gt;= 80) {\n    System.out.println(\"B\");\n} else if (nilai &gt;= 70) {\n    System.out.println(\"C\");\n} else {\n    System.out.println(\"D\");\n}\n</code></pre>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/#switch-statement","title":"\ud83c\udf00 switch Statement","text":"<p>Alternatif dari if-else bertingkat, terutama saat membandingkan nilai yang tetap (konstanta).</p> <pre><code>switch (ekspresi) {\n    case nilai1:\n        // kode\n        break;\n    case nilai2:\n        // kode\n        break;\n    default:\n        // kode jika tidak ada yang cocok\n}\n</code></pre>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/#contoh_2","title":"Contoh:","text":"<pre><code>int hari = 3;\nswitch (hari) {\n    case 1:\n        System.out.println(\"Senin\");\n        break;\n    case 2:\n        System.out.println(\"Selasa\");\n        break;\n    case 3:\n        System.out.println(\"Rabu\");\n        break;\n    default:\n        System.out.println(\"Hari tidak diketahui\");\n}\n</code></pre>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/#penting-break-di-switch","title":"\u26a0\ufe0f Penting: <code>break</code> di switch","text":"<ul> <li>Tanpa <code>break</code>, program akan lanjut ke semua case di bawahnya.  </li> <li><code>break</code> menghentikan eksekusi switch setelah case cocok.</li> </ul>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/#tips-logika-percabangan","title":"\ud83e\uddd9 Tips Logika Percabangan","text":"Kasus Solusi Ideal Banyak kondisi kompleks Gunakan if - else if Nilai konstan/eksak Gunakan switch Kondisi boolean if/else langsung aja Kondisi pendek Ternary Operator <code>? :</code>"},{"location":"belajar-java/07-Percabangan-if%2C-switch/#ternary-operator-sekali-lagi","title":"\ud83d\udd25 Ternary Operator (Sekali lagi)","text":"<pre><code>String hasil = (nilai &gt;= 75) ? \"Lulus\" : \"Remedial\";\n</code></pre> <p>Next \ud83d\udc49 08. Perulangan (for, while, do-while)</p>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/","title":"08. Perulangan (for, while, do-while)","text":"<p>Perulangan (looping) adalah struktur kontrol yang digunakan untuk mengulang blok kode selama kondisi tertentu terpenuhi. Di Java, kita punya 3 jenis utama:</p>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#1-for-loop","title":"\ud83d\udd01 1. for Loop","text":"<p>Cocok kalau kita tahu berapa kali mau ngulang.</p> <pre><code>for (inisialisasi; kondisi; update) {\n    // kode yang diulang\n}\n</code></pre>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#contoh","title":"Contoh:","text":"<pre><code>for (int i = 1; i &lt;= 5; i++) {\n    System.out.println(\"Perulangan ke-\" + i);\n}\n</code></pre>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#2-while-loop","title":"\ud83d\udd01 2. while Loop","text":"<p>Dipakai kalau kita belum tahu pasti berapa kali perulangan, tapi tergantung kondisi.</p> <pre><code>while (kondisi) {\n    // kode yang diulang\n}\n</code></pre>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#contoh_1","title":"Contoh:","text":"<pre><code>int i = 1;\nwhile (i &lt;= 5) {\n    System.out.println(\"while ke-\" + i);\n    i++;\n}\n</code></pre>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#3-do-while-loop","title":"\ud83d\udd01 3. do-while Loop","text":"<p>Bedanya, do-while selalu jalan minimal 1 kali karena pengecekan dilakukan setelah eksekusi.</p> <pre><code>do {\n    // kode yang diulang\n} while (kondisi);\n</code></pre>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#contoh_2","title":"Contoh:","text":"<pre><code>int i = 1;\ndo {\n    System.out.println(\"do-while ke-\" + i);\n    i++;\n} while (i &lt;= 5);\n</code></pre>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#break-dan-continue","title":"\ud83d\uded1 break dan continue","text":""},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#break","title":"\ud83d\udd39 break","text":"<p>Digunakan untuk keluar dari perulangan.</p> <pre><code>for (int i = 1; i &lt;= 10; i++) {\n    if (i == 5) break;\n    System.out.println(i);\n}\n</code></pre>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#continue","title":"\ud83d\udd39 continue","text":"<p>Digunakan untuk melewati satu iterasi dan lanjut ke berikutnya.</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) continue;\n    System.out.println(i); // bakal skip angka 3\n}\n</code></pre>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#infinite-loop-loop-gak-berujung","title":"\u2699\ufe0f Infinite Loop (loop gak berujung)","text":"<pre><code>while (true) {\n    System.out.println(\"Loop tanpa akhir\");\n}\n</code></pre> <p>Pastikan kamu kasih <code>break</code> atau kondisi stop biar gak jadi \"forever alone loop\" \ud83d\ude05</p>"},{"location":"belajar-java/08-Perulangan-for%2C-while%2C-do-while/#tips-looping","title":"\ud83e\udde0 Tips Looping","text":"<ul> <li><code>for</code> lebih cocok untuk counter-based loop.</li> <li><code>while</code> untuk kondisi dinamis.</li> <li><code>do-while</code> kalau kamu butuh eksekusi minimal sekali.</li> <li>Jangan lupa <code>break</code> biar gak tersesat di loop abadi!</li> </ul> <p>Next \ud83d\udc49 09. Array dan Penggunaan Dasar</p>"},{"location":"belajar-java/09-Array-di-Java/","title":"09. Array di Java","text":"<p>Array adalah struktur data yang digunakan untuk menyimpan banyak nilai dalam satu variabel. Jadi, daripada punya banyak variabel yang sama, mending pakai array biar lebih rapi dan mudah diakses.</p>"},{"location":"belajar-java/09-Array-di-Java/#apa-itu-array","title":"\ud83e\udde0 Apa Itu Array?","text":"<p>Array itu mirip dengan kotak besar yang bisa menampung banyak barang (data) yang sejenis. Setiap barang itu punya nomor urut (indeks) yang dimulai dari 0. Misalnya, kamu punya array <code>angka</code> yang bisa menampung nilai 5 angka.</p>"},{"location":"belajar-java/09-Array-di-Java/#deklarasi-array","title":"\ud83d\udd27 Deklarasi Array","text":"<p>Di Java, untuk deklarasi array, kamu bisa pakai sintaks ini:</p> <pre><code>tipeData[] namaArray;\n</code></pre> <p>Contoh:</p> <pre><code>int[] angka;\nString[] nama;\n</code></pre> <p>Setelah deklarasi, kamu harus menginisialisasi array dengan menentukan ukuran atau nilai awalnya:</p> <pre><code>angka = new int[5];  // array dengan 5 elemen\n</code></pre> <p>Atau langsung saat deklarasi:</p> <pre><code>int[] angka = {10, 20, 30, 40, 50};\n</code></pre>"},{"location":"belajar-java/09-Array-di-Java/#mengakses-elemen-array","title":"\ud83d\udcd0 Mengakses Elemen Array","text":"<p>Elemen array diakses menggunakan indeks (dimulai dari 0).</p> <pre><code>int[] angka = {10, 20, 30, 40, 50};\n\nSystem.out.println(angka[0]);  // Output: 10\nSystem.out.println(angka[2]);  // Output: 30\n</code></pre>"},{"location":"belajar-java/09-Array-di-Java/#menyusun-array-length-dan-looping","title":"\ud83d\udd04 Menyusun Array (Length dan Looping)","text":""},{"location":"belajar-java/09-Array-di-Java/#1-panjang-array-length","title":"1. Panjang Array (Length)","text":"<p>Untuk mengetahui panjang array, kamu bisa menggunakan <code>array.length</code>:</p> <pre><code>int[] angka = {10, 20, 30};\nSystem.out.println(angka.length);  // Output: 3\n</code></pre>"},{"location":"belajar-java/09-Array-di-Java/#2-looping-array","title":"2. Looping Array","text":"<p>Looping atau perulangan array sering dipakai untuk mengakses seluruh elemen.</p> <pre><code>int[] angka = {10, 20, 30, 40, 50};\nfor (int i = 0; i &lt; angka.length; i++) {\n    System.out.println(angka[i]);\n}\n</code></pre> <p>Atau bisa juga pakai enhanced for loop:</p> <pre><code>for (int num : angka) {\n    System.out.println(num);\n}\n</code></pre>"},{"location":"belajar-java/09-Array-di-Java/#multi-dimensional-array","title":"\ud83c\udfd7\ufe0f Multi-Dimensional Array","text":"<p>Array 2D atau lebih sering digunakan untuk menyimpan data dalam bentuk tabel.</p> <pre><code>int[][] matrix = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n};\n\nSystem.out.println(matrix[0][0]);  // Output: 1\nSystem.out.println(matrix[2][1]);  // Output: 8\n</code></pre>"},{"location":"belajar-java/09-Array-di-Java/#array-di-java-tidak-bisa-dinamis","title":"\u26a0\ufe0f Array di Java Tidak Bisa Dinamis","text":"<p>Setelah array dibuat, ukurannya tidak bisa berubah. Kalau kamu perlu ukuran yang dinamis, coba pakai ArrayList.</p>"},{"location":"belajar-java/09-Array-di-Java/#tips-array","title":"\ud83e\uddd9 Tips Array","text":"<ul> <li>Array itu berbasis indeks, mulai dari 0.</li> <li>Gunakan <code>for</code> atau enhanced <code>for</code> untuk akses elemen dengan lebih mudah.</li> <li>Array tidak bisa diubah ukurannya setelah dibuat. Pakai ArrayList jika butuh ukuran yang fleksibel.</li> <li>Di Java, array objek punya default nilai seperti <code>null</code> untuk objek dan <code>0</code> untuk tipe numerik.</li> </ul> <p>Next \ud83d\udc49 10. String di Java</p>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/","title":"10. String dan Manipulasi String","text":"<p>String adalah tipe data untuk menyimpan teks. Di Java, String adalah objek, bukan tipe data primitif. Dengan kata lain, kamu bisa melakukan berbagai manipulasi teks yang keren!</p>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#apa-itu-string","title":"\ud83e\udde0 Apa Itu String?","text":"<p>String adalah urutan karakter yang dikelompokkan menjadi satu kesatuan. Sebagai contoh:</p> <pre><code>String nama = \"Java\";\n</code></pre>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#membuat-string","title":"\ud83d\udd27 Membuat String","text":"<p>String di Java bisa dibuat dengan dua cara: 1. Literal String (lebih umum):  </p> <pre><code>String greeting = \"Halo, Dunia!\";\n</code></pre> <ol> <li>Menggunakan konstruktor:  </li> </ol> <pre><code>String str = new String(\"Java\");\n</code></pre> <p>Namun, cara pertama lebih sering digunakan karena lebih efisien.</p>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#manipulasi-string","title":"\ud83d\udee0\ufe0f Manipulasi String","text":"<p>Java menyediakan banyak cara untuk memanipulasi string. Berikut beberapa metode umum yang sering digunakan:</p>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#1-length","title":"1. <code>.length()</code>","text":"<p>Untuk mengetahui panjang string.</p> <pre><code>String text = \"Java\";\nSystem.out.println(text.length());  // Output: 4\n</code></pre>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#2-charat","title":"2. <code>.charAt()</code>","text":"<p>Mengambil karakter pada posisi tertentu.</p> <pre><code>String text = \"Java\";\nSystem.out.println(text.charAt(0));  // Output: J\n</code></pre>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#3-substring","title":"3. <code>.substring()</code>","text":"<p>Mengambil bagian dari string.</p> <pre><code>String text = \"Halo, Dunia!\";\nSystem.out.println(text.substring(6));      // Output: Dunia!\nSystem.out.println(text.substring(0, 4));   // Output: Halo\n</code></pre>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#4-touppercase-dan-tolowercase","title":"4. <code>.toUpperCase()</code> dan <code>.toLowerCase()</code>","text":"<p>Mengubah semua huruf menjadi huruf besar atau kecil.</p> <pre><code>String text = \"Java\";\nSystem.out.println(text.toUpperCase());   // Output: JAVA\nSystem.out.println(text.toLowerCase());   // Output: java\n</code></pre>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#5-replace","title":"5. <code>.replace()</code>","text":"<p>Mengganti bagian dari string dengan teks lain.</p> <pre><code>String text = \"Java\";\nSystem.out.println(text.replace(\"a\", \"o\"));   // Output: Jovo\n</code></pre>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#6-trim","title":"6. <code>.trim()</code>","text":"<p>Menghapus spasi di awal dan akhir string.</p> <pre><code>String text = \"  Java  \";\nSystem.out.println(text.trim());   // Output: Java\n</code></pre>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#7-equals-dan-equalsignorecase","title":"7. <code>.equals()</code> dan <code>.equalsIgnoreCase()</code>","text":"<p>Untuk membandingkan dua string.</p> <pre><code>String text1 = \"Java\";\nString text2 = \"java\";\nSystem.out.println(text1.equals(text2));          // Output: false\nSystem.out.println(text1.equalsIgnoreCase(text2)); // Output: true\n</code></pre>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#concatenation-penggabungan-string","title":"\u26a1 Concatenation (Penggabungan String)","text":"<p>Di Java, kamu bisa menggabungkan string menggunakan operator <code>+</code> atau dengan <code>.concat()</code>:</p> <pre><code>String firstName = \"John\";\nString lastName = \"Doe\";\nString fullName = firstName + \" \" + lastName;\nSystem.out.println(fullName);  // Output: John Doe\n</code></pre> <p>Atau menggunakan <code>.concat()</code>:</p> <pre><code>String fullName = firstName.concat(\" \").concat(lastName);\nSystem.out.println(fullName);  // Output: John Doe\n</code></pre>"},{"location":"belajar-java/10-String-dan-Manipulasi-String/#tips-string","title":"\ud83e\uddd9 Tips String","text":"<ul> <li>String bersifat immutable, artinya setelah dibuat, nilai string tidak bisa diubah. Jika kamu mencoba mengubahnya, akan dibuat objek baru.</li> <li>Jika ingin manipulasi string yang sering berubah, gunakan StringBuilder atau StringBuffer karena lebih efisien.</li> <li>Jangan lupa <code>.equals()</code> untuk membandingkan string, bukan <code>==</code> yang hanya membandingkan referensi memori.</li> </ul> <p>Next \ud83d\udc49 11. Fungsi dan Metode di Java</p>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/","title":"11. Konsep OOP (Object-Oriented Programming) di Java","text":"<p>OOP (Object-Oriented Programming) adalah paradigma pemrograman yang berfokus pada objek dan data, alih-alih hanya aksi atau prosedur. Dalam Java, hampir semuanya adalah objek, dan pemahaman OOP akan membantumu menulis kode yang lebih terstruktur dan mudah dikelola.</p>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/#apa-itu-oop","title":"\ud83e\udde0 Apa Itu OOP?","text":"<p>OOP mengorganisir kode menjadi objek-objek yang terdiri dari data (atribut) dan metode (fungsi atau aksi). Ada 4 pilar utama dalam OOP:</p> <ol> <li>Enkapsulasi (Encapsulation)</li> <li>Abstraksi (Abstraction)</li> <li>Pewarisan (Inheritance)</li> <li>Polimorfisme (Polymorphism)</li> </ol>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/#1-enkapsulasi-encapsulation","title":"\ud83d\udd27 1. Enkapsulasi (Encapsulation)","text":"<p>Enkapsulasi adalah konsep menyembunyikan detail implementasi objek dan hanya memberikan akses melalui metode publik. Ini meningkatkan keamanan dan kemudahan pengelolaan data.</p>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/#contoh","title":"Contoh:","text":"<pre><code>public class Mobil {\n    // Atribut private\n    private String warna;\n    private int kecepatan;\n\n    // Konstruktor\n    public Mobil(String warna, int kecepatan) {\n        this.warna = warna;\n        this.kecepatan = kecepatan;\n    }\n\n    // Metode getter\n    public String getWarna() {\n        return warna;\n    }\n\n    // Metode setter\n    public void setWarna(String warna) {\n        this.warna = warna;\n    }\n\n    // Metode untuk akselerasi\n    public void akselerasi() {\n        kecepatan += 10;\n    }\n\n    public int getKecepatan() {\n        return kecepatan;\n    }\n}\n</code></pre> <p>Dalam contoh di atas, atribut <code>warna</code> dan <code>kecepatan</code> di enkapsulasi dan hanya dapat diakses melalui metode getter dan setter.</p>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/#2-abstraksi-abstraction","title":"\ud83d\udd27 2. Abstraksi (Abstraction)","text":"<p>Abstraksi adalah konsep menyembunyikan kompleksitas dan hanya menunjukkan fungsionalitas penting kepada pengguna objek. Di Java, kita bisa menggunakan kelas abstrak atau antarmuka (interface).</p>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/#contoh-kelas-abstrak","title":"Contoh Kelas Abstrak:","text":"<pre><code>abstract class Hewan {\n    // Method abstrak\n    abstract void suara();\n\n    // Method konkret\n    public void tidur() {\n        System.out.println(\"Hewan sedang tidur\");\n    }\n}\n\nclass Anjing extends Hewan {\n    @Override\n    public void suara() {\n        System.out.println(\"Guk Guk\");\n    }\n}\n\nclass Kucing extends Hewan {\n    @Override\n    public void suara() {\n        System.out.println(\"Meow Meow\");\n    }\n}\n</code></pre> <p>Di sini, <code>Hewan</code> adalah kelas abstrak dengan metode <code>suara()</code> yang harus diimplementasikan oleh kelas turunan.</p>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/#3-pewarisan-inheritance","title":"\ud83d\udd27 3. Pewarisan (Inheritance)","text":"<p>Pewarisan adalah kemampuan untuk membuat kelas baru dari kelas yang sudah ada. Kelas baru mewarisi atribut dan metode dari kelas induknya.</p>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/#contoh_1","title":"Contoh:","text":"<pre><code>class Kendaraan {\n    void bergerak() {\n        System.out.println(\"Kendaraan bergerak\");\n    }\n}\n\nclass Mobil extends Kendaraan {\n    void klakson() {\n        System.out.println(\"Klakson mobil berbunyi\");\n    }\n}\n</code></pre> <p>Di sini, <code>Mobil</code> mewarisi metode <code>bergerak()</code> dari kelas <code>Kendaraan</code>.</p>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/#4-polimorfisme-polymorphism","title":"\ud83d\udd27 4. Polimorfisme (Polymorphism)","text":"<p>Polimorfisme memungkinkan objek untuk menggunakan metode yang sama tetapi dengan implementasi yang berbeda.</p>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/#contoh_2","title":"Contoh:","text":"<pre><code>class Hewan {\n    void suara() {\n        System.out.println(\"Suara Hewan\");\n    }\n}\n\nclass Anjing extends Hewan {\n    @Override\n    void suara() {\n        System.out.println(\"Guk Guk\");\n    }\n}\n\nclass Kucing extends Hewan {\n    @Override\n    void suara() {\n        System.out.println(\"Meow Meow\");\n    }\n}\n</code></pre> <p>Dalam hal ini, meskipun objek <code>Hewan</code> bisa memanggil metode <code>suara()</code>, implementasinya berbeda tergantung pada jenis objeknya (<code>Anjing</code> atau <code>Kucing</code>).</p>"},{"location":"belajar-java/11-Konsep-OOP-di-Java/#tips-oop","title":"\ud83e\uddd9 Tips OOP","text":"<ul> <li>Gunakan enkapsulasi untuk melindungi data dan memberikan akses yang terkontrol.</li> <li>Manfaatkan abstraksi untuk menyederhanakan penggunaan objek dengan hanya menampilkan fungsionalitas penting.</li> <li>Pewarisan memudahkan pengelolaan kode yang berulang dan memperkenalkan konsep hierarki objek.</li> <li>Polimorfisme memungkinkan fleksibilitas dalam kode dengan memanfaatkan metode yang dapat bekerja dengan objek berbeda.</li> </ul> <p>Next \ud83d\udc49 12. Kelas dan Objek di Java</p>"},{"location":"belajar-java/12-Class-dan-Object/","title":"12. Class dan Object di Java","text":"<p>Dalam pemrograman berorientasi objek (OOP), kelas adalah blueprint atau cetak biru untuk membuat objek. Objek adalah instance nyata dari kelas yang didefinisikan. Jadi, kelas itu seperti resep, sedangkan objek adalah hidangan yang jadi dari resep itu.</p>"},{"location":"belajar-java/12-Class-dan-Object/#apa-itu-kelas","title":"\ud83e\udde0 Apa Itu Kelas?","text":"<p>Kelas di Java adalah template atau blueprint yang digunakan untuk mendefinisikan atribut (variabel) dan perilaku (metode) yang dimiliki objek.</p>"},{"location":"belajar-java/12-Class-dan-Object/#contoh-kelas","title":"Contoh Kelas:","text":"<pre><code>class Mobil {\n    // Atribut (variabel) dari kelas\n    String merk;\n    String warna;\n    int kecepatan;\n\n    // Metode (fungsi) dari kelas\n    void maju() {\n        System.out.println(merk + \" maju\");\n    }\n\n    void berhenti() {\n        System.out.println(merk + \" berhenti\");\n    }\n}\n</code></pre> <p>Pada contoh di atas, <code>Mobil</code> adalah kelas yang memiliki atribut <code>merk</code>, <code>warna</code>, dan <code>kecepatan</code>, serta metode <code>maju()</code> dan <code>berhenti()</code>.</p>"},{"location":"belajar-java/12-Class-dan-Object/#apa-itu-objek","title":"\ud83d\udd27 Apa Itu Objek?","text":"<p>Objek adalah instance nyata dari kelas. Objek dapat memiliki nilai-nilai tertentu pada atribut dan dapat memanggil metode yang ada dalam kelasnya.</p>"},{"location":"belajar-java/12-Class-dan-Object/#membuat-objek","title":"Membuat Objek:","text":"<p>Untuk membuat objek, kamu menggunakan kata kunci <code>new</code> diikuti dengan konstruktor kelas.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Membuat objek dari kelas Mobil\n        Mobil mobilSaya = new Mobil();\n        mobilSaya.merk = \"Toyota\";\n        mobilSaya.warna = \"Merah\";\n        mobilSaya.kecepatan = 100;\n\n        // Memanggil metode pada objek\n        mobilSaya.maju();\n    }\n}\n</code></pre> <p>Di sini, <code>mobilSaya</code> adalah objek dari kelas <code>Mobil</code>, dan kita memberikan nilai pada atribut serta memanggil metode <code>maju()</code>.</p>"},{"location":"belajar-java/12-Class-dan-Object/#konstruktor-kelas","title":"\ud83d\udd27 Konstruktor Kelas","text":"<p>Konstruktor adalah metode khusus dalam kelas yang digunakan untuk membuat objek dan menginisialisasi nilai awal dari atribut objek.</p>"},{"location":"belajar-java/12-Class-dan-Object/#contoh-konstruktor","title":"Contoh Konstruktor:","text":"<pre><code>class Mobil {\n    String merk;\n    String warna;\n    int kecepatan;\n\n    // Konstruktor\n    Mobil(String merk, String warna, int kecepatan) {\n        this.merk = merk;\n        this.warna = warna;\n        this.kecepatan = kecepatan;\n    }\n\n    void maju() {\n        System.out.println(merk + \" maju\");\n    }\n\n    void berhenti() {\n        System.out.println(merk + \" berhenti\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Membuat objek dengan konstruktor\n        Mobil mobilSaya = new Mobil(\"Toyota\", \"Merah\", 100);\n        mobilSaya.maju();\n    }\n}\n</code></pre> <p>Dengan konstruktor, kamu bisa langsung menginisialisasi objek dengan nilai yang diinginkan saat objek dibuat.</p>"},{"location":"belajar-java/12-Class-dan-Object/#metode-pada-kelas","title":"\ud83d\udd27 Metode pada Kelas","text":"<p>Metode adalah aksi atau perilaku yang dapat dilakukan oleh objek. Misalnya, objek mobil bisa memiliki metode <code>maju()</code>, <code>mundur()</code>, atau <code>berhenti()</code>.</p>"},{"location":"belajar-java/12-Class-dan-Object/#contoh-metode","title":"Contoh Metode:","text":"<pre><code>class Mobil {\n    void maju() {\n        System.out.println(\"Mobil maju\");\n    }\n\n    void mundur() {\n        System.out.println(\"Mobil mundur\");\n    }\n}\n</code></pre> <p>Kamu bisa memanggil metode ini menggunakan objek yang telah dibuat.</p> <pre><code>Mobil mobilSaya = new Mobil();\nmobilSaya.maju(); // Output: Mobil maju\nmobilSaya.mundur(); // Output: Mobil mundur\n</code></pre>"},{"location":"belajar-java/12-Class-dan-Object/#atribut-pada-kelas","title":"\ud83d\udd27 Atribut pada Kelas","text":"<p>Atribut adalah data atau informasi yang dimiliki oleh objek. Atribut dapat berupa berbagai tipe data seperti <code>int</code>, <code>String</code>, atau tipe data lainnya.</p>"},{"location":"belajar-java/12-Class-dan-Object/#contoh-atribut","title":"Contoh Atribut:","text":"<pre><code>class Mobil {\n    String merk;\n    int kecepatan;\n}\n</code></pre> <p>Atribut-atribut tersebut menyimpan informasi tentang objek, misalnya <code>merk</code> dan <code>kecepatan</code> mobil.</p>"},{"location":"belajar-java/12-Class-dan-Object/#tips-kelas-dan-objek","title":"\ud83e\uddd9 Tips Kelas dan Objek","text":"<ul> <li>Kelas adalah template untuk membuat objek, dan objek adalah instance nyata dari kelas tersebut.</li> <li>Gunakan konstruktor untuk menginisialisasi objek dengan nilai tertentu saat objek dibuat.</li> <li>Metode adalah fungsi yang dimiliki oleh objek, dan digunakan untuk melakukan aksi.</li> <li>Encapsulation tetap berlaku di dalam kelas, jadi pastikan atribut yang seharusnya tidak diubah langsung oleh pengguna, diberi akses terbatas (private) dan diakses melalui metode getter dan setter.</li> </ul> <p>Next \ud83d\udc49 13. Method Overloading dan Overriding</p>"},{"location":"belajar-java/13-Package-dan-Import/","title":"Package dan Import","text":"<p>Kita lanjut ke bab 13 tentang Package dan Import. Di Java, package digunakan untuk mengorganisir kelas-kelas agar lebih terstruktur, sedangkan import memungkinkan kita untuk menggunakan kelas-kelas dari package lain.</p> <p>\ud83d\udcc4 Path: <code>D:\\dokumentasi\\dokumentasi-javascript-dari-nol\\docs\\belajar-java\\13-Package-dan-Import.md</code></p>"},{"location":"belajar-java/13-Package-dan-Import/#isi-13-package-dan-importmd","title":"\u270d\ufe0f Isi <code>13-Package-dan-Import.md</code>","text":"<pre><code># 13. Package dan Import di Java\n\nDalam Java, **package** digunakan untuk mengorganisir kelas dan memudahkan pengelolaan kode dalam proyek besar. Sementara itu, **import** memungkinkan kita untuk menggunakan kelas-kelas yang ada di package lain tanpa perlu mendefinisikannya ulang.\n\n---\n\n## \ud83e\udde0 Apa Itu Package?\n\nPackage adalah cara untuk mengelompokkan kelas-kelas Java agar lebih terorganisir. Dengan menggunakan package, kamu dapat menghindari konflik nama kelas, karena kelas dengan nama yang sama bisa berada dalam package yang berbeda.\n\n### Struktur Package:\n\nMisalnya, kita memiliki dua package berbeda:\n\n1. **com.mobil**: Berisi kelas-kelas yang berkaitan dengan mobil.\n2. **com.motor**: Berisi kelas-kelas yang berkaitan dengan motor.\n\n```java\npackage com.mobil;\n\npublic class Mobil {\n    public void maju() {\n        System.out.println(\"Mobil maju\");\n    }\n}\n\npackage com.motor;\n\npublic class Motor {\n    public void maju() {\n        System.out.println(\"Motor maju\");\n    }\n}\n</code></pre>"},{"location":"belajar-java/13-Package-dan-Import/#cara-mendeklarasikan-package","title":"\ud83d\udd27 Cara Mendeklarasikan Package","text":"<p>Untuk mendeklarasikan package di Java, kamu menggunakan kata kunci <code>package</code> di bagian paling atas file Java sebelum mendefinisikan kelas. Misalnya, untuk menyimpan kelas <code>Mobil</code> dalam package <code>com.mobil</code>:</p> <pre><code>package com.mobil;\n\npublic class Mobil {\n    public void maju() {\n        System.out.println(\"Mobil maju\");\n    }\n}\n</code></pre> <p>Dengan mendeklarasikan package, kamu memberi tahu Java di mana letak kelas tersebut, sehingga lebih mudah untuk dikelola dalam proyek besar.</p>"},{"location":"belajar-java/13-Package-dan-Import/#menggunakan-kelas-dari-package-lain-import","title":"\ud83d\udd27 Menggunakan Kelas dari Package Lain (Import)","text":"<p>Jika kamu ingin menggunakan kelas dari package lain, kamu perlu mengimpor kelas tersebut menggunakan kata kunci <code>import</code>.</p>"},{"location":"belajar-java/13-Package-dan-Import/#contoh-penggunaan-import","title":"Contoh Penggunaan <code>import</code>:","text":"<p>Misalnya, kita ingin menggunakan kelas <code>Mobil</code> yang ada di package <code>com.mobil</code> dalam kelas <code>Main</code> yang berada di package lain:</p> <pre><code>import com.mobil.Mobil;\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobilSaya = new Mobil();\n        mobilSaya.maju(); // Output: Mobil maju\n    }\n}\n</code></pre> <p>Dengan menggunakan <code>import</code>, kita dapat mengakses kelas <code>Mobil</code> meskipun berada dalam package yang berbeda.</p>"},{"location":"belajar-java/13-Package-dan-Import/#import-seluruh-kelas-dalam-package","title":"\ud83d\udd27 Import Seluruh Kelas dalam Package","text":"<p>Jika kamu ingin mengimpor seluruh kelas dalam package, kamu bisa menggunakan wildcard <code>*</code> setelah nama package. Ini akan mengimpor semua kelas dalam package tersebut.</p>"},{"location":"belajar-java/13-Package-dan-Import/#contoh-import-semua-kelas-dalam-package","title":"Contoh Import Semua Kelas dalam Package:","text":"<pre><code>import com.mobil.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobilSaya = new Mobil();\n        mobilSaya.maju(); // Output: Mobil maju\n    }\n}\n</code></pre> <p>Dengan <code>import com.mobil.*;</code>, semua kelas dalam package <code>com.mobil</code> akan diimpor, jadi kamu tidak perlu menulis <code>import com.mobil.Mobil;</code> secara eksplisit.</p>"},{"location":"belajar-java/13-Package-dan-Import/#package-standar-di-java","title":"\ud83d\udd27 Package Standar di Java","text":"<p>Java sudah menyediakan banyak package standar yang berisi kelas-kelas umum yang sering digunakan, seperti package <code>java.util</code> untuk koleksi dan utilitas, <code>java.io</code> untuk input/output, dan sebagainya.</p>"},{"location":"belajar-java/13-Package-dan-Import/#contoh-menggunakan-package-standar","title":"Contoh Menggunakan Package Standar:","text":"<pre><code>import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; daftarMobil = new ArrayList&lt;&gt;();\n        daftarMobil.add(\"Toyota\");\n        daftarMobil.add(\"Honda\");\n\n        System.out.println(daftarMobil); // Output: [Toyota, Honda]\n    }\n}\n</code></pre> <p>Di sini, kita menggunakan kelas <code>ArrayList</code> dari package <code>java.util</code> untuk membuat daftar mobil.</p>"},{"location":"belajar-java/13-Package-dan-Import/#tips-package-dan-import","title":"\ud83e\uddd9 Tips Package dan Import","text":"<ul> <li>Gunakan package untuk mengorganisir kelas dan menghindari konflik nama.</li> <li>Gunakan import untuk memudahkan penggunaan kelas dari package lain.</li> <li>Wildcard (<code>*</code>) bisa digunakan untuk mengimpor semua kelas dalam sebuah package, namun disarankan untuk mengimpor kelas secara eksplisit untuk menjaga kejelasan kode.</li> <li>Java memiliki banyak package standar yang sangat berguna, seperti <code>java.util</code>, <code>java.io</code>, dan banyak lagi. Jangan ragu untuk mengeksplorasi!</li> </ul> <p>Next \ud83d\udc49 14. Exception Handling di Java ```</p> <p>Sekarang kamu sudah tahu cara menggunakan package dan import di Java. Jika ada kelas dari package lain yang ingin kamu gunakan, tinggal import aja, dan semua jadi lebih rapi! Siap melangkah ke exception handling? Let's go!</p>"},{"location":"belajar-java/14-Constructor-dan-Overloading/","title":"Constructor dan Overloading","text":"<p>Kita lanjut ke bab 14 tentang Constructor dan Overloading. Di Java, constructor digunakan untuk menginisialisasi objek saat pertama kali dibuat, sementara overloading memungkinkan kita membuat beberapa metode atau konstruktor dengan nama yang sama, tetapi dengan parameter yang berbeda.</p> <p>\ud83d\udcc4 Path: <code>D:\\dokumentasi\\dokumentasi-javascript-dari-nol\\docs\\belajar-java\\14-Constructor-dan-Overloading.md</code></p>"},{"location":"belajar-java/14-Constructor-dan-Overloading/#isi-14-constructor-dan-overloadingmd","title":"\u270d\ufe0f Isi <code>14-Constructor-dan-Overloading.md</code>","text":"<pre><code># 14. Constructor dan Overloading di Java\n\nDalam Java, **constructor** digunakan untuk menginisialisasi objek baru, sedangkan **overloading** memungkinkan kita membuat metode atau konstruktor dengan nama yang sama tetapi dengan parameter yang berbeda. Dua konsep ini sangat penting dalam pemrograman berorientasi objek (OOP).\n\n---\n\n## \ud83e\udde0 Apa Itu Constructor?\n\nConstructor adalah metode khusus dalam kelas yang digunakan untuk membuat objek dan menginisialisasi atributnya. Constructor dipanggil secara otomatis ketika objek dibuat dengan kata kunci `new`.\n\n### Jenis-Jenis Constructor:\n\n1. **Constructor Default (Tanpa Parameter)**: Constructor yang tidak memiliki parameter dan digunakan untuk memberi nilai default pada atribut.\n2. **Constructor Parameterized (Dengan Parameter)**: Constructor yang menerima parameter untuk menginisialisasi atribut dengan nilai yang diberikan saat objek dibuat.\n\n---\n\n## \ud83d\udd27 Constructor Default\n\nConstructor default secara otomatis dibuat jika kita tidak mendefinisikan constructor sama sekali. Jika kita mendefinisikan constructor tanpa parameter, maka itu adalah constructor default.\n\n### Contoh Constructor Default:\n\n```java\nclass Mobil {\n    String merk;\n    String warna;\n\n    // Constructor default\n    public Mobil() {\n        merk = \"Toyota\";\n        warna = \"Merah\";\n    }\n\n    void maju() {\n        System.out.println(merk + \" maju\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobilSaya = new Mobil();\n        mobilSaya.maju(); // Output: Toyota maju\n    }\n}\n</code></pre> <p>Pada contoh di atas, constructor default menginisialisasi atribut <code>merk</code> dan <code>warna</code> dengan nilai default.</p>"},{"location":"belajar-java/14-Constructor-dan-Overloading/#constructor-parameterized","title":"\ud83d\udd27 Constructor Parameterized","text":"<p>Constructor parameterized memungkinkan kita untuk memberikan nilai awal saat objek dibuat dengan menyertakan parameter di constructor.</p>"},{"location":"belajar-java/14-Constructor-dan-Overloading/#contoh-constructor-parameterized","title":"Contoh Constructor Parameterized:","text":"<pre><code>class Mobil {\n    String merk;\n    String warna;\n\n    // Constructor parameterized\n    public Mobil(String merk, String warna) {\n        this.merk = merk;\n        this.warna = warna;\n    }\n\n    void maju() {\n        System.out.println(merk + \" maju\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobilSaya = new Mobil(\"Honda\", \"Biru\");\n        mobilSaya.maju(); // Output: Honda maju\n    }\n}\n</code></pre> <p>Dengan constructor ini, kita bisa membuat objek <code>Mobil</code> dengan nilai yang lebih spesifik saat objek tersebut dibuat.</p>"},{"location":"belajar-java/14-Constructor-dan-Overloading/#apa-itu-overloading","title":"\ud83e\udde0 Apa Itu Overloading?","text":"<p>Method Overloading adalah kemampuan untuk memiliki beberapa metode dengan nama yang sama dalam satu kelas, tetapi dengan parameter yang berbeda (baik jumlah maupun tipe parameter). Overloading memungkinkan kita untuk mendefinisikan beberapa versi dari metode yang sama, tergantung pada kebutuhan.</p>"},{"location":"belajar-java/14-Constructor-dan-Overloading/#contoh-method-overloading","title":"\ud83d\udd27 Contoh Method Overloading","text":""},{"location":"belajar-java/14-Constructor-dan-Overloading/#overloading-dengan-jumlah-parameter-berbeda","title":"Overloading dengan Jumlah Parameter Berbeda:","text":"<pre><code>class Kalkulator {\n    // Method penjumlahan dengan 2 parameter\n    public int tambah(int a, int b) {\n        return a + b;\n    }\n\n    // Method penjumlahan dengan 3 parameter\n    public int tambah(int a, int b, int c) {\n        return a + b + c;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Kalkulator kalkulator = new Kalkulator();\n\n        System.out.println(kalkulator.tambah(2, 3)); // Output: 5\n        System.out.println(kalkulator.tambah(2, 3, 4)); // Output: 9\n    }\n}\n</code></pre>"},{"location":"belajar-java/14-Constructor-dan-Overloading/#overloading-dengan-tipe-parameter-yang-berbeda","title":"Overloading dengan Tipe Parameter yang Berbeda:","text":"<pre><code>class Kalkulator {\n    // Method penjumlahan dengan tipe parameter int\n    public int tambah(int a, int b) {\n        return a + b;\n    }\n\n    // Method penjumlahan dengan tipe parameter double\n    public double tambah(double a, double b) {\n        return a + b;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Kalkulator kalkulator = new Kalkulator();\n\n        System.out.println(kalkulator.tambah(2, 3)); // Output: 5\n        System.out.println(kalkulator.tambah(2.5, 3.5)); // Output: 6.0\n    }\n}\n</code></pre>"},{"location":"belajar-java/14-Constructor-dan-Overloading/#tips-constructor-dan-overloading","title":"\ud83e\uddd9 Tips Constructor dan Overloading","text":"<ul> <li>Constructor: Gunakan constructor untuk menginisialisasi objek dengan nilai yang diinginkan saat objek dibuat. Constructor default akan memberikan nilai awal, tetapi constructor parameterized memberikan lebih banyak kontrol atas inisialisasi.</li> <li>Overloading: Overloading memungkinkan kamu untuk membuat metode dengan nama yang sama tetapi dengan parameter yang berbeda. Ini berguna untuk menyederhanakan kode ketika fungsi yang sama perlu digunakan dengan cara yang berbeda.</li> <li>Constructor vs Method: Constructor dipanggil saat objek dibuat, sedangkan metode dipanggil setelah objek ada. Constructor tidak memiliki tipe pengembalian, sedangkan metode memiliki tipe pengembalian (seperti <code>void</code> atau tipe data lainnya).</li> </ul> <p>Next \ud83d\udc49 15. Inheritance di Java ```</p> <p>Sekarang kamu sudah menguasai tentang constructor dan method overloading di Java! Dua konsep ini memungkinkan kita untuk membuat objek dan metode yang lebih fleksibel dan efisien. Ready for inheritance? Let's go!</p>"},{"location":"belajar-java/15-Inheritance-Pewarisan/","title":"Inheritance Pewarisan","text":"<p>Berikut adalah bab 15 tentang Inheritance (Pewarisan). Dalam Java, inheritance memungkinkan sebuah kelas untuk mewarisi properti dan metode dari kelas lain. Ini adalah konsep utama dalam pemrograman berorientasi objek yang memungkinkan kita untuk membuat hierarki kelas yang lebih efisien.</p> <p>\ud83d\udcc4 Path: <code>D:\\dokumentasi\\dokumentasi-javascript-dari-nol\\docs\\belajar-java\\15-Inheritance-Pewarisan.md</code></p>"},{"location":"belajar-java/15-Inheritance-Pewarisan/#isi-15-inheritance-pewarisanmd","title":"\u270d\ufe0f Isi <code>15-Inheritance-Pewarisan.md</code>","text":"<pre><code># 15. Inheritance (Pewarisan) di Java\n\n**Inheritance** (pewarisan) adalah salah satu konsep penting dalam pemrograman berorientasi objek (OOP). Dengan inheritance, sebuah kelas (subclass) dapat mewarisi properti dan metode dari kelas lain (superclass). Ini memungkinkan kita untuk mendefinisikan hierarki kelas dan menghindari duplikasi kode.\n\n---\n\n## \ud83e\udde0 Apa Itu Inheritance?\n\nInheritance memungkinkan sebuah kelas untuk mewarisi atribut dan metode dari kelas lainnya. Kelas yang mewarisi disebut **subclass** (kelas turunan), sementara kelas yang diwarisi disebut **superclass** (kelas induk).\n\n### Keuntungan Inheritance:\n1. **Penggunaan Ulang Kode**: Subclass dapat menggunakan atribut dan metode dari superclass tanpa mendefinisikannya lagi.\n2. **Organisasi Kode**: Hierarki kelas yang jelas membuat struktur kode lebih mudah dikelola.\n3. **Fleksibilitas**: Inheritance memungkinkan perubahan pada superclass akan mempengaruhi subclass secara otomatis.\n\n---\n\n## \ud83d\udd27 Contoh Sederhana Inheritance\n\n### Superclass `Hewan` dan Subclass `Kucing`:\n\n```java\n// Superclass\nclass Hewan {\n    void makan() {\n        System.out.println(\"Hewan makan\");\n    }\n}\n\n// Subclass\nclass Kucing extends Hewan {\n    void suara() {\n        System.out.println(\"Kucing mengeong\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Kucing kucingSaya = new Kucing();\n        kucingSaya.makan(); // Output: Hewan makan (dari superclass)\n        kucingSaya.suara(); // Output: Kucing mengeong (dari subclass)\n    }\n}\n</code></pre> <p>Pada contoh di atas, kelas <code>Kucing</code> mewarisi metode <code>makan()</code> dari kelas <code>Hewan</code> dan menambahkan metode baru <code>suara()</code>.</p>"},{"location":"belajar-java/15-Inheritance-Pewarisan/#overriding-metode-di-subclass","title":"\ud83d\udd27 Overriding Metode di Subclass","text":"<p>Method Overriding adalah kemampuan untuk menggantikan implementasi metode yang ada di superclass dengan implementasi baru di subclass. Ini memungkinkan subclass untuk memberikan implementasi yang lebih spesifik dari metode yang diwarisi.</p>"},{"location":"belajar-java/15-Inheritance-Pewarisan/#contoh-method-overriding","title":"Contoh Method Overriding:","text":"<pre><code>// Superclass\nclass Hewan {\n    void makan() {\n        System.out.println(\"Hewan makan\");\n    }\n}\n\n// Subclass\nclass Kucing extends Hewan {\n    @Override\n    void makan() {\n        System.out.println(\"Kucing makan ikan\");\n    }\n\n    void suara() {\n        System.out.println(\"Kucing mengeong\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Kucing kucingSaya = new Kucing();\n        kucingSaya.makan(); // Output: Kucing makan ikan (method overridden)\n        kucingSaya.suara(); // Output: Kucing mengeong\n    }\n}\n</code></pre> <p>Dengan <code>@Override</code>, kita menggantikan implementasi metode <code>makan()</code> yang ada di superclass <code>Hewan</code> dengan implementasi baru di subclass <code>Kucing</code>.</p>"},{"location":"belajar-java/15-Inheritance-Pewarisan/#keyword-super","title":"\ud83e\udde0 Keyword <code>super</code>","text":"<p>Di dalam subclass, kita bisa menggunakan keyword <code>super</code> untuk merujuk ke anggota (atribut atau metode) yang ada di superclass. Ini berguna untuk memanggil metode atau konstruktor dari superclass yang ter-overriding atau untuk mengakses atribut superclass.</p>"},{"location":"belajar-java/15-Inheritance-Pewarisan/#contoh-penggunaan-super","title":"Contoh Penggunaan <code>super</code>:","text":"<pre><code>class Hewan {\n    void makan() {\n        System.out.println(\"Hewan makan\");\n    }\n}\n\nclass Kucing extends Hewan {\n    void makan() {\n        super.makan(); // Memanggil metode makan() dari superclass\n        System.out.println(\"Kucing makan ikan\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Kucing kucingSaya = new Kucing();\n        kucingSaya.makan(); \n        // Output: Hewan makan\n        //         Kucing makan ikan\n    }\n}\n</code></pre> <p>Di sini, <code>super.makan()</code> memanggil metode <code>makan()</code> dari superclass <code>Hewan</code>, kemudian kita menambahkan logika tambahan di subclass.</p>"},{"location":"belajar-java/15-Inheritance-Pewarisan/#tips-mengenai-inheritance","title":"\ud83e\uddd9 Tips Mengenai Inheritance","text":"<ul> <li>Inheritance adalah cara yang powerful untuk mengorganisir kode dan mempromosikan penggunaan ulang kode (code reuse).</li> <li>Gunakan method overriding untuk menyesuaikan implementasi metode di subclass sesuai dengan kebutuhan.</li> <li>Jika kamu ingin merujuk ke metode atau atribut dari superclass yang ter-overriding, gunakan keyword <code>super</code>.</li> <li>Ingat, meskipun inheritance sangat berguna, tidak semua hubungan antara kelas harus berbasis inheritance. Beberapa hubungan bisa lebih baik menggunakan composition (komposisi) daripada inheritance.</li> </ul> <p>Next \ud83d\udc49 16. Polymorphism di Java ```</p> <p>Sekarang kamu sudah mengerti bagaimana inheritance bekerja di Java. Konsep ini memungkinkan kelas untuk mewarisi sifat dan metode dari kelas lain, yang sangat membantu dalam membuat kode yang lebih terorganisir dan mudah dikelola. Siap untuk memahami polymorphism? Let's dive in!</p>"},{"location":"belajar-java/16-Polymorphism/","title":"Polymorphism","text":"<p>Berikut adalah bab 16 tentang Polymorphism. Polymorphism adalah konsep dalam pemrograman berorientasi objek (OOP) yang memungkinkan objek yang berbeda untuk merespons metode dengan cara yang berbeda. Dalam Java, polymorphism dapat dicapai melalui method overriding dan method overloading.</p> <p>\ud83d\udcc4 Path: <code>D:\\dokumentasi\\dokumentasi-javascript-dari-nol\\docs\\belajar-java\\16-Polymorphism.md</code></p>"},{"location":"belajar-java/16-Polymorphism/#isi-16-polymorphismmd","title":"\u270d\ufe0f Isi <code>16-Polymorphism.md</code>","text":"<pre><code># 16. Polymorphism di Java\n\n**Polymorphism** (polimorfisme) adalah konsep dalam pemrograman berorientasi objek (OOP) yang memungkinkan satu entitas (seperti metode atau objek) untuk memiliki banyak bentuk. Dalam Java, polymorphism dapat terjadi dalam dua cara: **method overriding** dan **method overloading**.\n\n---\n\n## \ud83e\udde0 Apa Itu Polymorphism?\n\nSecara umum, polymorphism memungkinkan satu objek untuk bertindak berbeda berdasarkan konteks. Ada dua jenis polymorphism dalam Java:\n\n1. **Compile-time polymorphism**: Polymorphism yang terjadi saat kompilasi, sering disebut juga sebagai **method overloading**.\n2. **Runtime polymorphism**: Polymorphism yang terjadi saat eksekusi program, sering disebut juga sebagai **method overriding**.\n\n---\n\n## \ud83d\udd27 Compile-time Polymorphism (Method Overloading)\n\n**Method Overloading** adalah cara untuk memiliki beberapa metode dengan nama yang sama, tetapi dengan parameter yang berbeda. Polymorphism terjadi karena metode yang dipanggil tergantung pada parameter yang diberikan saat pemanggilan metode.\n\n### Contoh Method Overloading:\n\n```java\nclass Kalkulator {\n    // Method penjumlahan dengan 2 parameter\n    public int tambah(int a, int b) {\n        return a + b;\n    }\n\n    // Method penjumlahan dengan 3 parameter\n    public int tambah(int a, int b, int c) {\n        return a + b + c;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Kalkulator kalkulator = new Kalkulator();\n\n        System.out.println(kalkulator.tambah(2, 3)); // Output: 5\n        System.out.println(kalkulator.tambah(2, 3, 4)); // Output: 9\n    }\n}\n</code></pre> <p>Pada contoh ini, kita memiliki dua metode <code>tambah()</code> dengan nama yang sama, tetapi parameter yang berbeda. Pemilihan metode yang tepat dilakukan saat kompilasi, berdasarkan jumlah dan tipe parameter.</p>"},{"location":"belajar-java/16-Polymorphism/#runtime-polymorphism-method-overriding","title":"\ud83d\udd27 Runtime Polymorphism (Method Overriding)","text":"<p>Method Overriding terjadi ketika subclass mengubah implementasi metode yang diwarisi dari superclass. Ini memungkinkan objek dari subclass untuk memanggil metode yang didefinisikan di superclass, tetapi dengan implementasi yang berbeda.</p>"},{"location":"belajar-java/16-Polymorphism/#contoh-method-overriding","title":"Contoh Method Overriding:","text":"<pre><code>// Superclass\nclass Hewan {\n    void suara() {\n        System.out.println(\"Hewan bersuara\");\n    }\n}\n\n// Subclass\nclass Kucing extends Hewan {\n    @Override\n    void suara() {\n        System.out.println(\"Kucing mengeong\");\n    }\n}\n\n// Subclass lain\nclass Anjing extends Hewan {\n    @Override\n    void suara() {\n        System.out.println(\"Anjing menggonggong\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Hewan hewan1 = new Kucing();\n        Hewan hewan2 = new Anjing();\n\n        hewan1.suara(); // Output: Kucing mengeong\n        hewan2.suara(); // Output: Anjing menggonggong\n    }\n}\n</code></pre> <p>Pada contoh ini, meskipun kita mendeklarasikan variabel <code>hewan</code> dengan tipe <code>Hewan</code>, objek yang sebenarnya adalah <code>Kucing</code> atau <code>Anjing</code>. Pemanggilan metode <code>suara()</code> akan memanggil implementasi yang sesuai dengan objek yang sebenarnya, bukan tipe variabelnya. Ini adalah contoh runtime polymorphism.</p>"},{"location":"belajar-java/16-Polymorphism/#polymorphism-dengan-array-atau-koleksi","title":"\ud83e\udde0 Polymorphism dengan Array atau Koleksi","text":"<p>Polymorphism juga dapat digunakan dengan array atau koleksi objek, memungkinkan kita untuk menyimpan objek dari kelas yang berbeda tetapi memanggil metode yang sama.</p>"},{"location":"belajar-java/16-Polymorphism/#contoh-polymorphism-dalam-array","title":"Contoh Polymorphism dalam Array:","text":"<pre><code>class Hewan {\n    void suara() {\n        System.out.println(\"Hewan bersuara\");\n    }\n}\n\nclass Kucing extends Hewan {\n    void suara() {\n        System.out.println(\"Kucing mengeong\");\n    }\n}\n\nclass Anjing extends Hewan {\n    void suara() {\n        System.out.println(\"Anjing menggonggong\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Hewan[] hewanArray = new Hewan[3];\n        hewanArray[0] = new Kucing();\n        hewanArray[1] = new Anjing();\n        hewanArray[2] = new Hewan();\n\n        for (Hewan hewan : hewanArray) {\n            hewan.suara();\n        }\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>Kucing mengeong\nAnjing menggonggong\nHewan bersuara\n</code></pre> <p>Pada contoh ini, kita memiliki array yang menyimpan objek dari kelas <code>Hewan</code>, <code>Kucing</code>, dan <code>Anjing</code>. Saat kita memanggil metode <code>suara()</code>, objek yang sesuai akan memberikan implementasi yang tepat dari metode tersebut. Ini menunjukkan runtime polymorphism dalam koleksi.</p>"},{"location":"belajar-java/16-Polymorphism/#tips-mengenai-polymorphism","title":"\ud83e\uddd9 Tips Mengenai Polymorphism","text":"<ul> <li>Method Overloading terjadi saat kompilasi, sedangkan Method Overriding terjadi saat eksekusi. Polymorphism saat kompilasi dapat digunakan untuk meningkatkan fleksibilitas metode, sementara polymorphism saat eksekusi memberikan fleksibilitas dalam menulis kode yang dapat bekerja dengan berbagai objek.</li> <li>Runtime Polymorphism sangat penting dalam pembuatan aplikasi yang fleksibel dan dapat diperluas. Ini memungkinkan kita untuk memanfaatkan konsep OOP seperti inheritance dan method overriding untuk menciptakan kode yang lebih dinamis.</li> <li>Polymorphism sering digunakan dalam desain antarmuka (interface) dan kelas abstrak, di mana kelas-kelas yang berbeda dapat mematuhi kontrak yang sama tetapi memiliki implementasi yang berbeda.</li> </ul> <p>Next \ud83d\udc49 17. Abstraksi di Java ```</p> <p>Sekarang kamu sudah memahami polymorphism dalam Java! Dengan method overloading dan method overriding, kita dapat menciptakan kode yang lebih fleksibel dan efisien. Siap untuk belajar tentang abstraksi? Ayo lanjutkan!</p>"},{"location":"belajar-java/17-Encapsulation/","title":"Encapsulation","text":"<p>Berikut adalah bab 17 tentang Encapsulation. Encapsulation adalah prinsip dasar dalam pemrograman berorientasi objek yang menyarankan agar data dan metode yang beroperasi pada data tersebut digabungkan dalam satu unit, dan data tersebut hanya bisa diakses melalui metode yang disediakan.</p> <p>\ud83d\udcc4 Path: <code>D:\\dokumentasi\\dokumentasi-javascript-dari-nol\\docs\\belajar-java\\17-Encapsulation.md</code></p>"},{"location":"belajar-java/17-Encapsulation/#isi-17-encapsulationmd","title":"\u270d\ufe0f Isi <code>17-Encapsulation.md</code>","text":"<pre><code># 17. Encapsulation di Java\n\n**Encapsulation** (enkapsulasi) adalah salah satu prinsip dasar dalam pemrograman berorientasi objek (OOP). Encapsulation mengacu pada pembungkusan data (atribut) dan metode yang mengoperasikan data tersebut dalam satu unit, serta pengaturan akses ke data tersebut menggunakan **getter** dan **setter**. Dengan encapsulation, kita dapat menjaga data agar tetap aman dan menghindari manipulasi langsung terhadap data tersebut.\n\n---\n\n## \ud83e\udde0 Apa Itu Encapsulation?\n\nEncapsulation bertujuan untuk menyembunyikan detail implementasi dari dunia luar dan hanya memungkinkan akses ke data melalui metode yang telah ditentukan. Hal ini membantu untuk:\n\n1. **Mencegah akses yang tidak sah**: Kita dapat mengontrol bagaimana data diakses dan dimodifikasi.\n2. **Meningkatkan keamanan data**: Dengan menetapkan **access modifiers** (seperti `private`, `protected`, dan `public`), kita dapat membatasi akses terhadap data.\n3. **Meningkatkan pemeliharaan kode**: Perubahan pada data atau logika implementasi dapat dilakukan tanpa memengaruhi kode yang menggunakan objek tersebut.\n\n---\n\n## \ud83d\udd27 Contoh Encapsulation di Java\n\n### Menggunakan **getter** dan **setter** untuk mengakses data:\n\n```java\nclass Person {\n    // Atribut private\n    private String nama;\n    private int umur;\n\n    // Setter untuk mengatur nama\n    public void setNama(String nama) {\n        this.nama = nama;\n    }\n\n    // Getter untuk mengambil nama\n    public String getNama() {\n        return nama;\n    }\n\n    // Setter untuk mengatur umur\n    public void setUmur(int umur) {\n        this.umur = umur;\n    }\n\n    // Getter untuk mengambil umur\n    public int getUmur() {\n        return umur;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person orang = new Person();\n\n        // Menggunakan setter untuk mengatur nilai atribut\n        orang.setNama(\"John\");\n        orang.setUmur(25);\n\n        // Menggunakan getter untuk mengambil nilai atribut\n        System.out.println(\"Nama: \" + orang.getNama());\n        System.out.println(\"Umur: \" + orang.getUmur());\n    }\n}\n</code></pre> <p>Dalam contoh di atas, atribut <code>nama</code> dan <code>umur</code> di-set sebagai private, yang berarti mereka tidak bisa diakses langsung dari luar kelas <code>Person</code>. Sebagai gantinya, kita menggunakan metode setter dan getter untuk mengatur dan mengambil nilai-nilai atribut tersebut.</p>"},{"location":"belajar-java/17-Encapsulation/#access-modifiers","title":"\ud83d\udd27 Access Modifiers","text":"<p>Java memiliki access modifiers yang menentukan tingkat aksesibilitas data dan metode di dalam kelas. Beberapa modifier yang umum digunakan adalah:</p> <ul> <li><code>private</code>: Data hanya dapat diakses dari dalam kelas itu sendiri.</li> <li><code>public</code>: Data dapat diakses dari mana saja (kelas lain).</li> <li><code>protected</code>: Data hanya dapat diakses oleh kelas dalam paket yang sama atau subclass.</li> <li><code>default</code> (tidak ada modifier): Data hanya dapat diakses dalam paket yang sama.</li> </ul>"},{"location":"belajar-java/17-Encapsulation/#contoh-penggunaan-access-modifiers","title":"Contoh Penggunaan Access Modifiers:","text":"<pre><code>class Produk {\n    private String nama; // hanya dapat diakses dalam kelas ini\n    public double harga; // dapat diakses dari mana saja\n\n    public void setNama(String nama) {\n        this.nama = nama;\n    }\n\n    public String getNama() {\n        return nama;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Produk produk = new Produk();\n        produk.setNama(\"Laptop\");\n        produk.harga = 5000000;\n\n        System.out.println(\"Nama Produk: \" + produk.getNama());\n        System.out.println(\"Harga Produk: \" + produk.harga);\n    }\n}\n</code></pre> <p>Pada contoh ini, <code>nama</code> hanya dapat diakses dan dimodifikasi melalui metode getter dan setter, sementara <code>harga</code> dapat diakses langsung karena menggunakan modifier <code>public</code>.</p>"},{"location":"belajar-java/17-Encapsulation/#manfaat-encapsulation","title":"\ud83e\udde0 Manfaat Encapsulation","text":"<ol> <li>Keamanan Data: Dengan membatasi akses langsung ke data, kita dapat memastikan bahwa data hanya dimodifikasi melalui metode yang terkontrol.</li> <li>Fleksibilitas dan Pemeliharaan: Kita dapat mengubah implementasi internal suatu kelas tanpa mempengaruhi kelas yang menggunakannya, asalkan interface (getter dan setter) tetap konsisten.</li> <li>Pengendalian Akses: Dengan menggunakan setter, kita bisa menambahkan logika untuk validasi data sebelum menyimpan atau memodifikasinya, seperti memeriksa apakah nilai umur valid atau tidak.</li> </ol>"},{"location":"belajar-java/17-Encapsulation/#tips-mengenai-encapsulation","title":"\ud83e\uddd9 Tips Mengenai Encapsulation","text":"<ul> <li>Gunakan Encapsulation untuk Data Sensitif: Jika kamu memiliki data yang bersifat sensitif, pastikan untuk menyembunyikannya dengan menggunakan modifier <code>private</code> dan hanya memberikan akses melalui metode getter/setter yang aman.</li> <li>Validasi di Setter: Selalu pertimbangkan untuk menambahkan validasi di dalam setter untuk memastikan data yang dimasukkan ke dalam objek valid dan sesuai dengan aturan yang diinginkan.</li> <li>Getter/Setter Sesuai Kebutuhan: Tidak semua atribut perlu memiliki getter dan setter, hanya yang diperlukan untuk akses eksternal. Jika data hanya digunakan dalam kelas itu sendiri, biarkan tetap private.</li> </ul> <p>Next \ud83d\udc49 18. Abstract Class dan Interface di Java ```</p> <p>Sekarang kamu sudah paham tentang encapsulation! Dengan konsep ini, kita bisa menjaga data tetap aman dan mengatur bagaimana data tersebut diakses. Siap untuk belajar tentang abstract class dan interface? Let's keep going!</p>"},{"location":"belajar-java/18-Abstraksi-dan-Interface/","title":"Abstraksi dan Interface","text":"<p>Berikut adalah bab 18 tentang Abstraksi dan Interface. Abstraksi adalah konsep dalam pemrograman berorientasi objek yang memungkinkan kita untuk menyembunyikan detail implementasi dan hanya menunjukkan fungsionalitas penting. Interface adalah kontrak yang menentukan apa yang dapat dilakukan oleh kelas tanpa menentukan bagaimana kelas tersebut melakukannya.</p> <p>\ud83d\udcc4 Path: <code>D:\\dokumentasi\\dokumentasi-javascript-dari-nol\\docs\\belajar-java\\18-Abstraksi-dan-Interface.md</code></p>"},{"location":"belajar-java/18-Abstraksi-dan-Interface/#isi-18-abstraksi-dan-interfacemd","title":"\u270d\ufe0f Isi <code>18-Abstraksi-dan-Interface.md</code>","text":"<pre><code># 18. Abstraksi dan Interface di Java\n\nDalam pemrograman berorientasi objek, **abstraksi** adalah prinsip untuk menyembunyikan detail implementasi dan hanya menunjukkan fungsionalitas penting. **Interface** adalah salah satu cara untuk mencapai abstraksi di Java, memungkinkan kita untuk mendefinisikan kontrak tanpa mengimplementasikan logika konkret.\n\n---\n\n## \ud83e\udde0 Apa Itu Abstraksi?\n\n**Abstraksi** adalah konsep dalam OOP yang memungkinkan kita untuk menyembunyikan kompleksitas dan hanya menampilkan informasi yang relevan kepada pengguna. Dalam Java, abstraksi dapat dicapai menggunakan **abstract class** dan **interface**.\n\n1. **Abstract Class**: Kelas yang tidak dapat diinstansiasi dan dapat memiliki metode yang belum diimplementasikan.\n2. **Interface**: Sebuah kontrak yang hanya mendefinisikan metode, tetapi tidak memberikan implementasi.\n\n---\n\n## \ud83d\udd27 Abstract Class di Java\n\nKelas abstrak adalah kelas yang tidak dapat diinstansiasi, artinya kita tidak bisa membuat objek langsung dari kelas ini. Kelas abstrak dapat memiliki **metode abstrak** (metode tanpa implementasi) dan **metode konkret** (metode dengan implementasi).\n\n### Contoh Abstract Class:\n\n```java\nabstract class Hewan {\n    abstract void suara();  // Metode abstrak tanpa implementasi\n\n    public void makan() {\n        System.out.println(\"Hewan sedang makan\");\n    }\n}\n\nclass Kucing extends Hewan {\n    @Override\n    void suara() {\n        System.out.println(\"Kucing mengeong\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Hewan kucing = new Kucing();\n        kucing.suara();  // Output: Kucing mengeong\n        kucing.makan();   // Output: Hewan sedang makan\n    }\n}\n</code></pre> <p>Pada contoh di atas, <code>Hewan</code> adalah kelas abstrak dengan metode abstrak <code>suara()</code>. Kelas <code>Kucing</code> mengimplementasikan metode <code>suara()</code>, sementara metode <code>makan()</code> dapat langsung digunakan karena sudah diimplementasikan di kelas <code>Hewan</code>.</p>"},{"location":"belajar-java/18-Abstraksi-dan-Interface/#interface-di-java","title":"\ud83d\udd27 Interface di Java","text":"<p>Interface adalah jenis kelas khusus yang hanya dapat memiliki deklarasi metode tanpa implementasi (hingga Java 8, di mana interface bisa memiliki metode default). Kelas yang mengimplementasikan interface wajib mengimplementasikan semua metode yang ada di dalamnya.</p>"},{"location":"belajar-java/18-Abstraksi-dan-Interface/#contoh-interface","title":"Contoh Interface:","text":"<pre><code>interface Hewan {\n    void suara();  // Deklarasi metode, tanpa implementasi\n}\n\nclass Kucing implements Hewan {\n    @Override\n    public void suara() {\n        System.out.println(\"Kucing mengeong\");\n    }\n}\n\nclass Anjing implements Hewan {\n    @Override\n    public void suara() {\n        System.out.println(\"Anjing menggonggong\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Hewan kucing = new Kucing();\n        Hewan anjing = new Anjing();\n\n        kucing.suara();  // Output: Kucing mengeong\n        anjing.suara();  // Output: Anjing menggonggong\n    }\n}\n</code></pre> <p>Pada contoh di atas, <code>Hewan</code> adalah interface yang mendeklarasikan metode <code>suara()</code>. Kelas <code>Kucing</code> dan <code>Anjing</code> mengimplementasikan interface ini, masing-masing dengan implementasi yang berbeda untuk metode <code>suara()</code>.</p>"},{"location":"belajar-java/18-Abstraksi-dan-Interface/#perbedaan-antara-abstract-class-dan-interface","title":"\ud83e\udde0 Perbedaan Antara Abstract Class dan Interface","text":"Fitur Abstract Class Interface Metode Abstrak Bisa memiliki metode abstrak dan metode konkret Hanya bisa mendeklarasikan metode (metode default sejak Java 8) Multiple Inheritance Tidak bisa mewarisi lebih dari satu kelas abstrak Bisa mengimplementasikan lebih dari satu interface Atribut Bisa memiliki atribut (variabel) dengan nilai Hanya bisa mendeklarasikan konstanta, tidak bisa memiliki atribut dengan nilai Konstruktor Bisa memiliki konstruktor Tidak bisa memiliki konstruktor <ul> <li>Abstract Class digunakan jika kita ingin memberikan implementasi sebagian pada metode dan memungkinkan subclass untuk mengubah implementasi.</li> <li>Interface digunakan jika kita ingin mendefinisikan kontrak atau standar untuk kelas yang mengimplementasikannya, tanpa memberikan implementasi.</li> </ul>"},{"location":"belajar-java/18-Abstraksi-dan-Interface/#tips-mengenai-abstraksi-dan-interface","title":"\ud83e\uddd9 Tips Mengenai Abstraksi dan Interface","text":"<ol> <li>Gunakan Abstract Class jika beberapa metode memiliki implementasi bersama, tetapi beberapa metode memerlukan implementasi khusus.</li> <li>Gunakan Interface untuk mendefinisikan kontrak umum yang harus dipatuhi oleh kelas, terutama jika kelas tersebut tidak memiliki hubungan pewarisan.</li> <li>Java 8+ memungkinkan interface memiliki metode default dan static, yang memberi fleksibilitas lebih dalam desain arsitektur.</li> </ol>"},{"location":"belajar-java/18-Abstraksi-dan-Interface/#kapan-menggunakan-abstraksi-dan-interface","title":"\ud83e\udde0 Kapan Menggunakan Abstraksi dan Interface?","text":"<ul> <li>Gunakan Abstraksi jika kamu perlu memberikan implementasi umum yang dapat digunakan oleh semua kelas turunan.</li> <li>Gunakan Interface jika kamu ingin mendefinisikan seperangkat operasi yang berbeda, tetapi tidak peduli bagaimana mereka diimplementasikan. Interface sangat berguna untuk desain modular dan meningkatkan kemampuan untuk melakukan pengujian unit (unit testing).</li> </ul> <p>Next \ud83d\udc49 19. Lambda Expression di Java ```</p> <p>Sekarang kamu telah memahami abstraksi dan interface dalam Java! Konsep-konsep ini sangat penting untuk mendesain aplikasi yang fleksibel dan terstruktur dengan baik. Ayo lanjutkan ke pembahasan lambda expression di Java!</p>"},{"location":"belajar-java/19-This-dan-Super-Keyword/","title":"This dan Super Keyword","text":"<p>Berikut adalah bab 19 tentang This dan Super Keyword. Kata kunci <code>this</code> dan <code>super</code> digunakan dalam Java untuk merujuk pada objek saat ini dan superclass masing-masing, membantu kita memahami dan mengelola pewarisan serta referensi objek dalam program.</p> <p>\ud83d\udcc4 Path: <code>D:\\dokumentasi\\dokumentasi-javascript-dari-nol\\docs\\belajar-java\\19-This-dan-Super-Keyword.md</code></p>"},{"location":"belajar-java/19-This-dan-Super-Keyword/#isi-19-this-dan-super-keywordmd","title":"\u270d\ufe0f Isi <code>19-This-dan-Super-Keyword.md</code>","text":"<pre><code># 19. This dan Super Keyword di Java\n\nDalam Java, kata kunci **`this`** dan **`super`** digunakan untuk merujuk pada objek dan superclass. Keduanya sangat penting dalam konteks pewarisan, pengelolaan objek, dan membedakan antara anggota kelas saat ini dan anggota kelas induk.\n\n---\n\n## \ud83e\udde0 Apa Itu `this`?\n\nKata kunci **`this`** merujuk pada **objek saat ini** (current object) dari kelas tempat kata kunci ini digunakan. `this` dapat digunakan untuk membedakan antara variabel instans dari kelas dengan parameter metode atau konstruktor yang memiliki nama yang sama. `this` juga digunakan untuk memanggil konstruktor lain dalam kelas yang sama.\n\n### Contoh Penggunaan `this`:\n\n```java\nclass Mobil {\n    private String warna;\n    private int tahun;\n\n    // Konstruktor dengan parameter\n    public Mobil(String warna, int tahun) {\n        this.warna = warna;  // Menggunakan 'this' untuk membedakan antara variabel instans dan parameter\n        this.tahun = tahun;\n    }\n\n    // Metode untuk menampilkan informasi mobil\n    public void tampilkanInfo() {\n        System.out.println(\"Warna Mobil: \" + this.warna);\n        System.out.println(\"Tahun Mobil: \" + this.tahun);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobil = new Mobil(\"Merah\", 2021);\n        mobil.tampilkanInfo();\n    }\n}\n</code></pre> <p>Pada contoh di atas, <code>this.warna</code> dan <code>this.tahun</code> merujuk pada variabel instans kelas <code>Mobil</code>, sementara <code>warna</code> dan <code>tahun</code> adalah parameter yang diberikan pada konstruktor. Dengan menggunakan <code>this</code>, kita bisa membedakan keduanya.</p>"},{"location":"belajar-java/19-This-dan-Super-Keyword/#apa-itu-super","title":"\ud83e\udde0 Apa Itu <code>super</code>?","text":"<p>Kata kunci <code>super</code> digunakan untuk merujuk pada kelas induk (superclass). <code>super</code> dapat digunakan untuk:</p> <ol> <li>Memanggil konstruktor kelas induk.</li> <li>Mengakses metode atau variabel yang ada di kelas induk, terutama jika metode atau variabel tersebut tertutup di kelas turunan.</li> </ol>"},{"location":"belajar-java/19-This-dan-Super-Keyword/#contoh-penggunaan-super-untuk-memanggil-konstruktor-superclass","title":"Contoh Penggunaan <code>super</code> untuk Memanggil Konstruktor Superclass:","text":"<pre><code>class Kendaraan {\n    private String nama;\n\n    public Kendaraan(String nama) {\n        this.nama = nama;\n    }\n\n    public void tampilkanNama() {\n        System.out.println(\"Nama Kendaraan: \" + this.nama);\n    }\n}\n\nclass Mobil extends Kendaraan {\n    private int tahun;\n\n    public Mobil(String nama, int tahun) {\n        super(nama);  // Memanggil konstruktor kelas induk\n        this.tahun = tahun;\n    }\n\n    public void tampilkanInfo() {\n        super.tampilkanNama();  // Memanggil metode kelas induk\n        System.out.println(\"Tahun Mobil: \" + this.tahun);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobil = new Mobil(\"Toyota\", 2022);\n        mobil.tampilkanInfo();\n    }\n}\n</code></pre> <p>Pada contoh di atas, <code>super(nama)</code> digunakan untuk memanggil konstruktor dari kelas <code>Kendaraan</code> yang menginisialisasi variabel <code>nama</code>. Selain itu, <code>super.tampilkanNama()</code> digunakan untuk memanggil metode <code>tampilkanNama()</code> dari kelas induk.</p>"},{"location":"belajar-java/19-This-dan-Super-Keyword/#perbedaan-antara-this-dan-super","title":"\ud83e\udde0 Perbedaan antara <code>this</code> dan <code>super</code>","text":"Fitur <code>this</code> <code>super</code> Referensi Merujuk pada objek saat ini (kelas yang sedang aktif) Merujuk pada kelas induk (superclass) Penggunaan Digunakan untuk membedakan variabel instans dengan parameter atau untuk memanggil konstruktor lain dalam kelas yang sama Digunakan untuk memanggil konstruktor atau metode kelas induk Akses Hanya bisa digunakan dalam konteks objek yang sedang aktif Digunakan untuk mengakses anggota kelas induk yang diturunkan"},{"location":"belajar-java/19-This-dan-Super-Keyword/#tips-mengenai-this-dan-super","title":"\ud83e\uddd9 Tips Mengenai <code>this</code> dan <code>super</code>","text":"<ol> <li> <p><code>this</code> pada Konstruktor: Gunakan <code>this</code> dalam konstruktor untuk memanggil konstruktor lain dalam kelas yang sama, jika diperlukan.</p> </li> <li> <p>Panggilan <code>super</code> dalam Subclass: Jika kelas turunan perlu memanggil konstruktor atau metode dari kelas induk, gunakan <code>super()</code>. Ini berguna terutama ketika kelas induk memiliki konstruktor tanpa parameter atau dengan parameter tertentu.</p> </li> <li> <p>Akses Anggota Kelas Induk: Jika ada variabel atau metode dengan nama yang sama antara kelas induk dan kelas turunan, gunakan <code>super</code> untuk merujuk pada anggota kelas induk yang ingin diakses.</p> </li> </ol>"},{"location":"belajar-java/19-This-dan-Super-Keyword/#menghindari-konflik-nama","title":"\ud83e\udde0 Menghindari Konflik Nama","text":"<p>Jika ada konflik nama antara variabel instans dan parameter (misalnya keduanya memiliki nama yang sama), <code>this</code> akan membedakan keduanya. Namun, jika ada konflik nama antara metode atau variabel kelas induk dan kelas turunan, gunakan <code>super</code> untuk mengakses anggota kelas induk.</p> <p>Next \ud83d\udc49 20. Exception Handling di Java ```</p> <p>Sekarang kamu sudah paham tentang penggunaan <code>this</code> dan <code>super</code> di Java! Keduanya sangat berguna dalam konteks pewarisan dan manajemen objek. Yuk lanjutkan ke pembahasan exception handling!</p>"},{"location":"belajar-java/20-Access-Modifiers/","title":"Access Modifiers","text":"<p>Berikut adalah bab 20 tentang Access Modifiers. Access modifiers di Java digunakan untuk menentukan visibilitas dan aksesibilitas anggota kelas seperti variabel, metode, konstruktor, dan kelas itu sendiri. Ada empat jenis access modifiers di Java: <code>public</code>, <code>private</code>, <code>protected</code>, dan default (tanpa modifier).</p> <p>\ud83d\udcc4 Path: <code>D:\\dokumentasi\\dokumentasi-javascript-dari-nol\\docs\\belajar-java\\20-Access-Modifiers.md</code></p>"},{"location":"belajar-java/20-Access-Modifiers/#isi-20-access-modifiersmd","title":"\u270d\ufe0f Isi <code>20-Access-Modifiers.md</code>","text":"<pre><code># 20. Access Modifiers di Java\n\n**Access modifiers** di Java digunakan untuk mengontrol akses ke anggota kelas seperti variabel, metode, konstruktor, dan kelas. Dengan menggunakan access modifiers, kita dapat mengontrol visibilitas dan tingkat akses ke elemen-elemen ini dari bagian lain dalam program.\n\n---\n\n## \ud83e\udde0 Jenis-jenis Access Modifiers di Java\n\nDi Java, terdapat empat jenis **access modifiers**:\n\n1. **`public`**: Anggota kelas dapat diakses dari mana saja, bahkan dari kelas di luar paket yang berbeda.\n2. **`private`**: Anggota kelas hanya dapat diakses dalam kelas yang sama. Tidak bisa diakses dari luar kelas.\n3. **`protected`**: Anggota kelas dapat diakses dalam kelas yang sama, dalam kelas turunan (subclass), dan dalam paket yang sama.\n4. **default (tanpa modifier)**: Jika tidak ada access modifier yang diberikan, maka anggota kelas hanya dapat diakses dalam paket yang sama.\n\n---\n\n## \ud83e\udde0 `public` Access Modifier\n\nAnggota yang diberi modifier **`public`** dapat diakses dari kelas manapun, baik dalam paket yang sama atau berbeda. Modifier ini memberi akses penuh ke anggota tersebut.\n\n### Contoh Penggunaan `public`:\n\n```java\npublic class Mobil {\n    public String merek;\n\n    public void setMerek(String merek) {\n        this.merek = merek;\n    }\n\n    public String getMerek() {\n        return merek;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobil = new Mobil();\n        mobil.setMerek(\"Toyota\");\n        System.out.println(\"Merek Mobil: \" + mobil.getMerek());\n    }\n}\n</code></pre> <p>Di atas, variabel <code>merek</code> dan metode <code>setMerek</code> serta <code>getMerek</code> diberi modifier <code>public</code>, sehingga bisa diakses di luar kelas <code>Mobil</code>.</p>"},{"location":"belajar-java/20-Access-Modifiers/#private-access-modifier","title":"\ud83e\udde0 <code>private</code> Access Modifier","text":"<p>Anggota yang diberi modifier <code>private</code> hanya dapat diakses dalam kelas yang sama. Artinya, anggota tersebut tidak dapat diakses dari kelas lain, bahkan jika kelas tersebut berada dalam paket yang sama.</p>"},{"location":"belajar-java/20-Access-Modifiers/#contoh-penggunaan-private","title":"Contoh Penggunaan <code>private</code>:","text":"<pre><code>class Mobil {\n    private String merek;\n\n    public void setMerek(String merek) {\n        this.merek = merek;\n    }\n\n    public String getMerek() {\n        return merek;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobil = new Mobil();\n        mobil.setMerek(\"Honda\");\n        System.out.println(\"Merek Mobil: \" + mobil.getMerek());\n    }\n}\n</code></pre> <p>Pada contoh di atas, variabel <code>merek</code> diberi modifier <code>private</code>, sehingga tidak bisa diakses langsung dari luar kelas <code>Mobil</code>. Namun, metode <code>setMerek</code> dan <code>getMerek</code> yang bersifat <code>public</code> memungkinkan akses ke variabel tersebut.</p>"},{"location":"belajar-java/20-Access-Modifiers/#protected-access-modifier","title":"\ud83e\udde0 <code>protected</code> Access Modifier","text":"<p>Anggota yang diberi modifier <code>protected</code> dapat diakses dalam kelas yang sama, dalam kelas turunan (subclass), dan dalam paket yang sama.</p>"},{"location":"belajar-java/20-Access-Modifiers/#contoh-penggunaan-protected","title":"Contoh Penggunaan <code>protected</code>:","text":"<pre><code>class Kendaraan {\n    protected String jenis;\n\n    protected void setJenis(String jenis) {\n        this.jenis = jenis;\n    }\n}\n\nclass Mobil extends Kendaraan {\n    public void tampilkanJenis() {\n        System.out.println(\"Jenis Kendaraan: \" + jenis);  // Mengakses anggota protected dari superclass\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobil = new Mobil();\n        mobil.setJenis(\"SUV\");\n        mobil.tampilkanJenis();\n    }\n}\n</code></pre> <p>Di contoh ini, variabel <code>jenis</code> dan metode <code>setJenis</code> diberi modifier <code>protected</code>, sehingga bisa diakses oleh kelas turunan seperti kelas <code>Mobil</code>.</p>"},{"location":"belajar-java/20-Access-Modifiers/#default-package-private-access-modifier","title":"\ud83e\udde0 Default (Package-Private) Access Modifier","text":"<p>Jika tidak ada access modifier yang ditentukan, maka anggota tersebut memiliki access modifier default. Anggota dengan akses default hanya bisa diakses dalam paket yang sama, dan tidak dapat diakses dari luar paket tersebut.</p>"},{"location":"belajar-java/20-Access-Modifiers/#contoh-penggunaan-default","title":"Contoh Penggunaan Default:","text":"<pre><code>class Kendaraan {\n    String jenis;  // Akses default\n\n    void setJenis(String jenis) {  // Akses default\n        this.jenis = jenis;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Kendaraan kendaraan = new Kendaraan();\n        kendaraan.setJenis(\"Motor\");\n        System.out.println(\"Jenis Kendaraan: \" + kendaraan.jenis);\n    }\n}\n</code></pre> <p>Pada contoh ini, variabel <code>jenis</code> dan metode <code>setJenis</code> tidak memiliki modifier eksplisit, yang berarti keduanya memiliki akses default dan hanya dapat diakses dalam kelas yang berada dalam paket yang sama.</p>"},{"location":"belajar-java/20-Access-Modifiers/#tabel-perbandingan-access-modifiers","title":"\ud83e\udde0 Tabel Perbandingan Access Modifiers","text":"Modifier Kelas yang Sama Kelas Turunan Paket yang Sama Paket yang Berbeda <code>public</code> Bisa Bisa Bisa Bisa <code>private</code> Bisa Tidak Bisa Tidak Bisa Tidak Bisa <code>protected</code> Bisa Bisa Bisa Tidak Bisa default Bisa Tidak Bisa Bisa Tidak Bisa"},{"location":"belajar-java/20-Access-Modifiers/#tips-mengenai-access-modifiers","title":"\ud83e\uddd9 Tips Mengenai Access Modifiers","text":"<ol> <li>Gunakan <code>public</code> jika anggota kelas perlu diakses di mana saja, baik dalam paket yang sama atau berbeda.</li> <li>Gunakan <code>private</code> untuk variabel atau metode yang hanya perlu diakses dalam kelas itu sendiri, menjaga enkapsulasi.</li> <li>Gunakan <code>protected</code> jika anggota kelas perlu diakses oleh kelas turunan atau dalam paket yang sama.</li> <li>Gunakan default untuk akses terbatas dalam paket yang sama, terutama saat bekerja dengan paket yang memiliki hubungan erat.</li> </ol> <p>Dengan memahami access modifiers ini, kamu dapat mengontrol dan melindungi data dan fungsionalitas dalam aplikasi Java. Ayo lanjutkan ke pembahasan exception handling!</p> <p>Next \ud83d\udc49 21. Exception Handling di Java ```</p> <p>Dengan ini, kamu sekarang memahami penggunaan access modifiers dalam Java! Ini adalah aspek dasar dalam membangun aplikasi yang terstruktur dengan baik dan aman. Yuk, lanjutkan ke topik exception handling!</p>"},{"location":"belajar-java/21-Static-vs-Non-Static/","title":"21. Static vs Non-Static","text":"<p>Tuliskan materi lengkap di sini. Berikut adalah bab 21 tentang Static vs Non-Static. Di Java, konsep static dan non-static digunakan untuk mengontrol apakah anggota kelas (seperti variabel dan metode) terkait dengan objek tertentu atau kelas itu sendiri.</p> <p>\ud83d\udcc4 Path: <code>D:\\dokumentasi\\dokumentasi-javascript-dari-nol\\docs\\belajar-java\\21-Static-vs-Non-Static.md</code></p>"},{"location":"belajar-java/21-Static-vs-Non-Static/#isi-21-static-vs-non-staticmd","title":"\u270d\ufe0f Isi <code>21-Static-vs-Non-Static.md</code>","text":"<pre><code># 21. Static vs Non-Static di Java\n\nDi Java, terdapat dua jenis anggota kelas: **static** dan **non-static**. Perbedaan antara keduanya sangat penting untuk dipahami, karena menentukan bagaimana anggota kelas diakses dan dikelola di dalam program.\n\n---\n\n## \ud83e\udde0 Apa Itu `static`?\n\nAnggota yang diberi modifier **`static`** berhubungan dengan kelas itu sendiri, bukan dengan objek yang dibuat dari kelas tersebut. Artinya, variabel atau metode yang static dapat diakses tanpa membuat objek dari kelas. Semua objek yang dibuat dari kelas yang sama akan berbagi satu nilai dari variabel static yang sama.\n\n### Contoh Penggunaan `static`:\n\n```java\nclass Mobil {\n    static int jumlahMobil = 0;  // Variabel static\n\n    public Mobil() {\n        jumlahMobil++;  // Setiap kali objek Mobil dibuat, jumlahMobil bertambah 1\n    }\n\n    public static void tampilkanJumlahMobil() {\n        System.out.println(\"Jumlah Mobil: \" + jumlahMobil);  // Metode static\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobil1 = new Mobil();\n        Mobil mobil2 = new Mobil();\n        Mobil.tampilkanJumlahMobil();  // Mengakses metode static tanpa membuat objek\n    }\n}\n</code></pre> <p>Pada contoh di atas, variabel <code>jumlahMobil</code> adalah static, sehingga semua objek <code>Mobil</code> yang dibuat akan berbagi nilai yang sama. Metode <code>tampilkanJumlahMobil()</code> juga static, sehingga bisa dipanggil tanpa membuat objek dari kelas <code>Mobil</code>.</p>"},{"location":"belajar-java/21-Static-vs-Non-Static/#apa-itu-non-static","title":"\ud83e\udde0 Apa Itu Non-Static?","text":"<p>Anggota non-static adalah anggota yang berhubungan dengan objek kelas. Setiap objek yang dibuat dari kelas akan memiliki salinan tersendiri dari variabel dan metode non-static. Artinya, variabel non-static memiliki nilai yang berbeda-beda untuk setiap objek.</p>"},{"location":"belajar-java/21-Static-vs-Non-Static/#contoh-penggunaan-non-static","title":"Contoh Penggunaan Non-Static:","text":"<pre><code>class Mobil {\n    int tahun;  // Variabel non-static\n\n    public Mobil(int tahun) {\n        this.tahun = tahun;  // Setiap objek dapat memiliki nilai tahun yang berbeda\n    }\n\n    public void tampilkanTahun() {\n        System.out.println(\"Tahun Mobil: \" + tahun);  // Metode non-static\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Mobil mobil1 = new Mobil(2021);\n        Mobil mobil2 = new Mobil(2022);\n\n        mobil1.tampilkanTahun();  // Tahun Mobil: 2021\n        mobil2.tampilkanTahun();  // Tahun Mobil: 2022\n    }\n}\n</code></pre> <p>Pada contoh ini, variabel <code>tahun</code> adalah non-static, yang berarti setiap objek <code>Mobil</code> dapat memiliki nilai <code>tahun</code> yang berbeda. Metode <code>tampilkanTahun()</code> juga non-static, yang artinya hanya bisa dipanggil setelah objek dibuat.</p>"},{"location":"belajar-java/21-Static-vs-Non-Static/#perbedaan-antara-static-dan-non-static","title":"\ud83e\udde0 Perbedaan Antara <code>static</code> dan Non-Static","text":"Fitur <code>static</code> Non-Static Terkait dengan Kelas itu sendiri Objek yang dibuat dari kelas Diakses dengan Nama kelas (tanpa membuat objek) Objek kelas (harus membuat objek terlebih dahulu) Nilai Sama untuk semua objek dari kelas yang sama Berbeda untuk setiap objek Penyimpanan Tersimpan dalam memori kelas Tersimpan dalam memori objek Aksesibilitas Bisa diakses menggunakan nama kelas Harus diakses melalui objek kelas"},{"location":"belajar-java/21-Static-vs-Non-Static/#tips-mengenai-static-dan-non-static","title":"\ud83e\uddd9 Tips Mengenai <code>static</code> dan Non-Static","text":"<ol> <li>Gunakan <code>static</code> untuk anggota yang seharusnya dibagikan oleh semua objek dari kelas tersebut, seperti hitungan jumlah objek atau data yang umum.</li> <li>Gunakan Non-Static jika anggota kelas hanya relevan untuk objek tertentu, seperti atribut dan metode yang memiliki nilai berbeda antara objek satu dengan lainnya.</li> <li>Metode static tidak bisa mengakses anggota non-static (karena tidak ada objek yang terkait). Sebaliknya, metode non-static dapat mengakses anggota static dan non-static.</li> <li>Kewaspadaan terhadap penggunaan <code>static</code>: Penggunaan yang berlebihan dapat menyebabkan masalah dalam pemeliharaan kode, terutama jika data diubah oleh berbagai objek.</li> </ol>"},{"location":"belajar-java/21-Static-vs-Non-Static/#contoh-kasus-penggunaan-static-dan-non-static","title":"\ud83e\udde0 Contoh Kasus Penggunaan <code>static</code> dan Non-Static","text":""},{"location":"belajar-java/21-Static-vs-Non-Static/#contoh-1-static-untuk-menghitung-jumlah-objek","title":"Contoh 1: Static untuk menghitung jumlah objek","text":"<pre><code>class Buku {\n    static int jumlahBuku = 0;  // Static untuk menghitung jumlah objek Buku\n    String judul;\n\n    public Buku(String judul) {\n        this.judul = judul;\n        jumlahBuku++;\n    }\n\n    public static void tampilkanJumlahBuku() {\n        System.out.println(\"Jumlah Buku: \" + jumlahBuku);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Buku buku1 = new Buku(\"Pemrograman Java\");\n        Buku buku2 = new Buku(\"Algoritma dan Struktur Data\");\n\n        Buku.tampilkanJumlahBuku();  // Output: Jumlah Buku: 2\n    }\n}\n</code></pre>"},{"location":"belajar-java/21-Static-vs-Non-Static/#contoh-2-non-static-untuk-detail-objek","title":"Contoh 2: Non-Static untuk detail objek","text":"<pre><code>class Sepeda {\n    String warna;  // Non-static untuk menyimpan detail setiap objek\n\n    public Sepeda(String warna) {\n        this.warna = warna;\n    }\n\n    public void tampilkanWarna() {\n        System.out.println(\"Warna Sepeda: \" + warna);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Sepeda sepeda1 = new Sepeda(\"Merah\");\n        Sepeda sepeda2 = new Sepeda(\"Biru\");\n\n        sepeda1.tampilkanWarna();  // Output: Warna Sepeda: Merah\n        sepeda2.tampilkanWarna();  // Output: Warna Sepeda: Biru\n    }\n}\n</code></pre> <p>Dengan memahami static dan non-static di Java, kamu dapat membuat keputusan yang lebih baik mengenai pengelolaan data dan bagaimana kelas dan objek berinteraksi. Keduanya memiliki kegunaan dan konteks penggunaannya sendiri, jadi pastikan memilih dengan bijak.</p> <p>Next \ud83d\udc49 22. Exception Handling di Java ```</p> <p>Dengan ini, kamu sudah siap untuk memahami perbedaan antara static dan non-static. Keduanya memberi cara yang berbeda dalam mengelola data dan fungsi dalam aplikasi Java. Yuk, lanjutkan ke exception handling!</p>"},{"location":"belajar-java/22-Final-Keyword-dan-Konstanta/","title":"Final Keyword dan Konstanta","text":"<p>Berikut adalah bab 22 tentang Final Keyword dan Konstanta di Java.</p> <p>\ud83d\udcc4 Path: <code>D:\\dokumentasi\\dokumentasi-javascript-dari-nol\\docs\\belajar-java\\22-Final-Keyword-dan-Konstanta.md</code></p>"},{"location":"belajar-java/22-Final-Keyword-dan-Konstanta/#isi-22-final-keyword-dan-konstantamd","title":"\u270d\ufe0f Isi <code>22-Final-Keyword-dan-Konstanta.md</code>","text":"<pre><code># 22. Final Keyword dan Konstanta di Java\n\nDi Java, **final** adalah sebuah kata kunci (keyword) yang digunakan untuk mendeklarasikan variabel, metode, atau kelas yang nilainya tidak dapat diubah setelah ditetapkan. Konsep **final** sering digunakan dalam pemrograman untuk menciptakan nilai tetap atau tidak dapat diubah, yang sangat berguna dalam berbagai konteks, seperti mendefinisikan **konstanta**.\n\n---\n\n## \ud83e\udde0 Apa Itu `final`?\n\nKeyword **`final`** di Java digunakan untuk membuat sesuatu yang tidak dapat diubah. Penggunaannya bisa diterapkan pada tiga elemen utama: variabel, metode, dan kelas.\n\n1. **Variabel final**: Setelah sebuah variabel diberi nilai, nilainya tidak bisa diubah lagi.\n2. **Metode final**: Metode tidak dapat di-override (diturunkan) oleh subclass.\n3. **Kelas final**: Kelas tidak bisa diturunkan (dilebih-lebihkan).\n\n---\n\n## \ud83e\udde0 `final` pada Variabel\n\nVariabel yang dideklarasikan dengan keyword `final` berarti nilai variabel tersebut tidak dapat diubah setelah inisialisasi. Biasanya, ini digunakan untuk mendefinisikan **konstanta**.\n\n### Contoh Penggunaan `final` pada Variabel:\n\n```java\npublic class Matematika {\n    final double PI = 3.14159;  // Variabel final yang berfungsi sebagai konstanta\n\n    public void tampilkanPI() {\n        System.out.println(\"Nilai PI: \" + PI);\n    }\n\n    public static void main(String[] args) {\n        Matematika math = new Matematika();\n        math.tampilkanPI();\n        // math.PI = 3.14;  // ERROR! Tidak bisa mengubah nilai konstanta PI\n    }\n}\n</code></pre> <p>Pada contoh di atas, <code>PI</code> adalah variabel final. Nilainya hanya bisa diatur sekali, pada saat deklarasi, dan tidak bisa diubah lagi setelahnya.</p>"},{"location":"belajar-java/22-Final-Keyword-dan-Konstanta/#final-pada-metode","title":"\ud83e\udde0 <code>final</code> pada Metode","text":"<p>Metode yang dideklarasikan dengan <code>final</code> tidak dapat di-override oleh subclass. Ini berguna untuk memastikan bahwa implementasi metode tersebut tetap konsisten, bahkan jika ada subclass yang mencoba untuk mengubahnya.</p>"},{"location":"belajar-java/22-Final-Keyword-dan-Konstanta/#contoh-penggunaan-final-pada-metode","title":"Contoh Penggunaan <code>final</code> pada Metode:","text":"<pre><code>class Hewan {\n    public final void suara() {\n        System.out.println(\"Hewan mengeluarkan suara\");\n    }\n}\n\nclass Kucing extends Hewan {\n    // ERROR! Tidak bisa override metode final\n    // public void suara() {\n    //     System.out.println(\"Meong\");\n    // }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Hewan hewan = new Hewan();\n        hewan.suara();\n    }\n}\n</code></pre> <p>Di sini, metode <code>suara()</code> pada kelas <code>Hewan</code> dideklarasikan dengan final, yang berarti tidak bisa di-override oleh kelas <code>Kucing</code>.</p>"},{"location":"belajar-java/22-Final-Keyword-dan-Konstanta/#final-pada-kelas","title":"\ud83e\udde0 <code>final</code> pada Kelas","text":"<p>Kelas yang dideklarasikan dengan <code>final</code> tidak bisa memiliki subclass. Ini mencegah kelas tersebut untuk diwariskan.</p>"},{"location":"belajar-java/22-Final-Keyword-dan-Konstanta/#contoh-penggunaan-final-pada-kelas","title":"Contoh Penggunaan <code>final</code> pada Kelas:","text":"<pre><code>final class Kendaraan {\n    public void bergerak() {\n        System.out.println(\"Kendaraan bergerak\");\n    }\n}\n\n// ERROR! Tidak bisa membuat subclass dari kelas final\n// class Mobil extends Kendaraan {\n//     public void bergerak() {\n//         System.out.println(\"Mobil bergerak\");\n//     }\n// }\n</code></pre> <p>Pada contoh di atas, kelas <code>Kendaraan</code> dideklarasikan final, yang berarti kelas ini tidak dapat diwariskan oleh kelas lain seperti <code>Mobil</code>.</p>"},{"location":"belajar-java/22-Final-Keyword-dan-Konstanta/#konstanta-dalam-java","title":"\ud83e\udde0 Konstanta dalam Java","text":"<p>Konstanta adalah nilai tetap yang tidak dapat diubah selama eksekusi program. Di Java, konstanta biasanya dideklarasikan dengan menggunakan <code>final</code> untuk variabel dan biasanya juga diberi nama huruf besar untuk membedakannya dari variabel biasa.</p>"},{"location":"belajar-java/22-Final-Keyword-dan-Konstanta/#contoh-penggunaan-konstanta","title":"Contoh Penggunaan Konstanta:","text":"<pre><code>public class PiValue {\n    public static final double PI = 3.14159;  // Konstanta\n\n    public static void main(String[] args) {\n        System.out.println(\"Nilai PI adalah: \" + PI);\n    }\n}\n</code></pre> <p>Konstanta <code>PI</code> pada contoh di atas memiliki nilai tetap dan tidak bisa diubah selama runtime. Menyatakan variabel sebagai <code>final</code> memberikan jaminan bahwa nilai tersebut tidak akan berubah.</p>"},{"location":"belajar-java/22-Final-Keyword-dan-Konstanta/#best-practices-untuk-final-dan-konstanta","title":"\ud83e\udde0 Best Practices untuk <code>final</code> dan Konstanta","text":"<ol> <li>Gunakan <code>final</code> untuk variabel yang tidak perlu diubah setelah inisialisasi, seperti konstanta atau nilai-nilai yang seharusnya tetap.</li> <li>Gunakan <code>final</code> pada metode yang tidak ingin diubah implementasinya oleh subclass.</li> <li>Gunakan <code>final</code> pada kelas yang tidak dimaksudkan untuk diwariskan (misalnya, kelas utilitas atau kelas yang memiliki implementasi kritikal).</li> <li>Gunakan penamaan huruf besar untuk konstanta, mengikuti konvensi Java yang memudahkan pembaca kode mengetahui bahwa variabel tersebut adalah konstanta.</li> </ol>"},{"location":"belajar-java/22-Final-Keyword-dan-Konstanta/#tips-menggunakan-final-dengan-bijak","title":"\ud83e\uddd9 Tips Menggunakan <code>final</code> dengan Bijak","text":"<ol> <li>Berguna dalam banyak situasi: Dengan menggunakan <code>final</code>, kamu bisa mencegah perubahan yang tidak diinginkan pada variabel atau metode yang seharusnya tetap, sehingga meningkatkan keamanan dan keandalan kode.</li> <li>Tingkatkan keterbacaan kode: Penggunaan <code>final</code> memberikan petunjuk yang jelas bahwa suatu nilai atau metode tidak dapat diubah.</li> <li>Optimasi kode: Di beberapa situasi, penggunaan <code>final</code> dapat membantu JVM untuk melakukan optimasi kode karena JVM dapat lebih mudah memprediksi nilai-nilai yang tetap.</li> </ol> <p>Dengan menggunakan final secara tepat, kamu bisa membuat kode yang lebih aman dan lebih mudah dipahami. Menghindari perubahan yang tidak diinginkan adalah salah satu keuntungan besar dari penggunaan kata kunci ini.</p> <p>Next \ud83d\udc49 23. Package dan Import di Java ```</p> <p>Bab 22 ini membahas cara menggunakan final di Java untuk mendeklarasikan konstanta, mencegah modifikasi kelas dan metode, serta memastikan nilai yang tidak dapat diubah. Dengan memahami ini, kamu dapat menulis kode yang lebih aman dan dapat diandalkan!</p>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/","title":"ArrayList, LinkedList, HashSet, TreeSet di Java","text":""},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#a-apa-itu-collection-framework","title":"A. Apa itu Collection Framework?","text":"<p>Collection Framework adalah kumpulan kelas dan interface di Java yang menyediakan struktur data dan algoritma untuk menyimpan, mengelola, dan memanipulasi data. Framework ini mencakup beberapa kelas dan interface seperti List, Set, dan Map.</p> <p>Dalam tutorial ini, kita akan fokus pada beberapa List dan Set yaitu ArrayList, LinkedList, HashSet, dan TreeSet.</p>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#b-arraylist","title":"B. ArrayList","text":""},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#1-apa-itu-arraylist","title":"1. Apa itu ArrayList?","text":"<p><code>ArrayList</code> adalah implementasi dari List yang menggunakan array dinamis untuk menyimpan elemen-elemen. Ukuran ArrayList akan bertambah atau berkurang secara otomatis saat elemen ditambahkan atau dihapus.</p>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#2-ciri-ciri-arraylist","title":"2. Ciri-Ciri ArrayList:","text":"<ul> <li>Elemen disimpan secara berurutan.</li> <li>Dapat menyimpan elemen null.</li> <li>Akses elemen sangat cepat dengan indeks.</li> <li>Tidak terurut dan tidak mengizinkan duplikasi (berbeda dengan Set).</li> </ul>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#3-contoh-penggunaan-arraylist","title":"3. Contoh Penggunaan ArrayList","text":"<pre><code>import java.util.ArrayList;\n\npublic class ContohArrayList {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"JavaScript\");\n\n        System.out.println(\"Isi ArrayList: \" + list);\n        System.out.println(\"Elemen pertama: \" + list.get(0));  // Akses elemen dengan indeks\n\n        list.remove(\"Python\");\n        System.out.println(\"Setelah remove Python: \" + list);\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>Isi ArrayList: [Java, Python, JavaScript]\nElemen pertama: Java\nSetelah remove Python: [Java, JavaScript]\n</code></pre>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#c-linkedlist","title":"C. LinkedList","text":""},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#1-apa-itu-linkedlist","title":"1. Apa itu LinkedList?","text":"<p><code>LinkedList</code> adalah implementasi dari List yang menggunakan struktur data linked list untuk menyimpan elemen-elemen. Setiap elemen menyimpan referensi ke elemen sebelumnya dan berikutnya.</p>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#2-ciri-ciri-linkedlist","title":"2. Ciri-Ciri LinkedList:","text":"<ul> <li>Memiliki performa yang baik saat elemen sering ditambah atau dihapus di tengah list.</li> <li>Lebih lambat dalam hal akses elemen dibandingkan ArrayList karena harus melalui traversal.</li> <li>Dapat digunakan sebagai Queue atau Deque (Double Ended Queue).</li> </ul>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#3-contoh-penggunaan-linkedlist","title":"3. Contoh Penggunaan LinkedList","text":"<pre><code>import java.util.LinkedList;\n\npublic class ContohLinkedList {\n    public static void main(String[] args) {\n        LinkedList&lt;String&gt; list = new LinkedList&lt;&gt;();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"JavaScript\");\n\n        System.out.println(\"Isi LinkedList: \" + list);\n        list.addFirst(\"C++\");  // Menambah elemen di awal\n        list.addLast(\"Go\");    // Menambah elemen di akhir\n\n        System.out.println(\"Setelah penambahan: \" + list);\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>Isi LinkedList: [Java, Python, JavaScript]\nSetelah penambahan: [C++, Java, Python, JavaScript, Go]\n</code></pre>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#d-hashset","title":"D. HashSet","text":""},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#1-apa-itu-hashset","title":"1. Apa itu HashSet?","text":"<p><code>HashSet</code> adalah implementasi dari Set yang menggunakan hash table untuk menyimpan elemen-elemen. Set tidak mengizinkan duplikasi dan elemen-elemen tidak terurut.</p>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#2-ciri-ciri-hashset","title":"2. Ciri-Ciri HashSet:","text":"<ul> <li>Tidak ada urutan dalam elemen-elemen.</li> <li>Tidak mengizinkan elemen yang duplikat.</li> <li>Memiliki performa yang lebih baik untuk operasi pencarian (lookup) dibandingkan dengan TreeSet.</li> </ul>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#3-contoh-penggunaan-hashset","title":"3. Contoh Penggunaan HashSet","text":"<pre><code>import java.util.HashSet;\n\npublic class ContohHashSet {\n    public static void main(String[] args) {\n        HashSet&lt;String&gt; set = new HashSet&lt;&gt;();\n        set.add(\"Java\");\n        set.add(\"Python\");\n        set.add(\"JavaScript\");\n\n        System.out.println(\"Isi HashSet: \" + set);\n        set.add(\"Java\");  // Elemen duplikat tidak akan ditambahkan\n        System.out.println(\"Setelah penambahan elemen duplikat: \" + set);\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>Isi HashSet: [Java, Python, JavaScript]\nSetelah penambahan elemen duplikat: [Java, Python, JavaScript]\n</code></pre>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#e-treeset","title":"E. TreeSet","text":""},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#1-apa-itu-treeset","title":"1. Apa itu TreeSet?","text":"<p><code>TreeSet</code> adalah implementasi dari Set yang menggunakan struktur data tree (pohon) untuk menyimpan elemen-elemen secara terurut. Elemen-elemen dalam TreeSet disimpan berdasarkan urutan alami mereka atau berdasarkan urutan yang diberikan oleh Comparator.</p>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#2-ciri-ciri-treeset","title":"2. Ciri-Ciri TreeSet:","text":"<ul> <li>Menyimpan elemen-elemen dalam urutan yang terurut.</li> <li>Tidak mengizinkan elemen yang duplikat.</li> <li>Memiliki performa yang lebih lambat dalam hal pencarian dibandingkan HashSet karena melibatkan traversal pohon.</li> </ul>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#3-contoh-penggunaan-treeset","title":"3. Contoh Penggunaan TreeSet","text":"<pre><code>import java.util.TreeSet;\n\npublic class ContohTreeSet {\n    public static void main(String[] args) {\n        TreeSet&lt;String&gt; set = new TreeSet&lt;&gt;();\n        set.add(\"Java\");\n        set.add(\"Python\");\n        set.add(\"JavaScript\");\n\n        System.out.println(\"Isi TreeSet: \" + set);\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>Isi TreeSet: [Java, JavaScript, Python]\n</code></pre>"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#f-perbandingan-arraylist-linkedlist-hashset-dan-treeset","title":"F. Perbandingan ArrayList, LinkedList, HashSet, dan TreeSet","text":"Struktur Data Implementasi Urutan Duplikasi Kecepatan Akses Operasi ArrayList Array Terurut Mengizinkan duplikasi Cepat untuk akses elemen Baik untuk akses cepat LinkedList Linked List Terurut Mengizinkan duplikasi Lambat untuk akses elemen Baik untuk operasi tambah/hapus di tengah HashSet Hash Table Tidak terurut Tidak mengizinkan duplikasi Cepat untuk pencarian Baik untuk pencarian cepat TreeSet Tree (Pohon) Terurut Tidak mengizinkan duplikasi Lambat untuk pencarian Baik untuk elemen yang terurut"},{"location":"belajar-java/23-ArrayList%2C-LinkedList%2C-HashSet%2C-TreeSet/#g-kapan-menggunakan-masing-masing","title":"G. Kapan Menggunakan Masing-Masing?","text":"<ul> <li>ArrayList: Gunakan ketika kamu membutuhkan akses cepat ke elemen berdasarkan indeks dan ukuran list yang dinamis.</li> <li>LinkedList: Gunakan ketika kamu sering menambah atau menghapus elemen di tengah list.</li> <li>HashSet: Gunakan ketika kamu membutuhkan struktur data yang tidak mengizinkan duplikasi dan tidak peduli dengan urutan elemen.</li> <li>TreeSet: Gunakan ketika kamu membutuhkan elemen yang terurut dan tidak ingin ada elemen duplikat.</li> </ul> <p>\ud83c\udfaf Collection Framework di Java memberi kita berbagai pilihan struktur data untuk menangani data dengan cara yang paling efisien sesuai dengan kebutuhan program kita.</p> <p>\ud83d\udccd Next: 16 - Map Interface dan Implementasinya</p>"},{"location":"belajar-java/24-HashMap%2C-TreeMap/","title":"HashMap dan TreeMap di Java","text":""},{"location":"belajar-java/24-HashMap%2C-TreeMap/#a-apa-itu-map-di-java","title":"A. Apa itu Map di Java?","text":"<p>Map adalah koleksi yang menyimpan data dalam pasangan key-value, dimana setiap key harus unik dan dapat dipetakan ke satu value. Ini berbeda dengan Set yang hanya menyimpan elemen tanpa pasangan key-value.</p> <p>Dalam Java, terdapat beberapa implementasi dari Map yang sering digunakan, antara lain HashMap dan TreeMap.</p>"},{"location":"belajar-java/24-HashMap%2C-TreeMap/#b-hashmap","title":"B. HashMap","text":""},{"location":"belajar-java/24-HashMap%2C-TreeMap/#1-apa-itu-hashmap","title":"1. Apa itu HashMap?","text":"<p><code>HashMap</code> adalah implementasi dari interface Map yang menggunakan struktur data hash table untuk menyimpan pasangan key-value. HashMap tidak menjamin urutan elemen, artinya elemen-elemen disimpan secara acak berdasarkan hasil dari hash function pada key.</p>"},{"location":"belajar-java/24-HashMap%2C-TreeMap/#2-ciri-ciri-hashmap","title":"2. Ciri-Ciri HashMap:","text":"<ul> <li>Tidak menjamin urutan elemen.</li> <li>Key tidak boleh null, tetapi value bisa null.</li> <li>Memiliki performa yang baik untuk operasi pencarian (lookup), penambahan, dan penghapusan.</li> <li>Tidak ada urutan tertentu di dalam HashMap.</li> </ul>"},{"location":"belajar-java/24-HashMap%2C-TreeMap/#3-contoh-penggunaan-hashmap","title":"3. Contoh Penggunaan HashMap","text":"<pre><code>import java.util.HashMap;\n\npublic class ContohHashMap {\n    public static void main(String[] args) {\n        HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\n        map.put(\"Java\", 8);\n        map.put(\"Python\", 3);\n        map.put(\"JavaScript\", 7);\n\n        System.out.println(\"Isi HashMap: \" + map);\n        System.out.println(\"Nilai untuk key 'Java': \" + map.get(\"Java\"));  // Akses value berdasarkan key\n\n        map.remove(\"Python\");\n        System.out.println(\"Setelah remove Python: \" + map);\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>Isi HashMap: {Java=8, Python=3, JavaScript=7}\nNilai untuk key 'Java': 8\nSetelah remove Python: {Java=8, JavaScript=7}\n</code></pre>"},{"location":"belajar-java/24-HashMap%2C-TreeMap/#c-treemap","title":"C. TreeMap","text":""},{"location":"belajar-java/24-HashMap%2C-TreeMap/#1-apa-itu-treemap","title":"1. Apa itu TreeMap?","text":"<p><code>TreeMap</code> adalah implementasi dari Map yang menggunakan struktur data tree (pohon) untuk menyimpan pasangan key-value. Elemen-elemen dalam TreeMap disimpan dalam urutan yang terurut, baik berdasarkan urutan alami dari key (jika key mengimplementasikan Comparable) atau urutan yang ditentukan oleh Comparator yang diberikan.</p>"},{"location":"belajar-java/24-HashMap%2C-TreeMap/#2-ciri-ciri-treemap","title":"2. Ciri-Ciri TreeMap:","text":"<ul> <li>Menyimpan elemen-elemen dalam urutan yang terurut.</li> <li>Key dan value tidak boleh null.</li> <li>Memiliki performa yang lebih lambat dibandingkan HashMap dalam hal pencarian dan penyisipan karena traversal pohon yang digunakan.</li> <li>Biasanya digunakan ketika kamu memerlukan elemen-elemen yang terurut.</li> </ul>"},{"location":"belajar-java/24-HashMap%2C-TreeMap/#3-contoh-penggunaan-treemap","title":"3. Contoh Penggunaan TreeMap","text":"<pre><code>import java.util.TreeMap;\n\npublic class ContohTreeMap {\n    public static void main(String[] args) {\n        TreeMap&lt;String, Integer&gt; map = new TreeMap&lt;&gt;();\n        map.put(\"Java\", 8);\n        map.put(\"Python\", 3);\n        map.put(\"JavaScript\", 7);\n\n        System.out.println(\"Isi TreeMap: \" + map);\n        System.out.println(\"Nilai untuk key 'Java': \" + map.get(\"Java\"));  // Akses value berdasarkan key\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>Isi TreeMap: {Java=8, JavaScript=7, Python=3}\nNilai untuk key 'Java': 8\n</code></pre>"},{"location":"belajar-java/24-HashMap%2C-TreeMap/#d-perbandingan-hashmap-dan-treemap","title":"D. Perbandingan HashMap dan TreeMap","text":"Fitur HashMap TreeMap Urutan Elemen Tidak terurut (elemen disimpan berdasarkan hasil hash) Terurut (elemen disimpan berdasarkan urutan alami key atau Comparator) Key null dapat digunakan sebagai key null tidak diperbolehkan sebagai key Value null diperbolehkan sebagai value null tidak diperbolehkan sebagai value Performa Pencarian Lebih cepat karena menggunakan hash table Lebih lambat karena menggunakan pohon (tree) Penggunaan Gunakan jika urutan tidak penting dan ingin performa lebih cepat Gunakan jika urutan key penting dan perlu pencarian terurut"},{"location":"belajar-java/24-HashMap%2C-TreeMap/#e-kapan-menggunakan-hashmap-dan-treemap","title":"E. Kapan Menggunakan HashMap dan TreeMap?","text":"<ul> <li>HashMap: Gunakan ketika urutan elemen tidak penting dan kamu membutuhkan operasi yang cepat untuk pencarian, penyisipan, dan penghapusan.</li> <li>TreeMap: Gunakan ketika kamu membutuhkan penyimpanan pasangan key-value dalam urutan tertentu, seperti urutan numerik atau alfabetis.</li> </ul>"},{"location":"belajar-java/24-HashMap%2C-TreeMap/#f-ringkasan","title":"F. Ringkasan","text":"Fitur HashMap TreeMap Implementasi Hash table Pohon (Tree) Urutan Tidak terurut Terurut Null Key/Value Key boleh null, value boleh null Tidak boleh ada null Kecepatan Cepat (operasi O(1)) Lebih lambat (operasi O(log n)) <p>\ud83c\udfaf Map seperti HashMap dan TreeMap adalah pilihan tepat ketika kamu membutuhkan struktur data yang memungkinkan penyimpanan pasangan key-value. Pilihannya tergantung pada kebutuhan urutan dan performa yang diinginkan.</p> <p>\ud83d\udccd Next: 17 - Lambda Expression di Java</p>"},{"location":"belajar-java/25-Iterator-dan-For-Each/","title":"Iterator dan For-Each di Java","text":""},{"location":"belajar-java/25-Iterator-dan-For-Each/#a-apa-itu-iterator","title":"A. Apa itu Iterator?","text":"<p><code>Iterator</code> adalah antarmuka (interface) di Java yang memungkinkan kita untuk menelusuri elemen satu per satu dalam koleksi seperti <code>ArrayList</code>, <code>HashSet</code>, <code>LinkedList</code>, dan lain-lain.</p>"},{"location":"belajar-java/25-Iterator-dan-For-Each/#1-kenapa-perlu-iterator","title":"1. Kenapa Perlu Iterator?","text":"<p>Kadang kita butuh mengakses elemen koleksi sambil memodifikasinya (misal: menghapus elemen saat iterasi). <code>Iterator</code> menyediakan metode aman untuk melakukan ini tanpa kena <code>ConcurrentModificationException</code>.</p>"},{"location":"belajar-java/25-Iterator-dan-For-Each/#b-metode-dalam-interface-iterator","title":"B. Metode dalam Interface Iterator","text":"Metode Deskripsi <code>hasNext()</code> Mengecek apakah masih ada elemen berikutnya. <code>next()</code> Mengambil elemen berikutnya. <code>remove()</code> Menghapus elemen terakhir yang diakses."},{"location":"belajar-java/25-Iterator-dan-For-Each/#c-contoh-penggunaan-iterator","title":"C. Contoh Penggunaan Iterator","text":"<pre><code>import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class ContohIterator {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; daftar = new ArrayList&lt;&gt;();\n        daftar.add(\"Java\");\n        daftar.add(\"Python\");\n        daftar.add(\"C++\");\n\n        Iterator&lt;String&gt; it = daftar.iterator();\n\n        while (it.hasNext()) {\n            String item = it.next();\n            System.out.println(item);\n\n            if (item.equals(\"Python\")) {\n                it.remove(); // Hapus Python dari daftar\n            }\n        }\n\n        System.out.println(\"Setelah iterasi: \" + daftar);\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>Java\nPython\nC++\nSetelah iterasi: [Java, C++]\n</code></pre> <p>\ud83e\udde0 Penting! Jangan gunakan <code>daftar.remove(item)</code> saat sedang menggunakan iterator. Gunakan <code>it.remove()</code> untuk menghindari error.</p>"},{"location":"belajar-java/25-Iterator-dan-For-Each/#d-for-each-loop-enhanced-for","title":"D. For-Each Loop (Enhanced For)","text":"<p><code>For-each</code> adalah cara praktis dan bersih untuk menelusuri elemen dalam koleksi atau array.</p>"},{"location":"belajar-java/25-Iterator-dan-For-Each/#sintaks","title":"Sintaks:","text":"<pre><code>for (Tipe elemen : koleksi) {\n    // Akses elemen\n}\n</code></pre>"},{"location":"belajar-java/25-Iterator-dan-For-Each/#contoh","title":"Contoh:","text":"<pre><code>public class ContohForEach {\n    public static void main(String[] args) {\n        String[] bahasa = {\"Java\", \"Python\", \"C++\"};\n\n        for (String item : bahasa) {\n            System.out.println(item);\n        }\n    }\n}\n</code></pre> <p>Output:</p> <pre><code>Java\nPython\nC++\n</code></pre>"},{"location":"belajar-java/25-Iterator-dan-For-Each/#e-perbandingan-iterator-vs-for-each","title":"E. Perbandingan Iterator vs For-Each","text":"Fitur Iterator For-Each Akses Elemen Ya Ya Hapus Elemen Bisa (<code>iterator.remove()</code>) Tidak bisa Modifikasi Saat Iterasi Aman Tidak aman (bisa error) Sintaks Lebih kompleks Lebih ringkas &amp; clean"},{"location":"belajar-java/25-Iterator-dan-For-Each/#f-kapan-gunakan-iterator","title":"F. Kapan Gunakan Iterator?","text":"<p>Gunakan <code>Iterator</code> saat: - Kamu perlu menghapus elemen saat iterasi. - Kamu butuh kontrol penuh atas proses traversal.</p> <p>Gunakan <code>for-each</code> saat: - Kamu hanya butuh baca data saja, tanpa modifikasi.</p>"},{"location":"belajar-java/25-Iterator-dan-For-Each/#g-kesimpulan","title":"G. Kesimpulan","text":"<ul> <li><code>Iterator</code> memberi kontrol penuh dalam iterasi dan penghapusan elemen.</li> <li><code>For-each</code> cocok untuk iterasi sederhana yang clean dan readable.</li> <li>Jangan modifikasi koleksi secara langsung saat menggunakan <code>for-each</code> \u2014 bisa error!</li> </ul> <p>\ud83d\udccd Next: 18 - Exception Handling di Java </p>"},{"location":"belajar-java/26-Generic-di-Java/","title":"Generic di Java","text":"<p>Generic adalah fitur di Java yang memungkinkan kita untuk membuat kelas, interface, dan metode yang bekerja dengan berbagai tipe data (type-safe), tanpa harus menuliskannya secara eksplisit untuk setiap tipe.</p> <p>Dengan Generic, kita bisa menulis kode yang reusable, type-safe, dan lebih mudah dibaca. Fitur ini sangat sering digunakan dalam Java Collection Framework (seperti <code>ArrayList</code>, <code>HashMap</code>, dll).</p>"},{"location":"belajar-java/26-Generic-di-Java/#mengapa-menggunakan-generic","title":"\ud83e\udde0 Mengapa Menggunakan Generic?","text":"<p>Tanpa Generic, kamu harus menggunakan tipe data <code>Object</code>, yang membuatmu harus melakukan casting secara manual. Ini bisa berbahaya dan menyebabkan error saat runtime.</p> <pre><code>ArrayList list = new ArrayList();\nlist.add(\"Halo\");\nString kata = (String) list.get(0); // Harus di-cast\n</code></pre> <p>Dengan Generic:</p> <pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Halo\");\nString kata = list.get(0); // Tidak perlu casting!\n</code></pre>"},{"location":"belajar-java/26-Generic-di-Java/#contoh-kelas-generic","title":"\ud83e\uddea Contoh Kelas Generic","text":"<pre><code>public class Kotak&lt;T&gt; {\n    private T isi;\n\n    public void setIsi(T isi) {\n        this.isi = isi;\n    }\n\n    public T getIsi() {\n        return isi;\n    }\n\n    public static void main(String[] args) {\n        Kotak&lt;String&gt; kotakString = new Kotak&lt;&gt;();\n        kotakString.setIsi(\"Hello World!\");\n        System.out.println(kotakString.getIsi());\n\n        Kotak&lt;Integer&gt; kotakInteger = new Kotak&lt;&gt;();\n        kotakInteger.setIsi(100);\n        System.out.println(kotakInteger.getIsi());\n    }\n}\n</code></pre> <ul> <li><code>T</code> adalah type parameter.</li> <li>Bisa diganti dengan <code>String</code>, <code>Integer</code>, <code>Double</code>, atau bahkan class buatan sendiri.</li> </ul>"},{"location":"belajar-java/26-Generic-di-Java/#generic-method","title":"\ud83e\udde9 Generic Method","text":"<p>Kamu juga bisa membuat method yang menggunakan generic.</p> <pre><code>public class Util {\n    public static &lt;T&gt; void tampilkan(T data) {\n        System.out.println(data);\n    }\n\n    public static void main(String[] args) {\n        Util.tampilkan(\"Ini string\");\n        Util.tampilkan(123);\n        Util.tampilkan(3.14);\n    }\n}\n</code></pre>"},{"location":"belajar-java/26-Generic-di-Java/#multiple-type-parameters","title":"\ud83e\uddec Multiple Type Parameters","text":"<p>Generic bisa menggunakan lebih dari satu parameter.</p> <pre><code>public class Pair&lt;K, V&gt; {\n    private K kunci;\n    private V nilai;\n\n    public Pair(K kunci, V nilai) {\n        this.kunci = kunci;\n        this.nilai = nilai;\n    }\n\n    public void tampilkan() {\n        System.out.println(\"Kunci: \" + kunci + \", Nilai: \" + nilai);\n    }\n\n    public static void main(String[] args) {\n        Pair&lt;String, Integer&gt; pasangan = new Pair&lt;&gt;(\"Umur\", 25);\n        pasangan.tampilkan();\n    }\n}\n</code></pre>"},{"location":"belajar-java/26-Generic-di-Java/#batasan-generic-di-java","title":"\ud83d\udeab Batasan Generic di Java","text":"<p>Ada beberapa keterbatasan saat menggunakan Generic:</p> <ol> <li>Tidak bisa membuat instance dari tipe parameter:    <code>java    T obj = new T(); // ERROR!</code></li> <li>Tidak bisa membuat array dari tipe parameter:    <code>java    T[] arr = new T[10]; // ERROR!</code></li> <li>Tidak bisa menggunakan tipe primitif langsung:    <code>java    Kotak&lt;int&gt; angka; // ERROR! harus Integer</code></li> </ol>"},{"location":"belajar-java/26-Generic-di-Java/#bounded-type-parameters","title":"\ud83e\uddf1 Bounded Type Parameters","text":"<p>Kamu bisa membatasi tipe parameter agar hanya menerima tipe tertentu atau turunannya.</p> <pre><code>public class AngkaBox&lt;T extends Number&gt; {\n    private T angka;\n\n    public void setAngka(T angka) {\n        this.angka = angka;\n    }\n\n    public T getAngka() {\n        return angka;\n    }\n}\n</code></pre> <p>Contoh ini hanya menerima <code>Number</code> dan turunannya (<code>Integer</code>, <code>Double</code>, dll).</p>"},{"location":"belajar-java/26-Generic-di-Java/#kelebihan-generic","title":"\u2705 Kelebihan Generic","text":"<ul> <li>Mencegah error runtime karena kesalahan tipe</li> <li>Menghindari casting manual</li> <li>Kode lebih fleksibel dan bisa digunakan ulang</li> <li>Sangat cocok untuk struktur data dan algoritma umum</li> </ul>"},{"location":"belajar-java/26-Generic-di-Java/#penutup","title":"\ud83d\udd1a Penutup","text":"<p>Generic adalah fitur penting dan powerful di Java yang wajib kamu kuasai, terutama kalau sering bermain dengan struktur data atau ingin membuat library yang reusable. Meskipun kelihatannya ribet di awal, begitu kamu mengerti, Generic bakal jadi teman setia kamu di Java!</p> <p>Next \ud83d\udc49 27. Exception Handling</p>"},{"location":"belajar-java/27-Try%2C-Catch%2C-Finally/","title":"Try, Catch, Finally di Java","text":"<p>Dalam pemrograman, error atau exception adalah sesuatu yang tidak bisa dihindari. Java menyediakan mekanisme penanganan error yang elegan menggunakan blok <code>try</code>, <code>catch</code>, dan <code>finally</code>.</p> <p>Blok-blok ini digunakan untuk menangani exception agar program tidak langsung berhenti dan bisa menanggapi error dengan cara yang sesuai.</p>"},{"location":"belajar-java/27-Try%2C-Catch%2C-Finally/#struktur-dasar","title":"\u2699\ufe0f Struktur Dasar","text":"<pre><code>try {\n    // kode yang mungkin menyebabkan exception\n} catch (ExceptionType e) {\n    // menangani exception\n} finally {\n    // kode yang akan selalu dijalankan, entah terjadi exception atau tidak\n}\n</code></pre>"},{"location":"belajar-java/27-Try%2C-Catch%2C-Finally/#contoh-penggunaan","title":"\ud83d\udd0d Contoh Penggunaan","text":"<pre><code>public class ContohTryCatch {\n    public static void main(String[] args) {\n        try {\n            int angka = 10 / 0; // ini akan melempar ArithmeticException\n            System.out.println(\"Hasil: \" + angka);\n        } catch (ArithmeticException e) {\n            System.out.println(\"Terjadi kesalahan: \" + e.getMessage());\n        } finally {\n            System.out.println(\"Blok finally dijalankan.\");\n        }\n    }\n}\n</code></pre> <p>\ud83e\udde0 Output:</p> <pre><code>Terjadi kesalahan: / by zero\nBlok finally dijalankan.\n</code></pre>"},{"location":"belajar-java/27-Try%2C-Catch%2C-Finally/#penjelasan-blok","title":"\u2728 Penjelasan Blok","text":"<ul> <li>try: Menampung kode yang berpotensi error.</li> <li>catch: Menangkap dan menangani error yang terjadi.</li> <li>finally: Selalu dijalankan, cocok untuk menutup file, koneksi database, dll.</li> </ul>"},{"location":"belajar-java/27-Try%2C-Catch%2C-Finally/#multiple-catch","title":"\ud83c\udfa3 Multiple catch","text":"<p>Kamu bisa menggunakan beberapa blok <code>catch</code> untuk menangani berbagai jenis error.</p> <pre><code>try {\n    int[] angka = {1, 2, 3};\n    System.out.println(angka[5]);\n} catch (ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Index error: \" + e.getMessage());\n} catch (Exception e) {\n    System.out.println(\"Kesalahan umum: \" + e.getMessage());\n}\n</code></pre>"},{"location":"belajar-java/27-Try%2C-Catch%2C-Finally/#tips-penting","title":"\u26a0\ufe0f Tips Penting","text":"<ul> <li>Urutan <code>catch</code> penting! Tangkap yang spesifik dulu, baru yang umum (<code>Exception</code>).</li> <li>Gunakan <code>finally</code> untuk membersihkan resource (close file, koneksi, dsb).</li> </ul>"},{"location":"belajar-java/27-Try%2C-Catch%2C-Finally/#try-with-resources-java-7","title":"\ud83d\udcda Try with Resources (Java 7+)","text":"<p>Untuk class yang implementasi <code>AutoCloseable</code>, kamu bisa pakai:</p> <pre><code>try (Scanner sc = new Scanner(new File(\"data.txt\"))) {\n    while (sc.hasNext()) {\n        System.out.println(sc.nextLine());\n    }\n} catch (FileNotFoundException e) {\n    System.out.println(\"File tidak ditemukan!\");\n}\n</code></pre> <p>Blok ini akan otomatis menutup resource seperti file atau koneksi saat selesai.</p>"},{"location":"belajar-java/27-Try%2C-Catch%2C-Finally/#jangan-lakukan-ini","title":"\ud83d\udeab Jangan Lakukan Ini","text":"<pre><code>try {\n    // semua kode di dalam sini\n} catch (Exception e) {\n    System.out.println(\"Error\");\n}\n</code></pre> <p>Kenapa? Karena ini terlalu umum dan tidak jelas error apa yang ditangani. Tangani exception secara spesifik!</p>"},{"location":"belajar-java/27-Try%2C-Catch%2C-Finally/#kesimpulan","title":"\u2705 Kesimpulan","text":"<p>Blok <code>try-catch-finally</code> bikin program kamu lebih tangguh dalam menghadapi error. Jangan takut sama error \u2014 peluk, pahami, dan tangani mereka dengan bijak!</p> <p>Next \ud83d\udc49 28. Exception Handling Lanjutan</p>"},{"location":"belajar-java/28-Multiple-Catch-dan-Nested-Try/","title":"Multiple Catch dan Nested Try di Java","text":"<p>Setiap kemungkinan error bisa datang dari arah yang berbeda \u2014 kayak mantan yang masih suka chat tengah malam. \ud83d\ude05 Untungnya, Java menyediakan cara buat menangani beragam error lewat multiple <code>catch</code> dan juga nested <code>try</code>, alias <code>try</code> di dalam <code>try</code>.</p>"},{"location":"belajar-java/28-Multiple-Catch-dan-Nested-Try/#multiple-catch","title":"\ud83e\uddf2 Multiple Catch","text":"<p>Kamu bisa punya lebih dari satu <code>catch</code> untuk menangani exception yang berbeda jenis.</p>"},{"location":"belajar-java/28-Multiple-Catch-dan-Nested-Try/#contoh","title":"Contoh:","text":"<pre><code>public class MultiCatch {\n    public static void main(String[] args) {\n        try {\n            int[] data = {1, 2, 3};\n            System.out.println(data[5]); // Akan men-trigger ArrayIndexOutOfBoundsException\n            int x = 10 / 0; // Akan men-trigger ArithmeticException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"Index array tidak valid: \" + e.getMessage());\n        } catch (ArithmeticException e) {\n            System.out.println(\"Terjadi pembagian dengan nol: \" + e.getMessage());\n        } catch (Exception e) {\n            System.out.println(\"Exception lain: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>\ud83e\udde0 Catatan: - Urutkan dari yang paling spesifik ke umum. - <code>Exception</code> yang paling umum ditaruh paling akhir.</p>"},{"location":"belajar-java/28-Multiple-Catch-dan-Nested-Try/#multi-catch-java-7","title":"\ud83c\udfaf Multi-catch (Java 7+)","text":"<p>Sejak Java 7, kamu bisa menangani beberapa exception dalam satu baris.</p> <pre><code>try {\n    String text = null;\n    System.out.println(text.length()); // NullPointerException\n} catch (NullPointerException | ArithmeticException e) {\n    System.out.println(\"Terjadi error: \" + e.getClass().getSimpleName());\n}\n</code></pre> <p>\ud83d\uded1 Tidak bisa mengakses <code>e</code> jika kamu ingin memodifikasinya karena bersifat final secara implisit.</p>"},{"location":"belajar-java/28-Multiple-Catch-dan-Nested-Try/#nested-try-try-di-dalam-try","title":"\ud83e\udde9 Nested Try (Try di dalam Try)","text":"<p>Kadang kamu perlu nested <code>try</code>, misalnya saat satu bagian dalam blok besar juga punya kemungkinan error yang berbeda.</p> <pre><code>public class NestedTry {\n    public static void main(String[] args) {\n        try {\n            int[] angka = new int[3];\n\n            try {\n                angka[4] = 10; // error\n            } catch (ArrayIndexOutOfBoundsException e) {\n                System.out.println(\"Error dalam try dalam: \" + e);\n            }\n\n            int hasil = 10 / 0; // error\n        } catch (ArithmeticException e) {\n            System.out.println(\"Error di try luar: \" + e);\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/28-Multiple-Catch-dan-Nested-Try/#kapan-gunakan-nested-try","title":"\ud83e\udde0 Kapan Gunakan Nested Try?","text":"<ul> <li>Saat kamu punya beberapa proses berurutan, dan masing-masing bisa error sendiri-sendiri.</li> <li>Buat isolasi penanganan error dalam scope kecil.</li> <li>Kalau terlalu banyak nested try \u2192 pertimbangkan refactor jadi method terpisah (biar gak bikin pala mumet).</li> </ul>"},{"location":"belajar-java/28-Multiple-Catch-dan-Nested-Try/#kesimpulan","title":"\u2705 Kesimpulan","text":"<ul> <li>Multiple catch cocok untuk menangani banyak jenis exception.</li> <li>Multi-catch bisa bikin kode lebih singkat (Java 7+).</li> <li>Nested try cocok untuk menangani error yang lebih spesifik di dalam proses kompleks.</li> </ul> <p>Next \ud83d\udc49 29. Throw dan Throws</p>"},{"location":"belajar-java/29-Throw-dan-Throws/","title":"Throw dan Throws di Java","text":"<p>Java nggak cuma bisa menangkap error, tapi juga bisa melempar error sendiri pake <code>throw</code>. Mirip kayak kamu ngelempar pertanyaan ke dosen yang jawabannya... malah makin bikin bingung. \ud83d\ude05</p>"},{"location":"belajar-java/29-Throw-dan-Throws/#apa-itu-throw","title":"\ud83d\ude80 Apa itu <code>throw</code>?","text":"<p><code>throw</code> digunakan untuk melempar exception secara manual.</p> <pre><code>throw new ExceptionType(\"Pesan error\");\n</code></pre> <p>Contoh:</p> <pre><code>public class DemoThrow {\n    public static void main(String[] args) {\n        int umur = 10;\n\n        if (umur &lt; 18) {\n            throw new ArithmeticException(\"Umur belum cukup untuk daftar.\");\n        }\n\n        System.out.println(\"Pendaftaran berhasil.\");\n    }\n}\n</code></pre> <p>\ud83e\udde0 Output:</p> <pre><code>Exception in thread \"main\" java.lang.ArithmeticException: Umur belum cukup untuk daftar.\n</code></pre>"},{"location":"belajar-java/29-Throw-dan-Throws/#apa-itu-throws","title":"\ud83d\udce6 Apa itu <code>throws</code>?","text":"<p><code>throws</code> digunakan untuk mendeklarasikan bahwa method bisa melempar exception.</p> <pre><code>void namaMethod() throws ExceptionType {\n    // kode\n}\n</code></pre> <p>Contoh:</p> <pre><code>public class DemoThrows {\n    static void cekUmur(int umur) throws Exception {\n        if (umur &lt; 18) {\n            throw new Exception(\"Umur kurang dari 18 tahun.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            cekUmur(15);\n        } catch (Exception e) {\n            System.out.println(\"Terjadi error: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/29-Throw-dan-Throws/#perbedaan-throw-vs-throws","title":"\ud83c\udfaf Perbedaan <code>throw</code> vs <code>throws</code>","text":"Fitur <code>throw</code> <code>throws</code> Fungsi Melempar exception Mendeklarasikan kemungkinan error Penempatan Di dalam method Di deklarasi method Objek Diikuti oleh objek exception Diikuti oleh nama class exception Jumlah Hanya satu Bisa banyak (dipisah koma)"},{"location":"belajar-java/29-Throw-dan-Throws/#tips-penggunaan","title":"\ud83e\udde0 Tips Penggunaan","text":"<ul> <li><code>throw</code> = lempar exception langsung.</li> <li><code>throws</code> = peringatan ke pemanggil method bahwa method ini bisa error.</li> <li>Gunakan untuk membuat program lebih aman, dan terkontrol error-nya.</li> </ul>"},{"location":"belajar-java/29-Throw-dan-Throws/#contoh-custom-exception-throw","title":"\ud83d\udee0\ufe0f Contoh: Custom Exception + Throw","text":"<pre><code>class UmurException extends Exception {\n    public UmurException(String pesan) {\n        super(pesan);\n    }\n}\n\npublic class DemoCustom {\n    static void daftar(int umur) throws UmurException {\n        if (umur &lt; 18) {\n            throw new UmurException(\"Umur terlalu muda!\");\n        }\n        System.out.println(\"Berhasil daftar.\");\n    }\n\n    public static void main(String[] args) {\n        try {\n            daftar(16);\n        } catch (UmurException e) {\n            System.out.println(\"Gagal daftar: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/29-Throw-dan-Throws/#kesimpulan","title":"\u2705 Kesimpulan","text":"<ul> <li>Gunakan <code>throw</code> untuk melempar exception secara manual.</li> <li>Gunakan <code>throws</code> untuk menyatakan bahwa method bisa menimbulkan exception.</li> <li>Cocok dipakai saat ingin kontrol penuh terhadap error \u2014 especially saat bikin library, API, atau logic kompleks.</li> </ul> <p>Next \ud83d\udc49 30. Membuat Custom Exception di Java</p>"},{"location":"belajar-java/30-Custom-Exception/","title":"Membuat Custom Exception di Java","text":"<p>Kadang, exception bawaan Java aja nggak cukup buat ngegambarin error yang kamu mau. Misalnya: \u201c<code>DataGajiBelumDihitungException</code>\u201d atau \u201c<code>BlokKebunTidakDitemukanException</code>\u201d.</p> <p>Nah, di sinilah Custom Exception beraksi. Kamu bisa bikin class exception sendiri yang sesuai konteks aplikasi kamu!</p>"},{"location":"belajar-java/30-Custom-Exception/#cara-membuat-custom-exception","title":"\ud83c\udfa8 Cara Membuat Custom Exception","text":""},{"location":"belajar-java/30-Custom-Exception/#1-extend-dari-exception-atau-runtimeexception","title":"1. Extend dari <code>Exception</code> atau <code>RuntimeException</code>","text":"<ul> <li><code>Exception</code>: checked exception \u2192 harus ditangani (<code>try-catch</code> atau <code>throws</code>)</li> <li><code>RuntimeException</code>: unchecked \u2192 bisa ditangani, tapi tidak wajib</li> </ul>"},{"location":"belajar-java/30-Custom-Exception/#contoh-custom-checked-exception","title":"Contoh: Custom Checked Exception","text":"<pre><code>class GajiBelumDihitungException extends Exception {\n    public GajiBelumDihitungException(String pesan) {\n        super(pesan);\n    }\n}\n</code></pre>"},{"location":"belajar-java/30-Custom-Exception/#penggunaan","title":"Penggunaan:","text":"<pre><code>public class GajiService {\n    public static void cekGaji(boolean sudahHitung) throws GajiBelumDihitungException {\n        if (!sudahHitung) {\n            throw new GajiBelumDihitungException(\"Gaji belum dihitung, bos!\");\n        }\n        System.out.println(\"Gaji sudah siap ditransfer \ud83d\udcb8\");\n    }\n\n    public static void main(String[] args) {\n        try {\n            cekGaji(false);\n        } catch (GajiBelumDihitungException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/30-Custom-Exception/#contoh-custom-unchecked-exception","title":"Contoh: Custom Unchecked Exception","text":"<pre><code>class DataInvalidException extends RuntimeException {\n    public DataInvalidException(String pesan) {\n        super(pesan);\n    }\n}\n</code></pre> <pre><code>public class ValidasiService {\n    public static void validasiNama(String nama) {\n        if (nama == null || nama.isEmpty()) {\n            throw new DataInvalidException(\"Nama tidak boleh kosong.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        validasiNama(\"\"); // akan error\n    }\n}\n</code></pre>"},{"location":"belajar-java/30-Custom-Exception/#kenapa-perlu-custom-exception","title":"\ud83d\ude80 Kenapa Perlu Custom Exception?","text":"<ul> <li>\u2728 Lebih deskriptif dan sesuai konteks aplikasi kamu.</li> <li>\ud83d\udca1 Mudah untuk debugging dan logging.</li> <li>\ud83d\udd12 Membantu validasi dan aturan bisnis (misalnya validasi input, status transaksi, dll).</li> </ul>"},{"location":"belajar-java/30-Custom-Exception/#best-practices","title":"\ud83d\udccc Best Practices","text":"<ul> <li>Gunakan suffix <code>Exception</code> di akhir nama class.</li> <li>Tambahkan constructor yang menerima pesan (<code>String</code>) dan/atau throwable lainnya.</li> <li>Gunakan <code>RuntimeException</code> untuk error yang tidak wajib ditangani langsung (tapi tetap harus logis).</li> <li>Simpan di package khusus misalnya <code>com.namaapp.exceptions</code>.</li> </ul>"},{"location":"belajar-java/30-Custom-Exception/#kesimpulan","title":"\u2705 Kesimpulan","text":"<p>Custom exception bikin aplikasi kamu: - Lebih rapi dan readable. - Lebih mudah maintenance. - Lebih profesional (terlihat paham arsitektur dan error handling \ud83d\ude0e).</p> <p>Next \ud83d\udc49 31. File I/O Dasar di Java</p>"},{"location":"belajar-java/31-Scanner-dan-BufferedReader/","title":"Scanner dan BufferedReader di Java","text":"<p>Kalau kamu mau ngambil input dari pengguna di Java, ada dua pendekatan paling sering dipakai:</p> <ol> <li><code>Scanner</code> \u2192 simpel dan banyak dipakai di project kecil-menengah</li> <li><code>BufferedReader</code> \u2192 lebih efisien, cocok buat input besar</li> </ol>"},{"location":"belajar-java/31-Scanner-dan-BufferedReader/#scanner-simple-dan-straightforward","title":"\ud83d\udd0d Scanner: Simple dan Straightforward","text":"<p>Scanner cocok buat kamu yang baru mulai dan pengen cepat dapat hasil.</p>"},{"location":"belajar-java/31-Scanner-dan-BufferedReader/#import-dulu","title":"Import Dulu:","text":"<pre><code>import java.util.Scanner;\n</code></pre>"},{"location":"belajar-java/31-Scanner-dan-BufferedReader/#contoh-penggunaan","title":"Contoh Penggunaan:","text":"<pre><code>import java.util.Scanner;\n\npublic class InputScanner {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Masukkan nama kamu: \");\n        String nama = input.nextLine();\n\n        System.out.print(\"Masukkan umur kamu: \");\n        int umur = input.nextInt();\n\n        System.out.println(\"Halo \" + nama + \", umurmu \" + umur + \" tahun.\");\n    }\n}\n</code></pre>"},{"location":"belajar-java/31-Scanner-dan-BufferedReader/#bufferedreader-lebih-cepat-dan-efisien","title":"\u26a1 BufferedReader: Lebih Cepat dan Efisien","text":"<p>Lebih ribet dikit, tapi powerful. Biasanya dipakai kalau kamu mau baca data besar atau performa penting.</p>"},{"location":"belajar-java/31-Scanner-dan-BufferedReader/#import-dulu_1","title":"Import Dulu:","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\n</code></pre>"},{"location":"belajar-java/31-Scanner-dan-BufferedReader/#contoh-penggunaan_1","title":"Contoh Penggunaan:","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\n\npublic class InputBuffered {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n        System.out.print(\"Masukkan nama kamu: \");\n        String nama = reader.readLine();\n\n        System.out.print(\"Masukkan umur kamu: \");\n        int umur = Integer.parseInt(reader.readLine());\n\n        System.out.println(\"Halo \" + nama + \", umurmu \" + umur + \" tahun.\");\n    }\n}\n</code></pre>"},{"location":"belajar-java/31-Scanner-dan-BufferedReader/#scanner-vs-bufferedreader","title":"\ud83e\udde0 Scanner vs BufferedReader","text":"Fitur Scanner BufferedReader Kemudahan Sangat mudah Sedikit lebih kompleks Kecepatan Lebih lambat Lebih cepat dan efisien Parsingan angka Langsung (<code>nextInt()</code>, dll) Harus parsing manual Cocok untuk Program kecil, interaktif Program besar, input skala besar"},{"location":"belajar-java/31-Scanner-dan-BufferedReader/#kesimpulan","title":"\u2705 Kesimpulan","text":"<ul> <li>Gunakan <code>Scanner</code> kalau kamu bikin app kecil, atau mau interaktif CLI.</li> <li>Gunakan <code>BufferedReader</code> kalau kamu butuh efisiensi tinggi (misal baca file besar, input masif).</li> <li>Dua-duanya sering muncul di soal-soal coding test dan kompetisi juga, jadi wajib kenal dua-duanya! \ud83d\udcaa</li> </ul> <p>Next \ud83d\udc49 32. File I/O Dasar di Java</p>"},{"location":"belajar-java/32-Menulis-dan-Membaca-File/","title":"Menulis dan Membaca File di Java","text":"<p>Di dunia nyata (dan dunia coding), kamu pasti akan butuh menyimpan dan membaca data ke/dari file. Misalnya: laporan panen, data pekerja, log absensi, dsb.</p> <p>Java punya tools bawaan buat ini, yaitu: - <code>FileWriter</code> &amp; <code>BufferedWriter</code> \u2192 untuk menulis file - <code>FileReader</code> &amp; <code>BufferedReader</code> \u2192 untuk membaca file</p>"},{"location":"belajar-java/32-Menulis-dan-Membaca-File/#menulis-file-write-to-file","title":"\u270d\ufe0f Menulis File (Write to File)","text":""},{"location":"belajar-java/32-Menulis-dan-Membaca-File/#contoh-1-pakai-filewriter-langsung-tulis","title":"Contoh 1: Pakai <code>FileWriter</code> (langsung tulis)","text":"<pre><code>import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class TulisFile {\n    public static void main(String[] args) {\n        try {\n            FileWriter writer = new FileWriter(\"data.txt\");\n            writer.write(\"Data panen sawit hari ini\\n\");\n            writer.write(\"Blok A1: 123 kg\\nBlok A2: 150 kg\\n\");\n            writer.close();\n            System.out.println(\"File berhasil ditulis!\");\n        } catch (IOException e) {\n            System.out.println(\"Terjadi error: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/32-Menulis-dan-Membaca-File/#membaca-file-read-from-file","title":"\ud83d\udcd6 Membaca File (Read from File)","text":""},{"location":"belajar-java/32-Menulis-dan-Membaca-File/#contoh-2-pakai-bufferedreader","title":"Contoh 2: Pakai <code>BufferedReader</code>","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class BacaFile {\n    public static void main(String[] args) {\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(\"data.txt\"));\n            String baris;\n\n            while ((baris = reader.readLine()) != null) {\n                System.out.println(baris);\n            }\n\n            reader.close();\n        } catch (IOException e) {\n            System.out.println(\"Gagal membaca file: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/32-Menulis-dan-Membaca-File/#tips-dan-best-practices","title":"\ud83d\udee1\ufe0f Tips dan Best Practices","text":"<ul> <li>Selalu tutup file (<code>close()</code>) setelah dipakai biar nggak boros resource.</li> <li>Gunakan <code>try-with-resources</code> (Java 7+) buat auto-close file.</li> <li>Cek apakah file sudah ada sebelum menimpa.</li> <li>Gunakan folder khusus untuk menyimpan file produksi.</li> </ul>"},{"location":"belajar-java/32-Menulis-dan-Membaca-File/#bonus-append-menambah-isi-tanpa-menghapus-sebelumnya","title":"\u2728 Bonus: Append (Menambah isi tanpa menghapus sebelumnya)","text":"<pre><code>FileWriter writer = new FileWriter(\"data.txt\", true); // true = append mode\nwriter.write(\"Blok B1: 98 kg\\n\");\n</code></pre>"},{"location":"belajar-java/32-Menulis-dan-Membaca-File/#studi-kasus-cepat-rekap-panen-harian","title":"\ud83d\udd25 Studi Kasus Cepat: Rekap Panen Harian","text":"<pre><code>import java.io.FileWriter;\nimport java.util.Scanner;\n\npublic class PanenHarian {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Masukkan nama pekerja: \");\n        String nama = input.nextLine();\n\n        System.out.print(\"Berat panen hari ini (kg): \");\n        int berat = input.nextInt();\n\n        try {\n            FileWriter writer = new FileWriter(\"rekap-panen.txt\", true);\n            writer.write(nama + \": \" + berat + \" kg\\n\");\n            writer.close();\n            System.out.println(\"Rekap berhasil ditambahkan!\");\n        } catch (Exception e) {\n            System.out.println(\"Gagal menulis rekap: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/32-Menulis-dan-Membaca-File/#kesimpulan","title":"\u2705 Kesimpulan","text":"<ul> <li>Java menyediakan API lengkap untuk baca/tulis file.</li> <li>Cocok banget buat bikin sistem lokal kayak rekap harian panen sawit.</li> <li>Pahami konsep ini karena sering banget dipakai di dunia nyata dan interview kerja!</li> </ul> <p>Next \ud83d\udc49 33. File dan Directory: Cek, Buat, Hapus</p>"},{"location":"belajar-java/33-Serialization-dan-Deserialization/","title":"Serialization dan Deserialization di Java","text":"<p>Serialization itu kayak nge-freeze object di Java jadi bentuk data (biasanya byte stream), lalu disimpan ke file atau dikirim lewat jaringan. Deserialization itu kebalikannya: nge-unfreeze (membangkitkan) object dari data byte tadi.</p> <p>\u2728 Gunanya? Supaya object bisa disimpan atau dikirim dan digunakan lagi di waktu lain.</p>"},{"location":"belajar-java/33-Serialization-dan-Deserialization/#serialization-di-java","title":"\ud83e\uddca Serialization di Java","text":"<p>Untuk melakukan serialization, class harus mengimplementasikan interface <code>Serializable</code>.</p>"},{"location":"belajar-java/33-Serialization-dan-Deserialization/#contoh-class","title":"Contoh Class:","text":"<pre><code>import java.io.Serializable;\n\npublic class Mahasiswa implements Serializable {\n    private String nama;\n    private int umur;\n\n    public Mahasiswa(String nama, int umur) {\n        this.nama = nama;\n        this.umur = umur;\n    }\n\n    public String getNama() {\n        return nama;\n    }\n\n    public int getUmur() {\n        return umur;\n    }\n}\n</code></pre>"},{"location":"belajar-java/33-Serialization-dan-Deserialization/#menyimpan-object-ke-file","title":"Menyimpan Object ke File:","text":"<pre><code>import java.io.FileOutputStream;\nimport java.io.ObjectOutputStream;\n\npublic class SimpanObject {\n    public static void main(String[] args) {\n        try {\n            Mahasiswa mhs = new Mahasiswa(\"Rudi\", 20);\n\n            FileOutputStream fos = new FileOutputStream(\"mahasiswa.ser\");\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n\n            oos.writeObject(mhs);\n\n            oos.close();\n            fos.close();\n\n            System.out.println(\"Object berhasil diserialisasi ke file.\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/33-Serialization-dan-Deserialization/#deserialization-di-java","title":"\ud83d\udd04 Deserialization di Java","text":""},{"location":"belajar-java/33-Serialization-dan-Deserialization/#membaca-object-dari-file","title":"Membaca Object dari File:","text":"<pre><code>import java.io.FileInputStream;\nimport java.io.ObjectInputStream;\n\npublic class BacaObject {\n    public static void main(String[] args) {\n        try {\n            FileInputStream fis = new FileInputStream(\"mahasiswa.ser\");\n            ObjectInputStream ois = new ObjectInputStream(fis);\n\n            Mahasiswa mhs = (Mahasiswa) ois.readObject();\n\n            ois.close();\n            fis.close();\n\n            System.out.println(\"Nama: \" + mhs.getNama());\n            System.out.println(\"Umur: \" + mhs.getUmur());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/33-Serialization-dan-Deserialization/#catatan-penting","title":"\u26a0\ufe0f Catatan Penting","text":"<ul> <li>Semua field dalam object juga harus <code>Serializable</code>. Kalau tidak, tandai dengan <code>transient</code>.</li> <li>File hasil serialization disimpan dalam format <code>.ser</code>, tapi bisa juga <code>.dat</code>, <code>.bin</code>, dll.</li> </ul>"},{"location":"belajar-java/33-Serialization-dan-Deserialization/#contoh-field-transient","title":"Contoh Field <code>transient</code>:","text":"<pre><code>private transient String password;\n</code></pre> <p>Field ini tidak akan diserialisasi \u2014 cocok buat info sensitif!</p>"},{"location":"belajar-java/33-Serialization-dan-Deserialization/#kesimpulan","title":"\u2705 Kesimpulan","text":"Topik Serialization Tujuan Simpan / kirim object sebagai data Interface wajib <code>java.io.Serializable</code> Format file .ser, .bin, dll Proses lawan Deserialization (membangkitkan object kembali) <p>Serialization ini sering kepake buat: - Simpan sesi pengguna - Cache object - Pengiriman object lewat jaringan</p> <p>Next \ud83d\udc49 34. Java Collections Framework (List, Set, Map)</p>"},{"location":"belajar-java/34-Thread-Class-dan-Runnable-Interface/","title":"Thread Class dan Runnable Interface di Java","text":"<p>Java itu mendukung multithreading, yang artinya kamu bisa menjalankan beberapa bagian dari program secara bersamaan. Fitur ini penting banget kalau kamu pengen program lebih responsif, efisien, dan cepat. Contohnya: aplikasi yang ngurus input pengguna sambil ngelakuin proses berat di belakang layar.</p> <p>Ada dua cara untuk membuat thread di Java: 1. Menggunakan <code>Thread</code> class 2. Menggunakan <code>Runnable</code> interface</p>"},{"location":"belajar-java/34-Thread-Class-dan-Runnable-Interface/#membuat-thread-dengan-thread-class","title":"\ud83d\ude80 Membuat Thread dengan <code>Thread</code> Class","text":"<p>Cara yang paling simpel, kamu tinggal extend class <code>Thread</code> dan override method <code>run()</code>.</p>"},{"location":"belajar-java/34-Thread-Class-dan-Runnable-Interface/#contoh-penggunaan-thread-class","title":"Contoh Penggunaan <code>Thread</code> Class:","text":"<pre><code>class TugasA extends Thread {\n    public void run() {\n        System.out.println(\"Tugas A sedang dikerjakan...\");\n        try {\n            Thread.sleep(2000); // Simulasi tugas yang memakan waktu\n        } catch (InterruptedException e) {\n            System.out.println(e);\n        }\n        System.out.println(\"Tugas A selesai.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        TugasA threadA = new TugasA();\n        threadA.start(); // Memulai thread\n    }\n}\n</code></pre>"},{"location":"belajar-java/34-Thread-Class-dan-Runnable-Interface/#membuat-thread-dengan-runnable-interface","title":"\ud83c\udfaf Membuat Thread dengan <code>Runnable</code> Interface","text":"<p>Kadang kamu perlu implementasi yang lebih fleksibel, terutama kalau class yang sudah ada tidak bisa extend <code>Thread</code>. Solusinya? Gunakan <code>Runnable</code>.</p>"},{"location":"belajar-java/34-Thread-Class-dan-Runnable-Interface/#langkah-langkah","title":"Langkah-langkah:","text":"<ol> <li>Implementasikan <code>Runnable</code>.</li> <li>Buat objek <code>Thread</code> yang menjalankan <code>Runnable</code>.</li> <li>Panggil <code>start()</code> pada thread.</li> </ol>"},{"location":"belajar-java/34-Thread-Class-dan-Runnable-Interface/#contoh-penggunaan-runnable","title":"Contoh Penggunaan <code>Runnable</code>:","text":"<pre><code>class TugasB implements Runnable {\n    public void run() {\n        System.out.println(\"Tugas B sedang dikerjakan...\");\n        try {\n            Thread.sleep(2000); // Simulasi tugas\n        } catch (InterruptedException e) {\n            System.out.println(e);\n        }\n        System.out.println(\"Tugas B selesai.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        TugasB tugasB = new TugasB();\n        Thread threadB = new Thread(tugasB);\n        threadB.start(); // Memulai thread\n    }\n}\n</code></pre>"},{"location":"belajar-java/34-Thread-Class-dan-Runnable-Interface/#thread-lifecycle-siklus-thread","title":"\ud83d\udd27 Thread Lifecycle (Siklus Thread)","text":"<p>Thread di Java memiliki siklus hidup tertentu, yaitu: 1. New: Thread dibuat, tapi belum dijalankan. 2. Runnable: Thread siap untuk dieksekusi (meskipun belum mulai). 3. Blocked: Thread sedang menunggu akses ke resource. 4. Waiting: Thread sedang menunggu perintah lainnya (misalnya, <code>sleep</code>). 5. Terminated: Thread selesai menjalankan tugasnya.</p>"},{"location":"belajar-java/34-Thread-Class-dan-Runnable-Interface/#thread-synchronization","title":"\u23f1\ufe0f Thread Synchronization","text":"<p>Kadang, dua thread butuh akses ke resource yang sama. Untuk mencegah race condition (saat dua thread mengubah data yang sama secara bersamaan), kita pakai <code>synchronized</code>.</p>"},{"location":"belajar-java/34-Thread-Class-dan-Runnable-Interface/#contoh-penggunaan-synchronized","title":"Contoh Penggunaan <code>synchronized</code>:","text":"<pre><code>class Counter {\n    private int count = 0;\n\n    // synchronized method untuk memastikan akses satu per satu\n    public synchronized void increment() {\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Counter counter = new Counter();\n\n        // Thread pertama\n        Thread t1 = new Thread(() -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                counter.increment();\n            }\n        });\n\n        // Thread kedua\n        Thread t2 = new Thread(() -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                counter.increment();\n            }\n        });\n\n        t1.start();\n        t2.start();\n\n        try {\n            t1.join();  // Menunggu thread t1 selesai\n            t2.join();  // Menunggu thread t2 selesai\n        } catch (InterruptedException e) {\n            System.out.println(e);\n        }\n\n        System.out.println(\"Counter akhir: \" + counter.getCount());\n    }\n}\n</code></pre>"},{"location":"belajar-java/34-Thread-Class-dan-Runnable-Interface/#kesimpulan","title":"\u2705 Kesimpulan","text":"<ul> <li>Thread memungkinkan multitasking dalam Java, penting banget buat aplikasi yang butuh performa tinggi dan interaktif.</li> <li>Kamu bisa pilih Thread class atau Runnable interface tergantung kebutuhan. Kalau butuh multiple inheritance atau lebih fleksibel, pilih <code>Runnable</code>.</li> <li>Jangan lupa pakai synchronization kalau beberapa thread bakal akses resource yang sama untuk menghindari bug.</li> </ul> <p>Next \ud83d\udc49 35. Executor Service dan Thread Pool di Java</p>"},{"location":"belajar-java/35-Synchronized-dan-Lock/","title":"Synchronized dan Lock di Java","text":"<p>Multithreading itu seru, tapi bisa bikin pusing kalau dua atau lebih thread saling berebut akses ke resource yang sama. Salah satu cara untuk mengatasi masalah ini adalah dengan menggunakan synchronization dan locks. Keduanya memastikan bahwa hanya satu thread yang bisa mengakses resource pada waktu tertentu. Tapi ada perbedaan penting antara keduanya.</p>"},{"location":"belajar-java/35-Synchronized-dan-Lock/#synchronized-keyword","title":"\ud83d\udd12 <code>synchronized</code> Keyword","text":"<p>Keyword <code>synchronized</code> digunakan untuk memastikan bahwa hanya satu thread yang bisa mengakses method atau blok kode tertentu pada waktu yang bersamaan.</p>"},{"location":"belajar-java/35-Synchronized-dan-Lock/#menggunakan-synchronized-pada-method","title":"Menggunakan <code>synchronized</code> pada Method","text":"<p>Kamu bisa menambahkan keyword <code>synchronized</code> pada method untuk memastikan hanya satu thread yang bisa menjalankan method tersebut di suatu waktu.</p> <pre><code>class Counter {\n    private int count = 0;\n\n    // synchronized method\n    public synchronized void increment() {\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Counter counter = new Counter();\n\n        // Membuat thread yang mengakses increment()\n        Thread t1 = new Thread(() -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                counter.increment();\n            }\n        });\n\n        Thread t2 = new Thread(() -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                counter.increment();\n            }\n        });\n\n        t1.start();\n        t2.start();\n\n        try {\n            t1.join();  // Menunggu t1 selesai\n            t2.join();  // Menunggu t2 selesai\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Counter akhir: \" + counter.getCount());\n    }\n}\n</code></pre> <p>Dengan <code>synchronized</code>, kita pastikan bahwa hanya satu thread yang bisa mengakses method <code>increment</code> pada satu waktu.</p>"},{"location":"belajar-java/35-Synchronized-dan-Lock/#synchronized-pada-block-kode","title":"\ud83d\udd12 <code>synchronized</code> pada Block Kode","text":"<p>Jika hanya bagian tertentu dari method yang perlu disinkronkan, kamu bisa menggunakan blok <code>synchronized</code> di dalam method. Ini lebih efisien, karena hanya blok tertentu yang dikunci, bukan seluruh method.</p> <pre><code>class Counter {\n    private int count = 0;\n\n    public void increment() {\n        synchronized (this) {  // Kunci hanya bagian ini\n            count++;\n        }\n    }\n\n    public int getCount() {\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Counter counter = new Counter();\n\n        // Membuat thread yang mengakses increment()\n        Thread t1 = new Thread(() -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                counter.increment();\n            }\n        });\n\n        Thread t2 = new Thread(() -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                counter.increment();\n            }\n        });\n\n        t1.start();\n        t2.start();\n\n        try {\n            t1.join();  // Menunggu t1 selesai\n            t2.join();  // Menunggu t2 selesai\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Counter akhir: \" + counter.getCount());\n    }\n}\n</code></pre> <p>Di sini, hanya bagian kode dalam blok <code>synchronized</code> yang dijaga aksesnya, jadi lebih efisien daripada menyinkronkan seluruh method.</p>"},{"location":"belajar-java/35-Synchronized-dan-Lock/#lock-interface","title":"\ud83d\udd11 <code>Lock</code> Interface","text":"<p>Selain <code>synchronized</code>, Java juga menyediakan mekanisme locking yang lebih fleksibel menggunakan interface <code>Lock</code> yang ada di package <code>java.util.concurrent.locks</code>. Salah satu implementasinya adalah <code>ReentrantLock</code>.</p>"},{"location":"belajar-java/35-Synchronized-dan-Lock/#keuntungan-lock-dibandingkan-synchronized","title":"Keuntungan <code>Lock</code> dibandingkan <code>synchronized</code>:","text":"<ul> <li>Lebih fleksibel karena kamu bisa mengontrol kapan lock diambil dan dilepaskan.</li> <li>Dukung try-lock, sehingga bisa mencoba untuk mengambil lock tanpa menunggu lama.</li> <li>Bisa dipakai untuk multiple locks yang lebih kompleks.</li> </ul>"},{"location":"belajar-java/35-Synchronized-dan-Lock/#contoh-penggunaan-reentrantlock","title":"Contoh Penggunaan <code>ReentrantLock</code>:","text":"<pre><code>import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\nclass Counter {\n    private int count = 0;\n    private final Lock lock = new ReentrantLock();\n\n    public void increment() {\n        lock.lock();  // Ambil lock\n        try {\n            count++;\n        } finally {\n            lock.unlock();  // Lepas lock\n        }\n    }\n\n    public int getCount() {\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Counter counter = new Counter();\n\n        // Membuat thread yang mengakses increment()\n        Thread t1 = new Thread(() -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                counter.increment();\n            }\n        });\n\n        Thread t2 = new Thread(() -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                counter.increment();\n            }\n        });\n\n        t1.start();\n        t2.start();\n\n        try {\n            t1.join();  // Menunggu t1 selesai\n            t2.join();  // Menunggu t2 selesai\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Counter akhir: \" + counter.getCount());\n    }\n}\n</code></pre>"},{"location":"belajar-java/35-Synchronized-dan-Lock/#perbedaan-synchronized-dan-lock","title":"\ud83d\udccf Perbedaan <code>synchronized</code> dan <code>Lock</code>","text":"Fitur <code>synchronized</code> <code>Lock</code> (ReentrantLock) Kunci otomatis Ya Tidak, harus manual (<code>lock()</code> dan <code>unlock()</code>) Deadlock protection Tidak ada Bisa menghindari deadlock dengan <code>tryLock()</code> Dapat diinterrupt Tidak bisa, blocking Bisa diinterrupt dengan <code>lockInterruptibly()</code> Dapat mencoba lock Tidak Ya, dengan <code>tryLock()</code>"},{"location":"belajar-java/35-Synchronized-dan-Lock/#kesimpulan","title":"\u2705 Kesimpulan","text":"<ul> <li><code>synchronized</code> itu sederhana dan mudah dipakai untuk mengunci method atau blok kode, tapi kurang fleksibel kalau dibutuhkan kontrol lebih.</li> <li><code>Lock</code> memberikan kontrol lebih baik, seperti mencoba mengambil lock tanpa menunggu atau mengambil beberapa lock sekaligus.</li> </ul> <p>Jika aplikasi kamu butuh kontrol yang lebih ketat dan kompleks terhadap concurrency, gunakan <code>Lock</code>. Tapi kalau cukup dengan mengunci method atau blok sederhana, <code>synchronized</code> sudah cukup.</p> <p>Next \ud83d\udc49 36. Executor Service dan Thread Pool di Java</p>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/","title":"Thread Pool dan ExecutorService di Java","text":"<p>Pada saat bekerja dengan banyak thread, menciptakan thread baru untuk setiap tugas bisa menjadi tidak efisien, apalagi kalau jumlah threadnya sangat banyak. Di sinilah Thread Pool dan ExecutorService berperan. Keduanya membantu kita untuk mengelola dan mengatur eksekusi thread dengan lebih efisien.</p>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#apa-itu-thread-pool","title":"\ud83d\udd04 Apa itu Thread Pool?","text":"<p>Thread Pool adalah kumpulan thread yang sudah ada dan siap untuk digunakan kembali. Alih-alih membuat thread baru untuk setiap tugas, kita bisa menggunakan thread yang sudah ada di pool. Dengan cara ini, kita bisa menghindari overhead pembuatan dan penghancuran thread, serta memastikan bahwa sistem kita tetap responsif meskipun ada banyak tugas yang harus dijalankan secara paralel.</p>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#executorservice","title":"\ud83d\ude80 ExecutorService","text":"<p>ExecutorService adalah interface yang menyediakan cara untuk mengelola dan menjalankan task (pekerjaan) pada thread pool. Ada beberapa implementasi dari interface ini, salah satunya adalah ThreadPoolExecutor, yang paling sering digunakan.</p>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#membuat-executorservice","title":"Membuat ExecutorService","text":"<p>Untuk membuat <code>ExecutorService</code>, kita bisa menggunakan factory method yang disediakan oleh class <code>Executors</code>.</p> <pre><code>import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Membuat thread pool dengan 5 threads\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n\n        // Menambahkan beberapa task ke dalam executor\n        for (int i = 0; i &lt; 10; i++) {\n            executorService.submit(() -&gt; {\n                System.out.println(\"Thread: \" + Thread.currentThread().getName() + \" - Tugas sedang diproses\");\n                try {\n                    Thread.sleep(1000);  // Simulasi tugas\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n\n        // Menutup executor setelah semua tugas selesai\n        executorService.shutdown();\n    }\n}\n</code></pre> <p>Di atas, kita membuat thread pool dengan 5 thread dan kemudian menambahkan 10 tugas yang akan dikerjakan oleh thread-thread tersebut. Setelah semua tugas selesai, kita memanggil <code>shutdown()</code> untuk menutup executor.</p>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#jenis-jenis-executorservice","title":"\ud83d\udee0\ufe0f Jenis-Jenis ExecutorService","text":"<p>Ada beberapa cara untuk membuat executor service sesuai kebutuhan aplikasi kita:</p>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#1-fixedthreadpool","title":"1. FixedThreadPool","text":"<p>Membuat thread pool dengan jumlah thread tetap.</p> <pre><code>ExecutorService executorService = Executors.newFixedThreadPool(5);\n</code></pre>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#2-cachedthreadpool","title":"2. CachedThreadPool","text":"<p>Membuat thread pool yang bisa membuat thread baru jika diperlukan, dan menghapus thread yang sudah tidak digunakan lagi.</p> <pre><code>ExecutorService executorService = Executors.newCachedThreadPool();\n</code></pre>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#3-singlethreadexecutor","title":"3. SingleThreadExecutor","text":"<p>Membuat thread pool dengan hanya satu thread. Semua tugas akan dijalankan secara berurutan, bukan paralel.</p> <pre><code>ExecutorService executorService = Executors.newSingleThreadExecutor();\n</code></pre>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#4-scheduledthreadpoolexecutor","title":"4. ScheduledThreadPoolExecutor","text":"<p>Membuat thread pool yang bisa menjalankan tugas dengan penjadwalan tertentu, seperti tugas yang harus dijalankan pada interval waktu tertentu.</p> <pre><code>ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(5);\nscheduler.scheduleAtFixedRate(() -&gt; {\n    System.out.println(\"Tugas dijalankan pada interval waktu\");\n}, 0, 5, TimeUnit.SECONDS);\n</code></pre>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#perbedaan-dengan-thread-manual","title":"\ud83d\udccf Perbedaan dengan Thread Manual","text":"<p>Saat menggunakan Thread secara manual, kita harus membuat objek thread dan menjalankannya satu per satu. Proses ini bisa memakan waktu, karena thread yang dibuat harus disiapkan dan dihancurkan setelah selesai.</p> <p>Sedangkan dengan ExecutorService, thread sudah dikelola oleh framework, dan kita hanya fokus pada tugas yang ingin dijalankan. Ini membuat pengelolaan thread menjadi lebih efisien dan mudah.</p>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#shutdown-executorservice","title":"\ud83d\uded1 Shutdown ExecutorService","text":"<p>Saat aplikasi kita selesai, kita harus menutup <code>ExecutorService</code> dengan <code>shutdown()</code> untuk membebaskan sumber daya yang digunakan oleh thread pool.</p> <ul> <li><code>shutdown()</code>: Memberitahukan executor untuk tidak menerima tugas baru dan menunggu hingga semua tugas yang sedang berjalan selesai.</li> <li><code>shutdownNow()</code>: Memberitahukan executor untuk menghentikan semua tugas yang sedang berjalan dan mengembalikan daftar tugas yang belum dijalankan.</li> </ul> <pre><code>executorService.shutdown();\n</code></pre>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#keuntungan-menggunakan-executorservice","title":"\u2705 Keuntungan Menggunakan ExecutorService","text":"<ol> <li>Efisiensi: Menghindari overhead pembuatan thread baru setiap kali tugas baru datang.</li> <li>Kontrol: Memberikan kontrol lebih terhadap pengelolaan thread dan penjadwalan tugas.</li> <li>Skalabilitas: Dapat menangani ribuan tugas secara efisien menggunakan thread pool.</li> <li>Pengelolaan Sumber Daya: Thread yang digunakan dapat dimanfaatkan kembali, mengurangi pemborosan sumber daya.</li> </ol>"},{"location":"belajar-java/36-Thread-Pool-dan-ExecutorService/#kesimpulan","title":"\u2705 Kesimpulan","text":"<p>ExecutorService adalah cara yang lebih efisien dan fleksibel untuk mengelola thread di Java. Dengan menggunakan thread pool, kita bisa mengoptimalkan eksekusi tugas-tugas dalam aplikasi kita, terutama yang membutuhkan banyak thread. Cobalah untuk memilih jenis <code>ExecutorService</code> yang sesuai dengan kebutuhan aplikasi, dan pastikan untuk menutup executor saat aplikasi selesai berjalan.</p> <p>Next \ud83d\udc49 37. Future dan Callable di Java</p>"},{"location":"belajar-java/37-Deadlock-dan-Race-Condition/","title":"37. Deadlock dan Race Condition di Java","text":"<p>Pada saat bekerja dengan banyak thread, kita sering menemui masalah yang disebut Deadlock dan Race Condition. Kedua masalah ini terjadi ketika beberapa thread berinteraksi satu sama lain dan menyebabkan aplikasi tidak berjalan dengan semestinya. Memahami dan mengatasi masalah ini sangat penting untuk membuat aplikasi multithreading yang aman dan efisien.</p>"},{"location":"belajar-java/37-Deadlock-dan-Race-Condition/#apa-itu-deadlock","title":"\ud83d\udd12 Apa itu Deadlock?","text":"<p>Deadlock terjadi ketika dua atau lebih thread saling menunggu satu sama lain untuk melepaskan sumber daya yang diperlukan untuk melanjutkan eksekusi. Akibatnya, thread-thread tersebut tidak bisa bergerak maju, dan aplikasi menjadi \"terhenti\" tanpa solusi.</p>"},{"location":"belajar-java/37-Deadlock-dan-Race-Condition/#contoh-deadlock","title":"Contoh Deadlock","text":"<p>Misalnya, ada dua thread yang saling bergantung pada dua sumber daya yang berbeda.</p> <pre><code>public class DeadlockExample {\n    private static final Object resource1 = new Object();\n    private static final Object resource2 = new Object();\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -&gt; {\n            synchronized (resource1) {\n                System.out.println(\"Thread 1: Mengunci resource1\");\n                try { Thread.sleep(100); } catch (InterruptedException e) {}\n                synchronized (resource2) {\n                    System.out.println(\"Thread 1: Mengunci resource2\");\n                }\n            }\n        });\n\n        Thread t2 = new Thread(() -&gt; {\n            synchronized (resource2) {\n                System.out.println(\"Thread 2: Mengunci resource2\");\n                try { Thread.sleep(100); } catch (InterruptedException e) {}\n                synchronized (resource1) {\n                    System.out.println(\"Thread 2: Mengunci resource1\");\n                }\n            }\n        });\n\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre> <p>Pada contoh di atas, Thread 1 mengunci <code>resource1</code> dan menunggu untuk mengunci <code>resource2</code>, sementara Thread 2 mengunci <code>resource2</code> dan menunggu untuk mengunci <code>resource1</code>. Akibatnya, kedua thread saling menunggu, menyebabkan deadlock.</p>"},{"location":"belajar-java/37-Deadlock-dan-Race-Condition/#apa-itu-race-condition","title":"\ud83d\udea7 Apa itu Race Condition?","text":"<p>Race Condition terjadi ketika dua atau lebih thread mengakses dan memodifikasi data yang sama secara bersamaan, tanpa sinkronisasi yang tepat. Ini bisa menyebabkan data yang tidak konsisten atau hasil yang tidak terduga, karena urutan eksekusi thread tidak bisa diprediksi.</p>"},{"location":"belajar-java/37-Deadlock-dan-Race-Condition/#contoh-race-condition","title":"Contoh Race Condition","text":"<p>Berikut adalah contoh sederhana dari race condition.</p> <pre><code>public class RaceConditionExample {\n    private static int counter = 0;\n\n    public static void main(String[] args) {\n        Runnable incrementTask = () -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                counter++; // Meningkatkan counter\n            }\n        };\n\n        Thread t1 = new Thread(incrementTask);\n        Thread t2 = new Thread(incrementTask);\n\n        t1.start();\n        t2.start();\n\n        try {\n            t1.join();\n            t2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Counter: \" + counter); // Output tidak terduga\n    }\n}\n</code></pre> <p>Pada contoh di atas, dua thread mencoba untuk meningkatkan nilai dari <code>counter</code> sebanyak 1000 kali masing-masing. Karena kedua thread mengakses dan memodifikasi nilai yang sama tanpa sinkronisasi, counter bisa berakhir dengan nilai yang lebih rendah dari 2000, karena akses yang tidak terkendali terhadap data.</p>"},{"location":"belajar-java/37-Deadlock-dan-Race-Condition/#mengatasi-deadlock","title":"\ud83d\udee0\ufe0f Mengatasi Deadlock","text":"<p>Untuk menghindari deadlock, beberapa langkah yang dapat diambil antara lain:</p> <ol> <li>Menghindari Urutan Sumber Daya yang Saling Bergantung: Jangan biarkan thread saling menunggu satu sama lain. Usahakan thread mengunci sumber daya dalam urutan yang konsisten.</li> <li>Timeout pada Lock: Gunakan timeout ketika mencoba mengunci sumber daya untuk menghindari deadlock yang berlangsung lama.</li> <li>Menggunakan <code>tryLock</code>: Menggunakan <code>ReentrantLock</code> dengan <code>tryLock()</code> yang memungkinkan thread untuk mencoba mengunci dan membatalkan jika tidak bisa mendapatkan kunci dalam waktu tertentu.</li> </ol>"},{"location":"belajar-java/37-Deadlock-dan-Race-Condition/#contoh-menghindari-deadlock-dengan-trylock","title":"Contoh Menghindari Deadlock dengan <code>tryLock</code>","text":"<pre><code>import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class DeadlockAvoidanceExample {\n    private static final Lock lock1 = new ReentrantLock();\n    private static final Lock lock2 = new ReentrantLock();\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -&gt; {\n            try {\n                if (lock1.tryLock() &amp;&amp; lock2.tryLock()) {\n                    System.out.println(\"Thread 1: Mengunci resource1 dan resource2\");\n                } else {\n                    System.out.println(\"Thread 1: Gagal mendapatkan kunci, mencoba lagi...\");\n                }\n            } finally {\n                lock1.unlock();\n                lock2.unlock();\n            }\n        });\n\n        Thread t2 = new Thread(() -&gt; {\n            try {\n                if (lock2.tryLock() &amp;&amp; lock1.tryLock()) {\n                    System.out.println(\"Thread 2: Mengunci resource2 dan resource1\");\n                } else {\n                    System.out.println(\"Thread 2: Gagal mendapatkan kunci, mencoba lagi...\");\n                }\n            } finally {\n                lock2.unlock();\n                lock1.unlock();\n            }\n        });\n\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre> <p>Dengan menggunakan <code>tryLock()</code>, kita bisa menghindari deadlock dan memberi kesempatan thread untuk mencoba lagi jika tidak dapat mengunci sumber daya.</p>"},{"location":"belajar-java/37-Deadlock-dan-Race-Condition/#mengatasi-race-condition","title":"\ud83d\udee0\ufe0f Mengatasi Race Condition","text":"<p>Untuk menghindari race condition, kita harus memastikan bahwa hanya satu thread yang bisa mengakses dan memodifikasi data pada satu waktu. Ada beberapa cara untuk melakukannya:</p> <ol> <li>Sinkronisasi: Gunakan <code>synchronized</code> untuk memastikan hanya satu thread yang dapat mengakses kode tertentu pada satu waktu.</li> <li>Lock: Gunakan <code>Lock</code> seperti <code>ReentrantLock</code> untuk mendapatkan kontrol lebih besar atas pengelolaan sinkronisasi.</li> <li>Atomic Variables: Gunakan kelas seperti <code>AtomicInteger</code> untuk variabel yang membutuhkan operasi atomik.</li> </ol>"},{"location":"belajar-java/37-Deadlock-dan-Race-Condition/#contoh-mengatasi-race-condition-dengan-synchronized","title":"Contoh Mengatasi Race Condition dengan <code>synchronized</code>","text":"<pre><code>public class SynchronizedExample {\n    private static int counter = 0;\n\n    public synchronized static void increment() {\n        counter++;\n    }\n\n    public static void main(String[] args) {\n        Runnable incrementTask = () -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                increment();\n            }\n        };\n\n        Thread t1 = new Thread(incrementTask);\n        Thread t2 = new Thread(incrementTask);\n\n        t1.start();\n        t2.start();\n\n        try {\n            t1.join();\n            t2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Counter: \" + counter); // Output konsisten\n    }\n}\n</code></pre> <p>Dengan menambahkan kata kunci <code>synchronized</code>, kita memastikan bahwa hanya satu thread yang dapat menjalankan metode <code>increment()</code> pada satu waktu, sehingga menghindari race condition.</p>"},{"location":"belajar-java/37-Deadlock-dan-Race-Condition/#kesimpulan","title":"\u2705 Kesimpulan","text":"<p>Deadlock dan Race Condition adalah dua masalah besar dalam pemrograman multithreading yang perlu diatasi untuk memastikan aplikasi berjalan dengan lancar dan efisien. Dengan memahami penyebab dan solusi untuk masalah-masalah ini, kita bisa membuat aplikasi yang lebih stabil dan aman.</p> <p>Next \ud83d\udc49 38. ExecutorService dengan Future dan Callable</p>"},{"location":"belajar-java/38-Pengenalan-Networking-di-Java/","title":"38. Pengenalan Networking di Java","text":"<p>Java menyediakan dukungan yang kuat untuk pemrograman jaringan melalui paket <code>java.net</code>. Dengan ini, kita bisa membuat aplikasi client-server, mengirim dan menerima data melalui internet, serta membangun komunikasi antara berbagai perangkat.</p>"},{"location":"belajar-java/38-Pengenalan-Networking-di-Java/#apa-itu-pemrograman-jaringan","title":"\ud83c\udf10 Apa itu Pemrograman Jaringan?","text":"<p>Pemrograman jaringan memungkinkan aplikasi untuk berkomunikasi melalui protokol jaringan seperti TCP dan UDP. Dalam Java, komunikasi ini dapat dibangun menggunakan:</p> <ul> <li>Socket: Untuk komunikasi berbasis koneksi (TCP)</li> <li>DatagramSocket: Untuk komunikasi tanpa koneksi (UDP)</li> <li>URL dan URLConnection: Untuk mengakses sumber daya melalui protokol HTTP/HTTPS</li> </ul>"},{"location":"belajar-java/38-Pengenalan-Networking-di-Java/#contoh-client-server-sederhana-menggunakan-socket-tcp","title":"\ud83d\udd0c Contoh Client-Server Sederhana Menggunakan Socket (TCP)","text":""},{"location":"belajar-java/38-Pengenalan-Networking-di-Java/#server","title":"\u2705 Server","text":"<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class Server {\n    public static void main(String[] args) {\n        try {\n            ServerSocket serverSocket = new ServerSocket(1234);\n            System.out.println(\"Server menunggu koneksi...\");\n            Socket clientSocket = serverSocket.accept();\n            System.out.println(\"Client terhubung!\");\n\n            BufferedReader input = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n            PrintWriter output = new PrintWriter(clientSocket.getOutputStream(), true);\n\n            String pesan = input.readLine();\n            System.out.println(\"Dari Client: \" + pesan);\n            output.println(\"Pesan diterima: \" + pesan);\n\n            input.close();\n            output.close();\n            clientSocket.close();\n            serverSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/38-Pengenalan-Networking-di-Java/#client","title":"\u2705 Client","text":"<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class Client {\n    public static void main(String[] args) {\n        try {\n            Socket socket = new Socket(\"localhost\", 1234);\n            BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            PrintWriter output = new PrintWriter(socket.getOutputStream(), true);\n\n            output.println(\"Halo dari Client!\");\n            String balasan = input.readLine();\n            System.out.println(\"Dari Server: \" + balasan);\n\n            input.close();\n            output.close();\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/38-Pengenalan-Networking-di-Java/#akses-url-menggunakan-javaneturl","title":"\ud83c\udf10 Akses URL Menggunakan <code>java.net.URL</code>","text":"<p>Kamu juga bisa mengakses konten dari website menggunakan <code>URL</code>:</p> <pre><code>import java.io.*;\nimport java.net.*;\n\npublic class URLExample {\n    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"https://example.com\");\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = reader.readLine()) != null) {\n                System.out.println(inputLine);\n            }\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/38-Pengenalan-Networking-di-Java/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Java menyediakan kelas-kelas powerful dalam <code>java.net</code> untuk mendukung berbagai aktivitas jaringan, baik itu komunikasi antar komputer melalui socket maupun mengambil data dari internet. Di bab selanjutnya, kita akan membahas lebih dalam tentang penggunaan URL, HTTP connection, dan membuat server HTTP sederhana.</p> <p>Next \ud83d\udc49 39. Membuat Server dan Client dengan HTTPURLConnection</p>"},{"location":"belajar-java/39-Socket-Programming/","title":"39. Socket Programming di Java","text":"<p>Socket programming adalah teknik pemrograman untuk membangun komunikasi antar komputer dalam jaringan, menggunakan protokol TCP atau UDP. Java menyediakan class <code>Socket</code> dan <code>ServerSocket</code> untuk komunikasi TCP, serta <code>DatagramSocket</code> untuk UDP.</p>"},{"location":"belajar-java/39-Socket-Programming/#konsep-dasar","title":"\ud83e\udde0 Konsep Dasar","text":"<ul> <li>Client: Program yang memulai koneksi ke server.</li> <li>Server: Program yang menunggu koneksi dari client.</li> <li>Socket: Titik akhir dari dua arah komunikasi antara dua program.</li> </ul>"},{"location":"belajar-java/39-Socket-Programming/#contoh-socket-tcp-chat-sederhana","title":"\ud83d\udd0c Contoh Socket TCP: Chat Sederhana","text":""},{"location":"belajar-java/39-Socket-Programming/#server","title":"\ud83d\udc68\u200d\ud83d\udcbb Server","text":"<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class TCPServer {\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(5000);\n        System.out.println(\"Server siap di port 5000...\");\n\n        Socket socket = serverSocket.accept();\n        System.out.println(\"Client terhubung!\");\n\n        BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        PrintWriter output = new PrintWriter(socket.getOutputStream(), true);\n\n        String pesan;\n        while ((pesan = input.readLine()) != null) {\n            System.out.println(\"Dari client: \" + pesan);\n            output.println(\"Server menerima: \" + pesan);\n        }\n\n        input.close();\n        output.close();\n        socket.close();\n        serverSocket.close();\n    }\n}\n</code></pre>"},{"location":"belajar-java/39-Socket-Programming/#client","title":"\ud83d\udc68\u200d\ud83d\udcbb Client","text":"<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class TCPClient {\n    public static void main(String[] args) throws IOException {\n        Socket socket = new Socket(\"localhost\", 5000);\n        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter output = new PrintWriter(socket.getOutputStream(), true);\n        BufferedReader serverInput = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n        String userInput;\n        while ((userInput = input.readLine()) != null) {\n            output.println(userInput);\n            System.out.println(\"Dari server: \" + serverInput.readLine());\n        }\n\n        output.close();\n        serverInput.close();\n        socket.close();\n    }\n}\n</code></pre>"},{"location":"belajar-java/39-Socket-Programming/#socket-udp","title":"\ud83d\udce1 Socket UDP","text":"<p>UDP lebih ringan daripada TCP, cocok untuk aplikasi real-time seperti game, video streaming, atau sensor IoT. Namun, tidak menjamin urutan dan pengiriman data.</p>"},{"location":"belajar-java/39-Socket-Programming/#server-udp","title":"Server UDP","text":"<pre><code>import java.net.*;\n\npublic class UDPServer {\n    public static void main(String[] args) throws Exception {\n        DatagramSocket socket = new DatagramSocket(9876);\n        byte[] receiveData = new byte[1024];\n\n        System.out.println(\"UDP Server aktif...\");\n\n        while (true) {\n            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n            socket.receive(receivePacket);\n            String pesan = new String(receivePacket.getData()).trim();\n            System.out.println(\"Pesan diterima: \" + pesan);\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/39-Socket-Programming/#client-udp","title":"Client UDP","text":"<pre><code>import java.net.*;\n\npublic class UDPClient {\n    public static void main(String[] args) throws Exception {\n        DatagramSocket socket = new DatagramSocket();\n        InetAddress IPAddress = InetAddress.getByName(\"localhost\");\n        byte[] sendData = \"Halo UDP Server!\".getBytes();\n\n        DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);\n        socket.send(sendPacket);\n        socket.close();\n    }\n}\n</code></pre>"},{"location":"belajar-java/39-Socket-Programming/#catatan","title":"\ud83d\udca1 Catatan","text":"<ul> <li>TCP cocok untuk aplikasi yang butuh keandalan tinggi (chat, transaksi).</li> <li>UDP cocok untuk kecepatan dan toleransi kehilangan data (video call, game online).</li> <li>Gunakan port yang tidak digunakan oleh sistem (di atas 1024 biasanya aman).</li> </ul>"},{"location":"belajar-java/39-Socket-Programming/#penutup","title":"\ud83d\udd1a Penutup","text":"<p>Socket programming memungkinkan kita membangun komunikasi dua arah antar aplikasi, baik secara lokal maupun dalam jaringan luas. Sangat cocok untuk membangun aplikasi chat, notifikasi, game multiplayer, dan banyak lagi.</p> <p>Selanjutnya, kita akan menjelajahi topik GUI di Java menggunakan Swing!</p> <p>Next \ud83d\udc49 40. Pengenalan GUI dengan Swing</p>"},{"location":"belajar-java/40-Membuat-Client-Server-Sederhana/","title":"40. Membuat Client-Server Sederhana di Java","text":"<p>Dalam dunia nyata, banyak aplikasi bergantung pada arsitektur client-server, seperti web browser (client) yang berkomunikasi dengan web server. Di bab ini, kita akan membuat contoh client-server sederhana menggunakan Java dan socket TCP.</p>"},{"location":"belajar-java/40-Membuat-Client-Server-Sederhana/#tujuan","title":"\ud83c\udfaf Tujuan","text":"<ul> <li>Memahami cara kerja komunikasi antara client dan server.</li> <li>Menggunakan <code>Socket</code> dan <code>ServerSocket</code> dari Java.</li> <li>Mengirim dan menerima pesan sederhana.</li> </ul>"},{"location":"belajar-java/40-Membuat-Client-Server-Sederhana/#struktur-sederhana","title":"\ud83d\udc68\u200d\ud83d\udcbb Struktur Sederhana","text":"<pre><code>Client &lt;-----&gt; Server\n</code></pre> <p>Client mengirimkan pesan \u2192 Server menerima dan merespon \u2192 Client menampilkan balasan.</p>"},{"location":"belajar-java/40-Membuat-Client-Server-Sederhana/#kode-server","title":"\ud83d\udda5\ufe0f Kode Server","text":"<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class ServerSederhana {\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(1234);\n        System.out.println(\"Server berjalan di port 1234...\");\n\n        Socket clientSocket = serverSocket.accept();\n        System.out.println(\"Client terhubung!\");\n\n        BufferedReader input = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n        PrintWriter output = new PrintWriter(clientSocket.getOutputStream(), true);\n\n        String pesan = input.readLine();\n        System.out.println(\"Dari client: \" + pesan);\n\n        output.println(\"Halo juga, client!\");\n\n        input.close();\n        output.close();\n        clientSocket.close();\n        serverSocket.close();\n    }\n}\n</code></pre>"},{"location":"belajar-java/40-Membuat-Client-Server-Sederhana/#kode-client","title":"\ud83d\udcbb Kode Client","text":"<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class ClientSederhana {\n    public static void main(String[] args) throws IOException {\n        Socket socket = new Socket(\"localhost\", 1234);\n\n        PrintWriter output = new PrintWriter(socket.getOutputStream(), true);\n        BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n        output.println(\"Halo server!\");\n        String response = input.readLine();\n        System.out.println(\"Dari server: \" + response);\n\n        output.close();\n        input.close();\n        socket.close();\n    }\n}\n</code></pre>"},{"location":"belajar-java/40-Membuat-Client-Server-Sederhana/#cara-menjalankan","title":"\ud83e\uddea Cara Menjalankan","text":"<ol> <li>Jalankan class <code>ServerSederhana</code> dulu.</li> <li>Jalankan class <code>ClientSederhana</code>.</li> <li>Lihat komunikasi di console masing-masing.</li> </ol>"},{"location":"belajar-java/40-Membuat-Client-Server-Sederhana/#catatan","title":"\ud83d\udcdd Catatan","text":"<ul> <li>Pastikan client dan server menggunakan port yang sama.</li> <li>Bisa dijalankan di komputer berbeda jika menggunakan IP publik/server LAN.</li> <li>Untuk penggunaan skala besar, implementasi harus menangani banyak client (multithreading).</li> </ul>"},{"location":"belajar-java/40-Membuat-Client-Server-Sederhana/#selanjutnya","title":"\ud83d\udce6 Selanjutnya","text":"<p>Setelah kamu paham konsep dasar client-server, kamu bisa mengembangkannya menjadi sistem yang lebih kompleks seperti:</p> <ul> <li>Chat room multi-user (multithreaded)</li> <li>Server database sederhana</li> <li>API server mini</li> </ul> <p>Next \ud83d\udc49 41. Pengenalan GUI dengan Swing</p>"},{"location":"belajar-java/41-HTTP-Request-dengan-Java/","title":"41. HTTP Request dengan Java","text":"<p>Pada aplikasi modern, kita sering butuh komunikasi dengan server melalui protokol HTTP. Entah itu untuk ambil data dari API, kirim data ke server, atau nge-stalk status server (bukan mantan, ya). Di Java, kita bisa melakukan HTTP request dengan beberapa cara.</p>"},{"location":"belajar-java/41-HTTP-Request-dengan-Java/#tujuan","title":"\ud83d\ude80 Tujuan","text":"<ul> <li>Mengirim HTTP request (GET dan POST) menggunakan Java.</li> <li>Menggunakan <code>HttpURLConnection</code> (native) dan <code>HttpClient</code> (Java 11+).</li> </ul>"},{"location":"belajar-java/41-HTTP-Request-dengan-Java/#cara-1-httpurlconnection-cocok-buat-java-versi-lawas","title":"\u2615 Cara 1: <code>HttpURLConnection</code> (Cocok buat Java versi lawas)","text":""},{"location":"belajar-java/41-HTTP-Request-dengan-Java/#contoh-http-get","title":"\ud83d\udd0d Contoh: HTTP GET","text":"<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class HttpGetContoh {\n    public static void main(String[] args) throws IOException {\n        URL url = new URL(\"https://jsonplaceholder.typicode.com/posts/1\");\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        String inputLine;\n        StringBuilder response = new StringBuilder();\n\n        while ((inputLine = in.readLine()) != null) {\n            response.append(inputLine);\n        }\n        in.close();\n\n        System.out.println(\"Response:\\n\" + response.toString());\n    }\n}\n</code></pre>"},{"location":"belajar-java/41-HTTP-Request-dengan-Java/#contoh-http-post","title":"\ud83d\udce8 Contoh: HTTP POST","text":"<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class HttpPostContoh {\n    public static void main(String[] args) throws IOException {\n        URL url = new URL(\"https://jsonplaceholder.typicode.com/posts\");\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"POST\");\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n\n        String jsonInput = \"{\\\"title\\\": \\\"Halo\\\", \\\"body\\\": \\\"Dari Java\\\", \\\"userId\\\": 1}\";\n\n        OutputStream os = connection.getOutputStream();\n        os.write(jsonInput.getBytes());\n        os.flush();\n        os.close();\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        String line;\n        StringBuilder response = new StringBuilder();\n        while ((line = in.readLine()) != null) {\n            response.append(line);\n        }\n        in.close();\n\n        System.out.println(\"Response:\\n\" + response.toString());\n    }\n}\n</code></pre>"},{"location":"belajar-java/41-HTTP-Request-dengan-Java/#cara-2-httpclient-java-11","title":"\ud83e\udde0 Cara 2: <code>HttpClient</code> (Java 11+)","text":"<pre><code>import java.net.http.*;\nimport java.net.URI;\n\npublic class HttpClientContoh {\n    public static void main(String[] args) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(\"https://jsonplaceholder.typicode.com/posts/1\"))\n                .GET()\n                .build();\n\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        System.out.println(\"Response:\\n\" + response.body());\n    }\n}\n</code></pre>"},{"location":"belajar-java/41-HTTP-Request-dengan-Java/#tips","title":"\ud83d\udee1\ufe0f Tips","text":"<ul> <li>Gunakan <code>HttpClient</code> untuk kode yang lebih modern dan cleaner.</li> <li>Tambahkan pengecekan response code (<code>200 OK</code>, <code>404 Not Found</code>, dll).</li> <li>Kalau kerja sama REST API, pertimbangkan pakai library seperti OkHttp atau Retrofit (lebih fleksibel dan powerful).</li> </ul>"},{"location":"belajar-java/41-HTTP-Request-dengan-Java/#studi-kasus","title":"\ud83e\uddea Studi Kasus","text":"<p>Coba ambil data dari API publik seperti: - https://jsonplaceholder.typicode.com/ - https://api.agify.io?name=udin</p>"},{"location":"belajar-java/41-HTTP-Request-dengan-Java/#selanjutnya","title":"\ud83d\udce6 Selanjutnya","text":"<p>Di bab selanjutnya, kita akan mulai mainan GUI Java (yes, tampilannya udah gak console doang!). Siap menjelajah ke dunia antarmuka visual?</p> <p>Next \ud83d\udc49 42. Pengenalan GUI dengan Swing</p>"},{"location":"belajar-java/42-Debugging-di-IDE/","title":"42. Debugging di IDE","text":"<p>Debugging adalah seni memecahkan masalah dalam kode. Sebagai developer, kita pasti sering berhadapan dengan bug yang bisa bikin pusing. Untungnya, IDE (Integrated Development Environment) seperti IntelliJ IDEA atau Eclipse punya fitur debugging yang bisa membantu kita dengan cepat menemukan dan memperbaiki bug.</p>"},{"location":"belajar-java/42-Debugging-di-IDE/#tujuan","title":"\ud83d\ude80 Tujuan","text":"<ul> <li>Memahami konsep debugging di IDE.</li> <li>Belajar menggunakan breakpoint, watch, dan step-by-step debugging.</li> <li>Meningkatkan produktivitas dalam menemukan dan memperbaiki bug.</li> </ul>"},{"location":"belajar-java/42-Debugging-di-IDE/#konsep-dasar-debugging","title":"\ud83d\udda5\ufe0f Konsep Dasar Debugging","text":"<p>Debugging adalah proses mencari dan memperbaiki bug dalam kode. Dengan debugger, kita bisa menjalankan program langkah demi langkah, memeriksa variabel, dan menghentikan eksekusi di titik tertentu (breakpoint).</p>"},{"location":"belajar-java/42-Debugging-di-IDE/#cara-menggunakan-debugger-di-ide","title":"\ud83d\udd0e Cara Menggunakan Debugger di IDE","text":""},{"location":"belajar-java/42-Debugging-di-IDE/#intellij-idea","title":"IntelliJ IDEA","text":"<ol> <li>Menambahkan Breakpoint:</li> <li> <p>Klik di samping nomor baris pada kode untuk menambahkan breakpoint. Breakpoint akan berhenti menjalankan program di titik tersebut.</p> </li> <li> <p>Memulai Debugging:</p> </li> <li> <p>Klik tombol \"Debug\" (biasanya ada di dekat tombol \"Run\") untuk memulai sesi debugging.</p> </li> <li> <p>Step-by-Step Debugging:</p> </li> <li>Step Over (F8): Menjalankan kode satu per satu, melompati fungsi/method.</li> <li>Step Into (F7): Masuk ke dalam fungsi/method untuk melihat detail eksekusi.</li> <li> <p>Step Out (Shift+F8): Keluar dari fungsi/method dan kembali ke caller-nya.</p> </li> <li> <p>Memeriksa Variabel:</p> </li> <li>Gunakan Variables di panel debug untuk melihat nilai variabel saat program berjalan.</li> <li> <p>Kamu juga bisa mengubah nilai variabel secara langsung di panel ini untuk melihat pengaruhnya pada eksekusi kode.</p> </li> <li> <p>Watch Expressions:</p> </li> <li>Tambahkan watch untuk melacak nilai ekspresi tertentu selama eksekusi.</li> </ol>"},{"location":"belajar-java/42-Debugging-di-IDE/#eclipse","title":"Eclipse","text":"<ol> <li>Menambahkan Breakpoint:</li> <li> <p>Klik di samping nomor baris di Eclipse untuk menambahkan breakpoint.</p> </li> <li> <p>Memulai Debugging:</p> </li> <li> <p>Klik kanan pada file dan pilih \"Debug As\" \u2192 \"Java Application\".</p> </li> <li> <p>Step-by-Step Debugging:</p> </li> <li>Step Over (F6): Jalankan perintah satu per satu tanpa masuk ke dalam fungsi.</li> <li>Step Into (F5): Masuk ke dalam fungsi untuk melihat detail lebih lanjut.</li> <li> <p>Step Return (F7): Keluar dari fungsi dan kembali ke pemanggil.</p> </li> <li> <p>Memeriksa Variabel:</p> </li> <li> <p>Cek nilai variabel di panel \"Variables\" untuk melihat bagaimana nilai berubah selama debugging.</p> </li> <li> <p>Watch Expressions:</p> </li> <li>Tambahkan watch untuk melacak ekspresi tertentu.</li> </ol>"},{"location":"belajar-java/42-Debugging-di-IDE/#tips-debugging","title":"\u26a0\ufe0f Tips Debugging","text":"<ul> <li>Baca Stack Trace: Jika ada error atau exception, baca stack trace untuk melihat di mana masalahnya terjadi.</li> <li>Gunakan Log: Kadang-kadang log bisa membantu menelusuri masalah lebih mudah.</li> <li>Breakpoints dan Watchpoints: Jangan ragu untuk memasang breakpoint dan watchpoint di titik yang mencurigakan.</li> <li>Cek Nilai Variabel: Pastikan nilai variabel sesuai dengan ekspektasi selama proses debugging.</li> </ul>"},{"location":"belajar-java/42-Debugging-di-IDE/#selanjutnya","title":"\ud83d\udce6 Selanjutnya","text":"<p>Debugging adalah keterampilan yang akan terus kamu asah seiring waktu. Dengan alat yang tepat, kamu bisa menghemat banyak waktu dan frustrasi. Setelah debugging selesai, waktunya bersenang-senang dengan desain GUI!</p> <p>Next \ud83d\udc49 43. Pengenalan Swing untuk GUI Java</p>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/","title":"43. Unit Testing dengan JUnit","text":"<p>Unit testing adalah salah satu cara terbaik untuk memastikan bahwa kode kamu berfungsi dengan baik. Dengan unit testing, kamu bisa menguji setiap bagian kecil dari aplikasi secara terpisah dan memastikan bahwa tidak ada bug yang tersembunyi. Salah satu framework testing yang paling populer di Java adalah JUnit.</p>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#tujuan","title":"\ud83d\ude80 Tujuan","text":"<ul> <li>Memahami konsep unit testing.</li> <li>Belajar cara menggunakan JUnit untuk membuat dan menjalankan unit test.</li> <li>Menyusun test cases untuk memastikan aplikasi kamu bebas dari bug.</li> </ul>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#apa-itu-unit-testing","title":"\ud83e\udde0 Apa Itu Unit Testing?","text":"<p>Unit testing adalah proses pengujian unit terkecil dari sebuah aplikasi (seperti fungsi atau metode) untuk memastikan bahwa unit tersebut berfungsi dengan benar. Unit test biasanya dilakukan oleh developer sendiri, dan mereka memastikan bahwa setiap bagian kode berfungsi sesuai dengan ekspektasi.</p>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#instalasi-junit","title":"\ud83e\uddea Instalasi JUnit","text":"<p>Untuk menggunakan JUnit di proyek Java, kamu perlu menambahkan dependensi JUnit ke dalam proyekmu. Jika kamu menggunakan Maven, tambahkan dependency berikut ke dalam file <code>pom.xml</code>:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n    &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;\n    &lt;version&gt;5.7.0&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Jika menggunakan Gradle, tambahkan di <code>build.gradle</code>:</p> <pre><code>testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'\ntestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'\n</code></pre>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#membuat-unit-test-dengan-junit","title":"\ud83d\udee0\ufe0f Membuat Unit Test dengan JUnit","text":"<p>Berikut adalah contoh cara membuat unit test menggunakan JUnit. Misalnya, kita punya kelas <code>Calculator</code> yang memiliki metode untuk menjumlahkan dua angka.</p>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#contoh-kelas-calculator","title":"Contoh: Kelas <code>Calculator</code>","text":"<pre><code>public class Calculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n}\n</code></pre>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#membuat-unit-test-dengan-junit_1","title":"Membuat Unit Test dengan JUnit","text":"<p>Untuk menguji metode <code>add()</code> di kelas <code>Calculator</code>, kita buat kelas test seperti ini:</p> <pre><code>import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class CalculatorTest {\n\n    @Test\n    public void testAdd() {\n        Calculator calculator = new Calculator();\n        assertEquals(5, calculator.add(2, 3), \"Menambahkan 2 dan 3 harus menghasilkan 5\");\n    }\n}\n</code></pre>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#penjelasan","title":"Penjelasan:","text":"<ul> <li><code>@Test</code>: Menandakan bahwa metode ini adalah unit test.</li> <li><code>assertEquals(expected, actual)</code>: Memeriksa apakah hasil yang dihasilkan oleh metode yang diuji sesuai dengan hasil yang diharapkan.</li> </ul>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#menjalankan-unit-test","title":"\ud83d\ude80 Menjalankan Unit Test","text":"<p>Untuk menjalankan unit test, kamu bisa menggunakan IDE seperti IntelliJ IDEA atau Eclipse yang sudah memiliki fitur untuk menjalankan test secara otomatis. Atau, kamu bisa menjalankannya lewat command line dengan Maven atau Gradle:</p>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#dengan-maven","title":"Dengan Maven:","text":"<pre><code>mvn test\n</code></pre>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#dengan-gradle","title":"Dengan Gradle:","text":"<pre><code>gradle test\n</code></pre>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#tips-untuk-unit-testing","title":"\ud83e\uddd1\u200d\ud83d\udcbb Tips untuk Unit Testing","text":"<ul> <li>Gunakan Assert: Gunakan berbagai metode assertion (<code>assertEquals</code>, <code>assertTrue</code>, <code>assertFalse</code>, dll.) untuk memeriksa hasil test.</li> <li>Test Case yang Kecil: Buat test case yang kecil dan terfokus pada satu aspek kode saja.</li> <li>Mocking: Gunakan mocking (misalnya dengan Mockito) untuk menggantikan objek yang kompleks atau eksternal yang tidak ingin kamu uji secara langsung.</li> <li>Coverage: Pastikan testmu mencakup berbagai kemungkinan, termasuk kasus edge (misalnya input yang sangat besar atau kecil).</li> </ul>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#studi-kasus","title":"\ud83e\udde0 Studi Kasus","text":"<p>Coba buat unit test untuk aplikasi sederhana yang menghitung gaji berdasarkan jam kerja dan tarif per jam. Misalnya, buat kelas <code>SalaryCalculator</code> yang memiliki metode <code>calculateSalary()</code> dan buat test untuk memastikan bahwa perhitungan gaji sudah benar.</p>"},{"location":"belajar-java/43-Unit-Testing-dengan-JUnit/#selanjutnya","title":"\ud83d\udce6 Selanjutnya","text":"<p>Dengan unit testing, kamu bisa memastikan bahwa aplikasi kamu berjalan dengan baik di setiap perubahan. Lanjutkan ke bab berikutnya untuk belajar tentang pengembangan aplikasi lebih lanjut!</p> <p>Next \ud83d\udc49 44. Refactoring dan Clean Code</p>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/","title":"44. Logging dan Error Handling Best Practices","text":"<p>Logging dan error handling adalah dua aspek penting dalam pengembangan perangkat lunak yang baik. Dengan logging yang tepat, kita bisa melacak eksekusi aplikasi dan mendiagnosis masalah. Error handling yang baik memastikan aplikasi tetap stabil meskipun ada kesalahan yang terjadi.</p>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#tujuan","title":"\ud83d\ude80 Tujuan","text":"<ul> <li>Memahami pentingnya logging dalam aplikasi Java.</li> <li>Mempelajari cara menangani error dengan efektif.</li> <li>Mengetahui best practices untuk logging dan error handling.</li> </ul>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#logging-di-java","title":"\ud83d\udcdd Logging di Java","text":"<p>Logging adalah proses mencatat informasi penting selama eksekusi aplikasi. Dengan log, kita bisa memantau aktivitas aplikasi dan menemukan bug dengan lebih cepat. Java memiliki API logging yang sangat berguna, yaitu <code>java.util.logging</code> dan juga framework pihak ketiga seperti Log4j dan SLF4J.</p>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#menggunakan-javautillogging","title":"Menggunakan <code>java.util.logging</code>","text":"<p>Contoh penggunaan logging menggunakan <code>java.util.logging</code>:</p> <pre><code>import java.util.logging.Logger;\n\npublic class LoggingExample {\n    private static final Logger logger = Logger.getLogger(LoggingExample.class.getName());\n\n    public static void main(String[] args) {\n        logger.info(\"Aplikasi dimulai...\");\n        try {\n            int result = 10 / 0;\n        } catch (ArithmeticException e) {\n            logger.severe(\"Terjadi kesalahan: \" + e.getMessage());\n        }\n        logger.info(\"Aplikasi selesai.\");\n    }\n}\n</code></pre>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#jenis-jenis-log","title":"Jenis-jenis Log","text":"<ul> <li><code>info</code>: Untuk informasi umum tentang eksekusi aplikasi.</li> <li><code>warning</code>: Untuk masalah yang perlu diperhatikan tapi tidak fatal.</li> <li><code>severe</code>: Untuk kesalahan yang serius, biasanya terkait dengan crash aplikasi.</li> <li><code>fine</code>: Untuk debug-level informasi yang lebih detail.</li> </ul>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#log-framework-lain","title":"Log Framework Lain","text":"<ul> <li>Log4j: Sangat populer di kalangan developer Java karena fleksibilitas dan kemampuannya dalam mengonfigurasi output log.</li> <li>SLF4J: Menggunakan log frameworks yang berbeda, seperti Logback atau Log4j, tetapi dengan API yang konsisten.</li> </ul>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#error-handling-di-java","title":"\u26a0\ufe0f Error Handling di Java","text":"<p>Error handling yang baik memastikan bahwa aplikasi dapat menangani kesalahan tanpa berhenti atau menampilkan pesan yang tidak dimengerti pengguna. Di Java, kita menangani kesalahan dengan Exception.</p>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#menangani-exception-dengan-try-catch","title":"Menangani Exception dengan <code>try-catch</code>","text":"<pre><code>public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            int result = 10 / 0; // Pembagian dengan nol\n        } catch (ArithmeticException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#best-practices-dalam-error-handling","title":"Best Practices dalam Error Handling","text":"<ol> <li> <p>Tangani Exception yang Spesifik: Jangan menangkap semua exception dengan <code>Exception</code>. Tangkap exception spesifik seperti <code>NullPointerException</code>, <code>FileNotFoundException</code>, dll.</p> </li> <li> <p>Log Semua Error: Setiap kali menangkap exception, loglah untuk melacak asal-usul masalah.</p> </li> <li> <p>Jangan Menyembunyikan Exception: Hindari menangkap exception tanpa mengambil tindakan. Jangan biarkan aplikasi berjalan dengan kesalahan yang tidak terdeteksi.</p> </li> <li> <p>Gunakan Custom Exceptions: Kadang-kadang, membuat exception kustom lebih masuk akal daripada menggunakan exception standar Java.</p> </li> </ol>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#menggunakan-custom-exception","title":"Menggunakan Custom Exception","text":"<pre><code>public class InvalidAgeException extends Exception {\n    public InvalidAgeException(String message) {\n        super(message);\n    }\n}\n\npublic class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            throw new InvalidAgeException(\"Umur tidak valid.\");\n        } catch (InvalidAgeException e) {\n            System.out.println(\"Caught custom exception: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#best-practices-untuk-logging-dan-error-handling","title":"\ud83d\udca1 Best Practices untuk Logging dan Error Handling","text":""},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#1-gunakan-logging-level-yang-tepat","title":"1. Gunakan Logging Level yang Tepat","text":"<p>Pilih tingkat logging yang sesuai dengan konteks: - Gunakan <code>info</code> untuk pesan yang memberi tahu status aplikasi. - Gunakan <code>warning</code> untuk masalah yang memerlukan perhatian tetapi tidak menyebabkan kegagalan. - Gunakan <code>severe</code> untuk kegagalan kritis yang menyebabkan aplikasi berhenti atau berfungsi salah.</p>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#2-log-dengan-konteks","title":"2. Log dengan Konteks","text":"<p>Berikan konteks tambahan saat melakukan logging. Misalnya, jika aplikasi menangani transaksi, loglah ID transaksi bersama dengan pesan.</p>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#3-tangani-kesalahan-dengan-elegan","title":"3. Tangani Kesalahan dengan Elegan","text":"<p>Jangan biarkan aplikasi gagal secara tiba-tiba. Alih-alih menampilkan stack trace kepada pengguna, tangani exception dengan cara yang ramah pengguna. Berikan pesan yang jelas, seperti \"Terjadi kesalahan dalam sistem, silakan coba lagi nanti.\"</p>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#4-jangan-menangkap-exception-yang-tidak-diperlukan","title":"4. Jangan Menangkap Exception yang Tidak Diperlukan","text":"<p>Hanya tangkap exception yang kamu bisa tangani. Jika kamu tidak bisa menangani exception tersebut, biarkan aplikasi melemparkannya lagi agar bisa ditangani lebih lanjut di lapisan yang lebih tinggi.</p>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#studi-kasus","title":"\ud83e\uddd1\u200d\ud83d\udcbb Studi Kasus","text":"<p>Bayangkan kamu sedang mengembangkan aplikasi e-commerce. Setiap kali pengguna mencoba melakukan pembelian, kamu perlu memastikan bahwa stok barang cukup dan pembayaran berhasil. Jika ada kesalahan dalam salah satu langkah tersebut, kamu perlu: 1. Menangani exception terkait stok dan pembayaran. 2. Melakukan logging tentang masalah yang terjadi. 3. Memberikan umpan balik yang baik kepada pengguna.</p> <p>Implementasikan logging dan error handling yang baik agar proses ini berjalan dengan lancar.</p>"},{"location":"belajar-java/44-Logging-dan-Error-Handling-Best-Practices/#selanjutnya","title":"\ud83d\udce6 Selanjutnya","text":"<p>Dengan logging yang baik dan error handling yang benar, kamu bisa membuat aplikasi yang lebih tahan banting dan mudah dipelihara. Terus belajar dan kembangkan aplikasi Java kamu dengan lebih efisien!</p> <p>Next \ud83d\udc49 45. Pengenalan Maven untuk Manajemen Proyek</p>"},{"location":"belajar-java/45-Profiling-dan-Performance-Optimization/","title":"45. Profiling dan Performance Optimization","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/46-Pengenalan-Swing-dan-AWT/","title":"46. Pengenalan Swing dan AWT","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/47-Membuat-Frame-dan-Layout/","title":"47. Membuat Frame dan Layout","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/48-Button%2C-TextField%2C-Label%2C-dll/","title":"48. Button, TextField, Label, dll","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/49-Event-Handling/","title":"49. Event Handling","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/50-Proyek-GUI-Sederhana/","title":"50. Proyek GUI Sederhana","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/51-Apa-itu-Android-dan-Hubungannya-dengan-Java/","title":"51. Apa itu Android dan Hubungannya dengan Java","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/52-Struktur-Proyek-Android-Studio/","title":"52. Struktur Proyek Android Studio","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/53-Activity-dan-Layout/","title":"53. Activity dan Layout","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/54-Java-untuk-Android-Development/","title":"54. Java untuk Android Development","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/55-Membuat-Aplikasi-Kalkulator/","title":"55. Membuat Aplikasi Kalkulator","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/56-Aplikasi-Manajemen-Data-Mahasiswa/","title":"56. Aplikasi Manajemen Data Mahasiswa","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/57-To-Do-List-dengan-GUI/","title":"57. To-Do List dengan GUI","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/58-Mini-CRUD-dengan-File/","title":"58. Mini CRUD dengan File","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/59-Sistem-Login-Sederhana/","title":"59. Sistem Login Sederhana","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/60-Java-Design-Patterns-Factory%2C-Singleton%2C-dll/","title":"60. Java Design Patterns (Factory, Singleton, dll)","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/61-Clean-Code-dengan-Java/","title":"61. Clean Code dengan Java","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/62-Refactoring-dan-Maintainability/","title":"62. Refactoring dan Maintainability","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/63-Style-Guide-dan-Konvensi-Penamaan/","title":"63. Style Guide dan Konvensi Penamaan","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/64-Maven-dan-Gradle-untuk-Manajemen-Proyek/","title":"64. Maven &amp; Gradle untuk Manajemen Proyek","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/65-Java-8-Features-Lambda%2C-Stream-API/","title":"65. Java 8 Features (Lambda, Stream API)","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/66-Java-17-dan-Versi-Terbaru-Record%2C-Sealed-Classes%2C-dll/","title":"66. Java 17 dan Versi Terbaru (Record, Sealed Classes, dll)","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/67-Secure-Coding-dan-SQL-Injection/","title":"67. Secure Coding dan SQL Injection","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-java/68-JDBC-dan-Koneksi-Database/","title":"68. JDBC dan Koneksi Database","text":"<p>Tuliskan materi lengkap di sini.</p>"},{"location":"belajar-javascript/01-pemula/01-Pengenalan-JavaScript/","title":"01 Pengenalan JavaScript","text":""},{"location":"belajar-javascript/01-pemula/02-Syntax-dasar/","title":"02 Syntax dasar","text":""},{"location":"belajar-javascript/01-pemula/03-Variabel/","title":"03 Variabel","text":""},{"location":"belajar-javascript/01-pemula/04-Tipe-Data/","title":"04 Tipe Data","text":""},{"location":"belajar-javascript/01-pemula/05-Operator/","title":"05 Operator","text":""},{"location":"belajar-javascript/01-pemula/06-Kondisi-If-Else/","title":"06 Kondisi If Else","text":""},{"location":"belajar-javascript/01-pemula/07-Perulangan/","title":"07 Perulangan","text":""},{"location":"belajar-javascript/01-pemula/08-Array/","title":"08 Array","text":""},{"location":"belajar-javascript/01-pemula/09-Function/","title":"09 Function","text":""},{"location":"belajar-javascript/01-pemula/10-Object/","title":"10 Object","text":""},{"location":"belajar-javascript/01-pemula/11-Scope-dan-Hoisting/","title":"11 Scope dan Hoisting","text":""},{"location":"belajar-javascript/01-pemula/12-Callback/","title":"12 Callback","text":""},{"location":"belajar-javascript/02-menengah/13-Fetch-API/","title":"13 Fetch API","text":""},{"location":"belajar-javascript/02-menengah/14-Higher-Order-Function/","title":"14 Higher Order Function","text":""},{"location":"belajar-javascript/02-menengah/15-Modularisasi/","title":"15 Modularisasi","text":""},{"location":"belajar-javascript/02-menengah/16-Struktur-Data/","title":"16 Struktur Data","text":""},{"location":"belajar-javascript/03-mahir/17-Event-Loop/","title":"17 Event Loop","text":""},{"location":"belajar-javascript/03-mahir/18-Functional-Programming/","title":"18 Functional Programming","text":""},{"location":"belajar-javascript/03-mahir/19-Keamanan/","title":"19 Keamanan","text":""},{"location":"belajar-javascript/03-mahir/20-Konsep-Lanjutan/","title":"20 Konsep Lanjutan","text":""},{"location":"belajar-javascript/03-mahir/21-OOP/","title":"21 OOP","text":""},{"location":"belajar-javascript/03-mahir/22-Tools-Bundler-Linter/","title":"22 Tools Bundler Linter","text":""},{"location":"belajar-javascript/04-best-practices/23-Clean-Code/","title":"23 Clean Code","text":""},{"location":"belajar-javascript/04-best-practices/24-Debugging/","title":"24 Debugging","text":""},{"location":"belajar-javascript/04-best-practices/25-Error-Handling/","title":"25 Error Handling","text":""},{"location":"belajar-javascript/04-best-practices/26-Performance/","title":"26 Performance","text":""},{"location":"belajar-javascript/04-best-practices/27-Refactor/","title":"27 Refactor","text":""},{"location":"belajar-javascript/04-best-practices/28-Testing/","title":"28 Testing","text":""},{"location":"belajar-javascript/04-best-practices/29-Style-Guide/","title":"29 Style Guide","text":""},{"location":"belajar-javascript/04-best-practices/30-Komentar/","title":"30 Komentar","text":""},{"location":"belajar-javascript/05-mini-proyek/31-Kalkulator/","title":"31 Kalkulator","text":""},{"location":"belajar-javascript/05-mini-proyek/32-ToDo-List/","title":"32 ToDo List","text":""},{"location":"belajar-javascript/05-mini-proyek/33-Gallery/","title":"33 Gallery","text":""},{"location":"belajar-javascript/05-mini-proyek/34-Pencarian-Film/","title":"34 Pencarian Film","text":""},{"location":"belajar-javascript/05-mini-proyek/35-Quiz-App/","title":"35 Quiz App","text":""},{"location":"belajar-kotlin/01-Pengenalan-Kotlin/","title":"01 Pengenalan Kotlin.Md","text":"<p>Deskripsi: Pengenalan bahasa Kotlin dan fitur utamanya.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/02-Instalasi-dan-Setup/","title":"02 Instalasi Dan Setup.Md","text":"<p>Deskripsi: Cara instalasi Kotlin dan setup IDE (IntelliJ IDEA).</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/03-Variabel-dan-Tipe-Data/","title":"03 Variabel Dan Tipe Data.Md","text":"<p>Deskripsi: Penjelasan variabel, tipe data, dan konversi tipe di Kotlin.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/04-Percabangan/","title":"04 Percabangan.Md","text":"<p>Deskripsi: Cara menggunakan if, when, dan ekspresi kondisional.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/05-Perulangan/","title":"05 Perulangan.Md","text":"<p>Deskripsi: Penjelasan tentang perulangan dengan for, while, dan do-while.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/06-Function/","title":"06 Function.Md","text":"<p>Deskripsi: Fungsi dasar di Kotlin, parameter, return value, dan lambda.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/07-Kelas-dan-Objek/","title":"07 Kelas Dan Objek.Md","text":"<p>Deskripsi: Pemahaman dasar tentang kelas, objek, dan konstruktor.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/08-Properties-dan-Fields/","title":"08 Properties Dan Fields.Md","text":"<p>Deskripsi: Menjelaskan properti dan fields dalam Kotlin.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/09-Encapsulation/","title":"09 Encapsulation.Md","text":"<p>Deskripsi: Membahas tentang enkapsulasi dalam OOP.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/10-Inheritance/","title":"10 Inheritance.Md","text":"<p>Deskripsi: Penjelasan tentang pewarisan kelas di Kotlin.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/11-Polymorphism/","title":"11 Polymorphism.Md","text":"<p>Deskripsi: Polimorfisme pada Kotlin, penggunaan override dan super.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/12-Interface-dan-Abstract-Class/","title":"12 Interface Dan Abstract Class.Md","text":"<p>Deskripsi: Perbedaan dan penggunaan interface serta abstract class.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/13-Collection/","title":"13 Collection.Md","text":"<p>Deskripsi: Koleksi di Kotlin, seperti List, Set, dan Map.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/14-Lambda-dan-Higher-Order-Functions/","title":"14 Lambda Dan Higher Order Functions.Md","text":"<p>Deskripsi: Fungsi lambda dan higher-order functions di Kotlin.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/15-Coroutines/","title":"15 Coroutines.Md","text":"<p>Deskripsi: Pengenalan coroutines di Kotlin untuk concurrency.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/16-Null-Safety/","title":"16 Null Safety.Md","text":"<p>Deskripsi: Menjelaskan tentang null safety dan penggunaan ?, !!, dan ?:.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/17-Extension-Functions/","title":"17 Extension Functions.Md","text":"<p>Deskripsi: Cara membuat dan menggunakan extension functions di Kotlin.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/18-Serialization-dan-Deserialization/","title":"18 Serialization Dan Deserialization.Md","text":"<p>Deskripsi: Penggunaan Gson atau kotlinx.serialization di Kotlin.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/19-Testing-di-Kotlin/","title":"19 Testing Di Kotlin.Md","text":"<p>Deskripsi: Teknik-teknik unit testing di Kotlin, menggunakan JUnit dan Assert.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-kotlin/20-Multi-Platform-Development/","title":"20 Multi Platform Development.Md","text":"<p>Deskripsi: Membahas Kotlin Multiplatform untuk pengembangan aplikasi lintas platform.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/01-Pengenalan-SQL/","title":"01 Pengenalan Sql.Md","text":"<p>Deskripsi: Pengenalan tentang SQL, tujuan dan kegunaannya.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/02-Instalasi-dan-Setup/","title":"02 Instalasi Dan Setup.Md","text":"<p>Deskripsi: Cara instalasi MySQL atau PostgreSQL dan setup DBMS.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/03-Dasar-Dasar-SQL/","title":"03 Dasar Dasar Sql.Md","text":"<p>Deskripsi: Dasar-dasar SQL, termasuk sintaks dasar dan query SELECT.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/04-SELECT-Statement/","title":"04 Select Statement.Md","text":"<p>Deskripsi: Penggunaan SELECT untuk mengambil data dari database.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/05-Clauses-SQL/","title":"05 Clauses Sql.Md","text":"<p>Deskripsi: Penjelasan tentang WHERE, ORDER BY, GROUP BY, dan HAVING.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/06-JOIN/","title":"06 Join.Md","text":"<p>Deskripsi: Menggabungkan tabel menggunakan INNER JOIN, LEFT JOIN, RIGHT JOIN, dan FULL JOIN.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/07-Subquery/","title":"07 Subquery.Md","text":"<p>Deskripsi: Penggunaan subquery dalam SQL.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/08-Insert-Update-Delete/","title":"08 Insert Update Delete.Md","text":"<p>Deskripsi: Cara menambah, memperbarui, dan menghapus data menggunakan INSERT, UPDATE, dan DELETE.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/09-Constraints/","title":"09 Constraints.Md","text":"<p>Deskripsi: Penjelasan tentang constraints seperti PRIMARY KEY, FOREIGN KEY, UNIQUE, dan CHECK.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/10-Tipe-Data-SQL/","title":"10 Tipe Data Sql.Md","text":"<p>Deskripsi: Jenis-jenis tipe data yang digunakan di SQL seperti INT, VARCHAR, DATE, dll.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/11-Index/","title":"11 Index.Md","text":"<p>Deskripsi: Penggunaan dan keuntungan index dalam query SQL.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/12-Views/","title":"12 Views.Md","text":"<p>Deskripsi: Penjelasan tentang views di SQL dan cara menggunakannya.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/13-Stored-Procedures/","title":"13 Stored Procedures.Md","text":"<p>Deskripsi: Cara membuat dan menggunakan stored procedures dalam SQL.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/14-Transactions/","title":"14 Transactions.Md","text":"<p>Deskripsi: Pengenalan transaksi SQL, ACID, dan penggunaan COMMIT dan ROLLBACK.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/15-Performance-Tuning/","title":"15 Performance Tuning.Md","text":"<p>Deskripsi: Tips dan trik untuk optimasi query SQL.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/16-SQL-Functions/","title":"16 Sql Functions.Md","text":"<p>Deskripsi: Penggunaan built-in functions seperti COUNT, AVG, SUM, dll.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/17-Data-Integrity/","title":"17 Data Integrity.Md","text":"<p>Deskripsi: Menjaga integritas data menggunakan SQL (constraints, referential integrity).</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/18-Backup-dan-Restore/","title":"18 Backup Dan Restore.Md","text":"<p>Deskripsi: Cara melakukan backup dan restore database.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/19-Database-Design/","title":"19 Database Design.Md","text":"<p>Deskripsi: Konsep dasar desain database dan normalisasi.</p> <p>Tuliskan materi di sini.</p>"},{"location":"belajar-sql/20-Advanced-Queries/","title":"20 Advanced Queries.Md","text":"<p>Deskripsi: Query lanjutan seperti UNION, CASE, dan analitik lainnya.</p> <p>Tuliskan materi di sini.</p>"},{"location":"javascript/01-intro/","title":"\ud83d\udc4b Selamat Datang di Dunia JavaScript!","text":"<p>JavaScript (biasa disingkat JS) adalah bahasa pemrograman yang digunakan untuk membuat halaman web menjadi interaktif dan dinamis. Kalau kamu pernah klik tombol yang muncul animasi, form yang bisa dicek langsung validasinya, atau bahkan game di browser\u2014besar kemungkinan itu dibuat pakai JavaScript.</p>"},{"location":"javascript/01-intro/#apa-itu-javascript","title":"\ud83e\udde0 Apa Itu JavaScript?","text":"<p>JavaScript adalah bahasa pemrograman tingkat tinggi yang berjalan di web browser maupun di luar browser (Node.js).</p> <p>Dulu JavaScript cuma bisa jalan di browser, tapi sekarang dengan bantuan Node.js, JavaScript bisa juga dipakai buat bikin: - Backend website (kayak PHP atau Python) - Aplikasi mobile (React Native) - Aplikasi desktop (Electron) - Bahkan Internet of Things (IoT)!</p>"},{"location":"javascript/01-intro/#kenapa-harus-belajar-javascript","title":"\ud83d\udd0d Kenapa Harus Belajar JavaScript?","text":"<p>\ud83d\udd25 Karena JavaScript itu:</p> <ul> <li>Wajib hukumnya buat Frontend Web Development</li> <li>Bisa dipakai buat Fullstack Development (Frontend + Backend)</li> <li>Salah satu bahasa yang paling banyak dicari perusahaan</li> <li>Banyak tools dan komunitasnya \u2014 artinya kamu gak ngoding sendirian</li> <li>Asik dipelajari! Sintaksnya cukup mudah dan fleksibel</li> </ul>"},{"location":"javascript/01-intro/#sejarah-singkat","title":"\ud83d\udd70\ufe0f Sejarah Singkat","text":"<ul> <li>1995: Dibuat oleh Brendan Eich dalam waktu 10 hari. Dulu namanya \"Mocha\" \u2192 lalu \"LiveScript\" \u2192 akhirnya jadi JavaScript (walau nggak ada hubungannya sama Java).</li> <li>1997: Jadi standar internasional dengan nama ECMAScript (ES)</li> <li>ES6 (2015): Update besar-besaran. Tambah fitur keren kayak <code>let</code>, <code>const</code>, arrow function, class, dan lain-lain.</li> <li>Sekarang terus berkembang dan makin kuat!</li> </ul>"},{"location":"javascript/01-intro/#javascript-digunakan-di-mana","title":"\ud83d\udee0\ufe0f JavaScript Digunakan Di Mana?","text":"<ul> <li>\ud83c\udf10 Website \u2192 Interaktif, animasi, validasi form, dll</li> <li>\ud83d\udda5\ufe0f Web App \u2192 Aplikasi yang jalan di browser (Gmail, Notion)</li> <li>\ud83d\udcf1 Mobile App \u2192 React Native, Ionic</li> <li>\ud83e\udde0 Machine Learning \u2192 TensorFlow.js</li> <li>\ud83d\udd27 Backend Server \u2192 Node.js</li> <li>\ud83d\udcdf IoT &amp; Game \u2192 Yes, bisa juga!</li> </ul>"},{"location":"javascript/01-intro/#gimana-cara-menjalankan-javascript","title":"\ud83d\ude80 Gimana Cara Menjalankan JavaScript?","text":""},{"location":"javascript/01-intro/#1-langsung-di-browser-console","title":"1. Langsung di Browser (Console)","text":"<p>Buka browser (Chrome, Firefox, Edge), lalu tekan <code>F12</code> \u2192 buka tab \"Console\", ketik ini:</p> <pre><code>console.log(\"Halo dunia!\");\n</code></pre> <p>Boom! JavaScript jalan!</p>"},{"location":"javascript/01-intro/#2-langsung-di-file-html","title":"2. Langsung di File HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;Belajar JS&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Halo Dunia!&lt;/h1&gt;\n    &lt;script&gt;\n      console.log(\"Saya belajar JavaScript!\");\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"javascript/01-intro/#3-menggunakan-nodejs-di-luar-browser","title":"3. Menggunakan Node.js (di luar browser)","text":"<p>Install Node.js \u2192 buka terminal:</p> <pre><code>node\n&gt; console.log(\"Halo dunia dari Node.js!\");\n</code></pre> <p>Atau simpan di file <code>hello.js</code> lalu jalankan:</p> <pre><code>node hello.js\n</code></pre>"},{"location":"javascript/01-intro/#apa-yang-akan-kamu-pelajari-selanjutnya","title":"\ud83d\udcda Apa yang Akan Kamu Pelajari Selanjutnya?","text":"<p>Perjalanan ini baru dimulai... Di bagian Pemula ini, kamu akan belajar:</p> <ol> <li>Variabel &amp; Tipe Data</li> <li>Operator dan Perbandingan</li> <li>Struktur Kontrol (if, loop, switch)</li> <li>Array &amp; Object</li> <li>Fungsi dan Scope</li> </ol> <p>Tenang, semuanya dijelasin dengan gaya santai dan banyak contoh real.</p>"},{"location":"javascript/01-intro/#penutup","title":"\u2728 Penutup","text":"<p>Belajar JavaScript itu kayak naik sepeda\u2014agak oleng di awal, tapi makin lama makin lancar dan seru. Jadi gas terus, dan jangan takut ngulang materi. Jangan cuma dibaca doang\u2014praktik itu wajib!</p> <p>\u201cPractice makes progress, not perfect. Tapi progress jauh lebih baik daripada stuck.\u201d</p> <p>Let's go! \ud83d\ude80</p> <p>```</p>"},{"location":"javascript/02-variabel/","title":"\ud83d\udd21 Variabel di JavaScript","text":"<p>Variabel adalah wadah untuk menyimpan data. Kayak laci\u2014kita taruh sesuatu di dalamnya, terus kita bisa ambil lagi nanti.</p> <p>Di JavaScript, kita bisa buat variabel dengan 3 cara:</p> <pre><code>var\nlet\nconst\n</code></pre>"},{"location":"javascript/02-variabel/#var-yang-tua-tapi-masih-ada","title":"\ud83e\uddd3 <code>var</code> \u2014 Yang Tua Tapi Masih Ada","text":"<pre><code>var nama = \"Marno\";\nconsole.log(nama); // Output: Marno\n</code></pre>"},{"location":"javascript/02-variabel/#tapi-hati-hati","title":"\u26a0\ufe0f Tapi hati-hati:","text":"<ul> <li>Bisa dideklarasi ulang (<code>redeclaration</code>)</li> <li>Scope-nya function, bukan block</li> <li>Kena hoisting (naik ke atas)</li> </ul> <p>\ud83d\udeab Saran: Hindari <code>var</code>, karena sering bikin bug misterius</p>"},{"location":"javascript/02-variabel/#let-favorit-developer","title":"\ud83e\uddd1\u200d\ud83d\udcbb <code>let</code> \u2014 Favorit Developer","text":"<pre><code>let umur = 25;\numur = 26; // \u2705 bisa diubah\nconsole.log(umur);\n</code></pre>"},{"location":"javascript/02-variabel/#kelebihan","title":"\u2705 Kelebihan:","text":"<ul> <li>Scope-nya block (aman!)</li> <li>Tidak bisa dideklarasi ulang dalam scope yang sama</li> </ul> <pre><code>let umur = 25;\nlet umur = 30; // \u274c error\n</code></pre>"},{"location":"javascript/02-variabel/#const-konstanta-tetap-selamanya","title":"\ud83d\udd12 <code>const</code> \u2014 Konstanta, Tetap Selamanya","text":"<pre><code>const negara = \"Malaysia\";\nconsole.log(negara);\n</code></pre>"},{"location":"javascript/02-variabel/#catatan","title":"\u26a0\ufe0f Catatan:","text":"<ul> <li>Tidak bisa diubah nilainya</li> <li>Tapi kalau isi-nya object atau array, isinya bisa diubah:</li> </ul> <pre><code>const data = [1, 2, 3];\ndata.push(4);       // \u2705 Boleh\ndata = [1, 2, 3, 4]; // \u274c Error\n</code></pre>"},{"location":"javascript/02-variabel/#perbandingan-cepat","title":"\ud83d\udd0d Perbandingan Cepat","text":"Keyword Bisa diubah Bisa deklarasi ulang Scope Hoisting <code>var</code> \u2705 Ya \u2705 Ya Function \u2705 Ya <code>let</code> \u2705 Ya \u274c Tidak Block \u274c Tidak <code>const</code> \u274c Tidak \u274c Tidak Block \u274c Tidak"},{"location":"javascript/02-variabel/#tips-best-practice","title":"\ud83e\udde0 Tips &amp; Best Practice","text":"<p>\u2705 Gunakan <code>const</code> by default \ud83d\udd01 Gunakan <code>let</code> jika perlu mengubah nilainya \u274c Hindari <code>var</code>, kecuali kamu lagi audit kode zaman Majapahit</p>"},{"location":"javascript/02-variabel/#contoh-real-life","title":"\ud83c\udfaf Contoh Real-life","text":"<pre><code>const namaDepan = \"Andi\";\nlet saldo = 10000;\n\nsaldo += 5000;\n\nconsole.log(`Halo ${namaDepan}, saldo Anda: Rp${saldo}`);\n</code></pre> <p>Output:</p> <pre><code>Halo Andi, saldo Anda: Rp15000\n</code></pre>"},{"location":"javascript/02-variabel/#kesimpulan","title":"\ud83d\udcac Kesimpulan","text":"<ul> <li>Variabel = tempat simpan data</li> <li>Gunakan <code>let</code> dan <code>const</code>, jauhi <code>var</code></li> <li>Pahami scope dan mutability (bisa diubah atau tidak)</li> </ul> <p>Selanjutnya kita akan bahas tentang Tipe Data. Yuk lanjut! ```</p>"},{"location":"javascript/03-tipe-data/","title":"\ud83e\uddee Tipe Data di JavaScript","text":"<p>Tipe data (atau data types) menentukan jenis informasi yang bisa disimpan dalam variabel. Misalnya, apakah itu angka, teks, atau bahkan objek kompleks. Di JavaScript, ada beberapa tipe data yang perlu kamu kenal.</p>"},{"location":"javascript/03-tipe-data/#1-tipe-data-primitif","title":"1. Tipe Data Primitif","text":"<p>Tipe data primitif adalah tipe data dasar yang tidak dapat diubah setelah dideklarasikan. Berikut tipe data primitif di JavaScript:</p>"},{"location":"javascript/03-tipe-data/#number-angka","title":"\ud83d\udd22 Number (Angka)","text":"<p>Untuk menyimpan angka, baik bulat maupun desimal.</p> <pre><code>let umur = 25;           // Integer\nlet harga = 100.50;      // Float\nlet pi = 3.14159;        // Pi, decimal\n</code></pre>"},{"location":"javascript/03-tipe-data/#string-teks","title":"\ud83c\udd70\ufe0f String (Teks)","text":"<p>Untuk menyimpan teks. String bisa menggunakan tanda kutip ganda (<code>\"</code>) atau kutip tunggal (<code>'</code>).</p> <pre><code>let nama = \"Marno\";\nlet alamat = 'Malaysia';\nlet kalimat = \"Halo, apa kabar?\";\n</code></pre>"},{"location":"javascript/03-tipe-data/#boolean-benarsalah","title":"\u2696\ufe0f Boolean (Benar/Salah)","text":"<p>Hanya ada dua nilai: <code>true</code> atau <code>false</code>.</p> <pre><code>let isAdmin = true;\nlet isLoggedIn = false;\n</code></pre>"},{"location":"javascript/03-tipe-data/#null","title":"\ud83c\udfc6 Null","text":"<p>Tipe data ini menunjukkan bahwa variabel sengaja dikosongkan atau tidak memiliki nilai.</p> <pre><code>let dataKosong = null;\n</code></pre>"},{"location":"javascript/03-tipe-data/#undefined","title":"\ud83d\udd32 Undefined","text":"<p>Tipe data ini berarti variabel belum diberi nilai sama sekali.</p> <pre><code>let belumDitetapkan;\nconsole.log(belumDitetapkan); // Output: undefined\n</code></pre>"},{"location":"javascript/03-tipe-data/#symbol-es6","title":"\ud83d\udca5 Symbol (ES6)","text":"<p>Digunakan untuk membuat nilai unik. Biasanya digunakan dalam aplikasi yang lebih kompleks.</p> <pre><code>let id = Symbol(\"id\");\nconsole.log(id); // Output: Symbol(id)\n</code></pre>"},{"location":"javascript/03-tipe-data/#bigint-es11","title":"\ud83e\udde9 BigInt (ES11)","text":"<p>Tipe data untuk angka yang sangat besar (lebih besar dari <code>Number.MAX_SAFE_INTEGER</code>).</p> <pre><code>let angkaBesar = 1234567890123456789012345678901234567890n;\nconsole.log(angkaBesar); // Output: 1234567890123456789012345678901234567890n\n</code></pre>"},{"location":"javascript/03-tipe-data/#2-tipe-data-non-primitif-referensi","title":"2. Tipe Data Non-Primitif (Referensi)","text":"<p>Tipe data non-primitif adalah tipe data yang bisa diubah, dan nilainya bisa mengacu ke tempat lain. Contohnya adalah Object dan Array.</p>"},{"location":"javascript/03-tipe-data/#object","title":"\ud83d\udce6 Object","text":"<p>Digunakan untuk menyimpan pasangan key-value (seperti dictionary).</p> <pre><code>let person = {\n  nama: \"Marno\",\n  umur: 25,\n  alamat: \"Malaysia\"\n};\n\nconsole.log(person.nama); // Output: Marno\nconsole.log(person.umur); // Output: 25\n</code></pre>"},{"location":"javascript/03-tipe-data/#array","title":"\ud83d\udcda Array","text":"<p>Digunakan untuk menyimpan beberapa nilai dalam satu variabel.</p> <pre><code>let warna = [\"merah\", \"biru\", \"hijau\"];\nconsole.log(warna[0]); // Output: merah\nconsole.log(warna[1]); // Output: biru\n</code></pre>"},{"location":"javascript/03-tipe-data/#3-tipe-data-lainnya","title":"3. Tipe Data Lainnya","text":""},{"location":"javascript/03-tipe-data/#nan-not-a-number","title":"NaN (Not a Number)","text":"<p>Tipe data ini muncul ketika operasi yang dilakukan menghasilkan nilai yang tidak valid untuk angka, seperti pembagian dengan nol.</p> <pre><code>let hasil = 0 / 0;\nconsole.log(hasil); // Output: NaN\n</code></pre>"},{"location":"javascript/03-tipe-data/#infinity-dan-infinity","title":"Infinity dan -Infinity","text":"<p>Representasi angka yang lebih besar dari angka terbesar yang bisa ditangani oleh JavaScript (positif atau negatif).</p> <pre><code>let angkaPositif = 1 / 0;\nlet angkaNegatif = -1 / 0;\n\nconsole.log(angkaPositif); // Output: Infinity\nconsole.log(angkaNegatif); // Output: -Infinity\n</code></pre>"},{"location":"javascript/03-tipe-data/#4-konversi-tipe-data-type-conversion","title":"4. Konversi Tipe Data (Type Conversion)","text":"<p>JavaScript bisa otomatis mengonversi tipe data saat diperlukan. Namun, kamu juga bisa melakukan konversi manual:</p>"},{"location":"javascript/03-tipe-data/#string-ke-number","title":"\ud83d\udd04 String ke Number","text":"<pre><code>let angka = \"123\";\nlet angkaKeNumber = Number(angka);  // Konversi ke Number\nconsole.log(angkaKeNumber); // Output: 123\n</code></pre>"},{"location":"javascript/03-tipe-data/#number-ke-string","title":"\ud83d\udd04 Number ke String","text":"<pre><code>let angka = 123;\nlet angkaKeString = String(angka);  // Konversi ke String\nconsole.log(angkaKeString); // Output: \"123\"\n</code></pre>"},{"location":"javascript/03-tipe-data/#5-tips-best-practice","title":"5. Tips &amp; Best Practice","text":"<ul> <li>Gunakan tipe data yang tepat: Pilih <code>Number</code> untuk angka, <code>String</code> untuk teks, dan <code>Boolean</code> untuk kondisi (true/false).</li> <li>Pahami perbedaan antara <code>null</code> dan <code>undefined</code>: <code>null</code> adalah nilai yang sengaja dihilangkan, sedangkan <code>undefined</code> berarti variabel belum diberi nilai.</li> <li>Cek tipe data menggunakan <code>typeof</code>:   <code>js   console.log(typeof \"Hello\");   // Output: string   console.log(typeof 25);        // Output: number   console.log(typeof true);      // Output: boolean</code></li> </ul>"},{"location":"javascript/03-tipe-data/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Tipe data adalah jenis informasi yang disimpan dalam variabel.</li> <li>JavaScript memiliki berbagai tipe data, baik yang primitif (Number, String, Boolean) maupun non-primitif (Object, Array).</li> <li>Pahami dan gunakan tipe data yang sesuai dengan kebutuhanmu.</li> </ul> <p>Selanjutnya, kita akan bahas tentang Operator. Siap untuk operasi matematika dan logika? Yuk lanjut! ```</p>"},{"location":"javascript/04-operator/","title":"\u2797 Operator di JavaScript","text":"<p>Operator digunakan untuk melakukan operasi pada variabel dan nilai. Di JavaScript, ada berbagai jenis operator yang bisa digunakan untuk berbagai keperluan.</p>"},{"location":"javascript/04-operator/#1-operator-aritmatika","title":"1. Operator Aritmatika","text":"<p>Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, dan pembagian.</p>"},{"location":"javascript/04-operator/#penjumlahan","title":"\ud83d\udd22 Penjumlahan (+)","text":"<pre><code>let a = 5;\nlet b = 3;\nlet hasil = a + b;  // 8\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/04-operator/#pengurangan-","title":"\u2796 Pengurangan (-)","text":"<pre><code>let a = 10;\nlet b = 4;\nlet hasil = a - b;  // 6\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/04-operator/#perkalian","title":"\u2716\ufe0f Perkalian (*)","text":"<pre><code>let a = 4;\nlet b = 2;\nlet hasil = a * b;  // 8\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/04-operator/#pembagian","title":"\u2797 Pembagian (/)","text":"<pre><code>let a = 10;\nlet b = 2;\nlet hasil = a / b;  // 5\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/04-operator/#modulus","title":"\u2797 Modulus (%)","text":"<p>Operator modulus memberikan sisa hasil bagi.</p> <pre><code>let a = 10;\nlet b = 3;\nlet hasil = a % b;  // 1\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/04-operator/#pangkatkan","title":"\ud83d\udd3c Pangkatkan ()**","text":"<p>Operator eksponen digunakan untuk menghitung pangkat.</p> <pre><code>let a = 2;\nlet b = 3;\nlet hasil = a ** b;  // 8 (2^3)\nconsole.log(hasil);\n</code></pre>"},{"location":"javascript/04-operator/#2-operator-penugasan","title":"2. Operator Penugasan","text":"<p>Operator penugasan digunakan untuk memberikan nilai pada variabel.</p>"},{"location":"javascript/04-operator/#tugas","title":"\ud83d\udcdd Tugas (=)","text":"<pre><code>let x = 5;\n</code></pre>"},{"location":"javascript/04-operator/#penugasan-dengan-penjumlahan","title":"\u2795 Penugasan dengan Penjumlahan (+=)","text":"<pre><code>let x = 10;\nx += 5;  // x = x + 5\nconsole.log(x); // Output: 15\n</code></pre>"},{"location":"javascript/04-operator/#penugasan-dengan-pengurangan-","title":"\u2796 Penugasan dengan Pengurangan (-=)","text":"<pre><code>let x = 10;\nx -= 5;  // x = x - 5\nconsole.log(x); // Output: 5\n</code></pre>"},{"location":"javascript/04-operator/#penugasan-dengan-perkalian","title":"\u2716\ufe0f Penugasan dengan Perkalian (*=)","text":"<pre><code>let x = 10;\nx *= 2;  // x = x * 2\nconsole.log(x); // Output: 20\n</code></pre>"},{"location":"javascript/04-operator/#penugasan-dengan-pembagian","title":"\u2797 Penugasan dengan Pembagian (/=)","text":"<pre><code>let x = 20;\nx /= 4;  // x = x / 4\nconsole.log(x); // Output: 5\n</code></pre>"},{"location":"javascript/04-operator/#3-operator-perbandingan","title":"3. Operator Perbandingan","text":"<p>Operator perbandingan digunakan untuk membandingkan dua nilai dan menghasilkan nilai Boolean (<code>true</code> atau <code>false</code>).</p>"},{"location":"javascript/04-operator/#sama-dengan","title":"\ud83c\udfc6 Sama dengan (==)","text":"<pre><code>let a = 5;\nlet b = 5;\nconsole.log(a == b);  // Output: true\n</code></pre>"},{"location":"javascript/04-operator/#tidak-sama-dengan","title":"\ud83d\uded1 Tidak sama dengan (!=)","text":"<pre><code>let a = 5;\nlet b = 3;\nconsole.log(a != b);  // Output: true\n</code></pre>"},{"location":"javascript/04-operator/#sama-dengan-secara-tipe-dan-nilai","title":"\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 Sama dengan secara tipe dan nilai (===)","text":"<pre><code>let a = 5;\nlet b = \"5\";\nconsole.log(a === b);  // Output: false (tipe berbeda)\n</code></pre>"},{"location":"javascript/04-operator/#tidak-sama-dengan-secara-tipe-dan-nilai","title":"\u274c Tidak sama dengan secara tipe dan nilai (!==)","text":"<pre><code>let a = 5;\nlet b = \"5\";\nconsole.log(a !== b);  // Output: true (tipe berbeda)\n</code></pre>"},{"location":"javascript/04-operator/#lebih-besar-dari","title":"\ud83d\udd3c Lebih besar dari (&gt;)","text":"<pre><code>let a = 5;\nlet b = 3;\nconsole.log(a &gt; b);  // Output: true\n</code></pre>"},{"location":"javascript/04-operator/#lebih-kecil-dari","title":"\ud83d\udd3d Lebih kecil dari (&lt;)","text":"<pre><code>let a = 3;\nlet b = 5;\nconsole.log(a &lt; b);  // Output: true\n</code></pre>"},{"location":"javascript/04-operator/#lebih-besar-atau-sama-dengan","title":"\ud83d\udccf Lebih besar atau sama dengan (&gt;=)","text":"<pre><code>let a = 5;\nlet b = 5;\nconsole.log(a &gt;= b);  // Output: true\n</code></pre>"},{"location":"javascript/04-operator/#lebih-kecil-atau-sama-dengan","title":"\ud83d\udccf Lebih kecil atau sama dengan (&lt;=)","text":"<pre><code>let a = 3;\nlet b = 5;\nconsole.log(a &lt;= b);  // Output: true\n</code></pre>"},{"location":"javascript/04-operator/#4-operator-logika","title":"4. Operator Logika","text":"<p>Operator logika digunakan untuk menggabungkan beberapa kondisi.</p>"},{"location":"javascript/04-operator/#and","title":"\ud83d\udfe2 AND (&amp;&amp;)","text":"<p>Mengevaluasi menjadi <code>true</code> jika kedua kondisi benar.</p> <pre><code>let a = 5;\nlet b = 10;\nconsole.log(a &gt; 0 &amp;&amp; b &gt; 5);  // Output: true\n</code></pre>"},{"location":"javascript/04-operator/#or","title":"\ud83d\udd34 OR (||)","text":"<p>Mengevaluasi menjadi <code>true</code> jika salah satu kondisi benar.</p> <pre><code>let a = 5;\nlet b = 3;\nconsole.log(a &gt; 0 || b &gt; 5);  // Output: true\n</code></pre>"},{"location":"javascript/04-operator/#not","title":"\u274c NOT (!)","text":"<p>Mengevaluasi kebalikan dari kondisi.</p> <pre><code>let a = true;\nconsole.log(!a);  // Output: false\n</code></pre>"},{"location":"javascript/04-operator/#5-operator-ternary","title":"5. Operator Ternary","text":"<p>Operator ternary adalah cara singkat untuk menulis <code>if</code>-<code>else</code> dalam satu baris.</p> <pre><code>let usia = 18;\nlet status = usia &gt;= 18 ? \"Dewasa\" : \"Anak-anak\";\nconsole.log(status);  // Output: Dewasa\n</code></pre>"},{"location":"javascript/04-operator/#6-operator-bitwise-lanjutan","title":"6. Operator Bitwise (Lanjutan)","text":"<p>Operator bitwise beroperasi pada level bit. Biasanya digunakan untuk optimasi atau manipulasi bit-level dalam aplikasi yang membutuhkan performa tinggi.</p> <p>Contoh penggunaan:</p> <pre><code>let a = 5;  // 0101\nlet b = 3;  // 0011\nconsole.log(a &amp; b);  // Output: 1 (0101 &amp; 0011)\n</code></pre>"},{"location":"javascript/04-operator/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Operator Aritmatika: Digunakan untuk operasi matematika dasar seperti penjumlahan, pengurangan, dll.</li> <li>Operator Penugasan: Memudahkan kita dalam memberi nilai dan melakukan operasi langsung pada variabel.</li> <li>Operator Perbandingan: Digunakan untuk membandingkan dua nilai, hasilnya adalah <code>true</code> atau <code>false</code>.</li> <li>Operator Logika: Digunakan untuk menggabungkan beberapa kondisi logika.</li> <li>Operator Ternary: Cara singkat untuk membuat percabangan dengan satu baris kode.</li> </ul> <p>Selanjutnya, kita akan belajar tentang Struktur Kontrol (if, switch, loop). Yuk lanjut! ```</p>"},{"location":"javascript/05-control-flow/","title":"\ud83d\udee0\ufe0f Struktur Kontrol di JavaScript","text":"<p>Struktur kontrol adalah cara untuk menentukan jalannya eksekusi program berdasarkan kondisi tertentu atau mengulangi operasi. Di JavaScript, ada beberapa jenis struktur kontrol seperti percabangan dan perulangan.</p>"},{"location":"javascript/05-control-flow/#1-percabangan-conditional-statements","title":"1. Percabangan (Conditional Statements)","text":"<p>Percabangan memungkinkan kita untuk mengevaluasi kondisi dan mengeksekusi kode berdasarkan hasil evaluasi tersebut.</p>"},{"location":"javascript/05-control-flow/#if-statement","title":"\ud83d\udccc If Statement","text":"<p><code>if</code> digunakan untuk mengevaluasi sebuah kondisi. Jika kondisi tersebut benar (true), maka kode di dalam blok <code>if</code> akan dieksekusi.</p> <pre><code>let angka = 10;\nif (angka &gt; 5) {\n  console.log(\"Angka lebih besar dari 5\");\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#if-else-statement","title":"\ud83d\udccc If-Else Statement","text":"<p><code>if-else</code> memungkinkan kita untuk mengevaluasi kondisi dan memberikan alternatif jika kondisi tersebut tidak benar (false).</p> <pre><code>let angka = 3;\nif (angka &gt; 5) {\n  console.log(\"Angka lebih besar dari 5\");\n} else {\n  console.log(\"Angka tidak lebih besar dari 5\");\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#if-else-if-else-statement","title":"\ud83d\udccc If-Else If-Else Statement","text":"<p>Jika kamu memiliki lebih dari dua kondisi yang perlu dievaluasi, kamu bisa menggunakan <code>else if</code> untuk memeriksa kondisi lain.</p> <pre><code>let angka = 7;\nif (angka &gt; 10) {\n  console.log(\"Angka lebih besar dari 10\");\n} else if (angka &gt; 5) {\n  console.log(\"Angka lebih besar dari 5 tapi kurang dari atau sama dengan 10\");\n} else {\n  console.log(\"Angka kurang dari atau sama dengan 5\");\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#2-operator-logika-untuk-percabangan","title":"2. Operator Logika untuk Percabangan","text":"<p>Operator logika sering digunakan dalam kondisi <code>if</code> untuk mengevaluasi beberapa kondisi sekaligus.</p>"},{"location":"javascript/05-control-flow/#and","title":"\ud83d\udccc AND (&amp;&amp;)","text":"<p><code>&amp;&amp;</code> digunakan untuk memastikan semua kondisi dalam <code>if</code> bernilai <code>true</code>.</p> <pre><code>let a = 5;\nlet b = 10;\nif (a &gt; 0 &amp;&amp; b &gt; 5) {\n  console.log(\"Kedua kondisi benar\");\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#or","title":"\ud83d\udccc OR (||)","text":"<p><code>||</code> digunakan untuk memastikan salah satu kondisi dalam <code>if</code> bernilai <code>true</code>.</p> <pre><code>let a = 3;\nlet b = 10;\nif (a &gt; 0 || b &gt; 5) {\n  console.log(\"Salah satu kondisi benar\");\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#not","title":"\ud83d\udccc NOT (!)","text":"<p><code>!</code> digunakan untuk membalikkan nilai dari kondisi.</p> <pre><code>let a = true;\nif (!a) {\n  console.log(\"Kondisi a adalah false\");\n} else {\n  console.log(\"Kondisi a adalah true\");\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#3-switch-statement","title":"3. Switch Statement","text":"<p><code>switch</code> digunakan untuk memeriksa nilai dari suatu ekspresi terhadap beberapa kemungkinan nilai yang disebut dengan case. Jika nilai ekspresi cocok dengan salah satu <code>case</code>, maka kode dalam blok <code>case</code> tersebut akan dieksekusi.</p>"},{"location":"javascript/05-control-flow/#sintaks-switch","title":"\ud83d\udccc Sintaks Switch","text":"<pre><code>let warna = \"merah\";\nswitch (warna) {\n  case \"merah\":\n    console.log(\"Ini adalah warna merah\");\n    break;\n  case \"biru\":\n    console.log(\"Ini adalah warna biru\");\n    break;\n  default:\n    console.log(\"Warna tidak dikenali\");\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#penjelasan","title":"\ud83d\udccc Penjelasan:","text":"<ul> <li><code>case</code>: Mengecek apakah ekspresi cocok dengan nilai tersebut.</li> <li><code>break</code>: Menghentikan eksekusi setelah menemukan kecocokan.</li> <li><code>default</code>: Jika tidak ada yang cocok dengan <code>case</code>, maka blok kode di <code>default</code> yang akan dieksekusi.</li> </ul>"},{"location":"javascript/05-control-flow/#4-perulangan-loops","title":"4. Perulangan (Loops)","text":"<p>Perulangan digunakan untuk mengulangi eksekusi kode beberapa kali berdasarkan kondisi tertentu.</p>"},{"location":"javascript/05-control-flow/#for-loop","title":"\ud83d\udccc For Loop","text":"<p><code>for</code> digunakan ketika kita tahu jumlah iterasi yang pasti. Biasanya digunakan untuk perulangan dengan angka yang terstruktur.</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(i);  // Output: 0 1 2 3 4\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#while-loop","title":"\ud83d\udccc While Loop","text":"<p><code>while</code> digunakan ketika kita tidak tahu berapa kali perulangan yang akan dilakukan, tapi ingin melanjutkan selama kondisi tertentu terpenuhi.</p> <pre><code>let i = 0;\nwhile (i &lt; 5) {\n  console.log(i);  // Output: 0 1 2 3 4\n  i++;\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#do-while-loop","title":"\ud83d\udccc Do-While Loop","text":"<p><code>do-while</code> mirip dengan <code>while</code>, tetapi perbedaan utamanya adalah kode di dalam blok <code>do</code> akan dijalankan setidaknya sekali, bahkan jika kondisinya salah.</p> <pre><code>let i = 0;\ndo {\n  console.log(i);  // Output: 0 1 2 3 4\n  i++;\n} while (i &lt; 5);\n</code></pre>"},{"location":"javascript/05-control-flow/#5-break-dan-continue","title":"5. Break dan Continue","text":"<p><code>break</code> dan <code>continue</code> adalah dua perintah yang dapat digunakan untuk mengontrol alur perulangan.</p>"},{"location":"javascript/05-control-flow/#break","title":"\ud83d\udccc Break","text":"<p><code>break</code> digunakan untuk keluar dari perulangan, meskipun kondisi perulangan masih memenuhi.</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  if (i === 3) {\n    break;  // Menghentikan perulangan saat i = 3\n  }\n  console.log(i);  // Output: 0 1 2\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#continue","title":"\ud83d\udccc Continue","text":"<p><code>continue</code> digunakan untuk melewati sisa iterasi saat kondisi tertentu dipenuhi dan melanjutkan ke iterasi berikutnya.</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  if (i === 3) {\n    continue;  // Melewati iterasi saat i = 3\n  }\n  console.log(i);  // Output: 0 1 2 4\n}\n</code></pre>"},{"location":"javascript/05-control-flow/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Percabangan: Gunakan <code>if</code>, <code>else if</code>, dan <code>else</code> untuk mengevaluasi kondisi dan membuat keputusan.</li> <li>Switch: Digunakan untuk memilih antara banyak kondisi dengan cara yang lebih terstruktur.</li> <li>Perulangan: Gunakan <code>for</code>, <code>while</code>, atau <code>do-while</code> untuk mengulangi kode berdasarkan kondisi.</li> <li>Break dan Continue: Kontrol alur perulangan dengan <code>break</code> (keluar dari perulangan) dan <code>continue</code> (melanjutkan ke iterasi berikutnya).</li> </ul> <p>Sekarang, kamu sudah siap untuk mulai mengendalikan alur program menggunakan percabangan dan perulangan! Selanjutnya, kita akan belajar tentang Array dan bagaimana cara menyimpan dan mengelola data dalam JavaScript. ```</p> <p>Itu dia, penjelasan lengkap tentang Control Flow di JavaScript! Kalau sudah oke, aku siap untuk lanjut ke materi berikutnya, atau kalau ada bagian yang perlu diubah atau ditambah, tinggal kasih tahu!</p>"},{"location":"javascript/06-array-object/","title":"\ud83d\uddc3\ufe0f Array dan Object di JavaScript","text":"<p>Di JavaScript, Array dan Object adalah tipe data yang digunakan untuk menyimpan koleksi data. Array adalah struktur data yang menyimpan beberapa nilai dalam satu variabel, sementara Object menyimpan data dalam bentuk pasangan key-value. Keduanya sering digunakan untuk mengelola dan memanipulasi data dalam aplikasi.</p>"},{"location":"javascript/06-array-object/#1-array","title":"1. Array","text":"<p>Array adalah koleksi dari elemen-elemen yang terurut, dan setiap elemen dapat diakses dengan menggunakan indeks. Indeks array dimulai dari angka <code>0</code>.</p>"},{"location":"javascript/06-array-object/#membuat-array","title":"\ud83d\udccc Membuat Array","text":"<p>Array dapat dibuat menggunakan tanda kurung siku <code>[]</code> dan dipisahkan dengan koma.</p> <pre><code>let angka = [1, 2, 3, 4, 5];\nlet warna = [\"merah\", \"biru\", \"hijau\"];\n</code></pre>"},{"location":"javascript/06-array-object/#mengakses-elemen-array","title":"\ud83d\udccc Mengakses Elemen Array","text":"<p>Untuk mengakses elemen di dalam array, kita menggunakan indeks.</p> <pre><code>let angka = [1, 2, 3, 4, 5];\nconsole.log(angka[0]);  // Output: 1\nconsole.log(angka[3]);  // Output: 4\n</code></pre>"},{"location":"javascript/06-array-object/#mengubah-elemen-array","title":"\ud83d\udccc Mengubah Elemen Array","text":"<p>Kamu bisa mengubah nilai elemen array dengan mengakses indeks tertentu dan memberi nilai baru.</p> <pre><code>let warna = [\"merah\", \"biru\", \"hijau\"];\nwarna[1] = \"kuning\";  // Mengubah elemen kedua (indeks 1)\nconsole.log(warna);    // Output: [\"merah\", \"kuning\", \"hijau\"]\n</code></pre>"},{"location":"javascript/06-array-object/#menambahkan-elemen-ke-array","title":"\ud83d\udccc Menambahkan Elemen ke Array","text":"<p>Gunakan metode <code>push()</code> untuk menambahkan elemen di akhir array.</p> <pre><code>let warna = [\"merah\", \"biru\"];\nwarna.push(\"hijau\");\nconsole.log(warna);  // Output: [\"merah\", \"biru\", \"hijau\"]\n</code></pre> <p>Untuk menambahkan elemen di awal array, gunakan <code>unshift()</code>.</p> <pre><code>let warna = [\"biru\", \"hijau\"];\nwarna.unshift(\"merah\");\nconsole.log(warna);  // Output: [\"merah\", \"biru\", \"hijau\"]\n</code></pre>"},{"location":"javascript/06-array-object/#menghapus-elemen-dari-array","title":"\ud83d\udccc Menghapus Elemen dari Array","text":"<p>Untuk menghapus elemen dari akhir array, gunakan metode <code>pop()</code>.</p> <pre><code>let warna = [\"merah\", \"biru\", \"hijau\"];\nwarna.pop();\nconsole.log(warna);  // Output: [\"merah\", \"biru\"]\n</code></pre> <p>Untuk menghapus elemen dari awal array, gunakan <code>shift()</code>.</p> <pre><code>let warna = [\"merah\", \"biru\", \"hijau\"];\nwarna.shift();\nconsole.log(warna);  // Output: [\"biru\", \"hijau\"]\n</code></pre>"},{"location":"javascript/06-array-object/#array-length","title":"\ud83d\udccc Array Length","text":"<p>Kamu bisa mendapatkan jumlah elemen dalam array dengan menggunakan properti <code>length</code>.</p> <pre><code>let warna = [\"merah\", \"biru\", \"hijau\"];\nconsole.log(warna.length);  // Output: 3\n</code></pre>"},{"location":"javascript/06-array-object/#2-object","title":"2. Object","text":"<p>Object adalah tipe data yang digunakan untuk menyimpan data dalam bentuk pasangan key-value. Setiap key berfungsi sebagai identifikasi dan value adalah data yang terkait dengan key tersebut.</p>"},{"location":"javascript/06-array-object/#membuat-object","title":"\ud83d\udccc Membuat Object","text":"<p>Object dapat dibuat menggunakan tanda kurung kurawal <code>{}</code> dan pasangan key-value dipisahkan dengan tanda titik dua <code>:</code>.</p> <pre><code>let mobil = {\n  merek: \"Toyota\",\n  model: \"Corolla\",\n  tahun: 2020\n};\n</code></pre>"},{"location":"javascript/06-array-object/#mengakses-nilai-dalam-object","title":"\ud83d\udccc Mengakses Nilai dalam Object","text":"<p>Untuk mengakses nilai dalam object, kamu bisa menggunakan dot notation atau bracket notation.</p>"},{"location":"javascript/06-array-object/#dot-notation","title":"Dot Notation","text":"<pre><code>console.log(mobil.merek);  // Output: \"Toyota\"\nconsole.log(mobil.tahun);  // Output: 2020\n</code></pre>"},{"location":"javascript/06-array-object/#bracket-notation","title":"Bracket Notation","text":"<pre><code>console.log(mobil[\"merek\"]);  // Output: \"Toyota\"\nconsole.log(mobil[\"model\"]);  // Output: \"Corolla\"\n</code></pre>"},{"location":"javascript/06-array-object/#menambah-atau-mengubah-properti-object","title":"\ud83d\udccc Menambah atau Mengubah Properti Object","text":"<p>Untuk menambah atau mengubah properti, kamu bisa menggunakan dot notation atau bracket notation.</p> <pre><code>mobil.warna = \"Hitam\";  // Menambahkan properti warna\nmobil[\"harga\"] = 20000; // Menambahkan properti harga\nconsole.log(mobil);\n</code></pre> <p>Jika properti sudah ada, maka nilainya akan diubah.</p> <pre><code>mobil.merek = \"Honda\";  // Mengubah nilai properti merek\nconsole.log(mobil.merek);  // Output: \"Honda\"\n</code></pre>"},{"location":"javascript/06-array-object/#menghapus-properti-object","title":"\ud83d\udccc Menghapus Properti Object","text":"<p>Untuk menghapus properti dalam object, kamu bisa menggunakan operator <code>delete</code>.</p> <pre><code>delete mobil.tahun;\nconsole.log(mobil);  // Output: { merek: \"Honda\", model: \"Corolla\", warna: \"Hitam\", harga: 20000 }\n</code></pre>"},{"location":"javascript/06-array-object/#mengakses-semua-key-dan-value-dalam-object","title":"\ud83d\udccc Mengakses Semua Key dan Value dalam Object","text":"<p>Untuk mendapatkan semua key dari object, kamu bisa menggunakan <code>Object.keys()</code>. Sedangkan untuk mendapatkan semua value, gunakan <code>Object.values()</code>.</p> <pre><code>let mobil = {\n  merek: \"Honda\",\n  model: \"Civic\",\n  tahun: 2021\n};\n\nconsole.log(Object.keys(mobil));  // Output: [\"merek\", \"model\", \"tahun\"]\nconsole.log(Object.values(mobil));  // Output: [\"Honda\", \"Civic\", 2021]\n</code></pre>"},{"location":"javascript/06-array-object/#3-array-of-objects","title":"3. Array of Objects","text":"<p>Seringkali kita bekerja dengan array yang berisi objek-objek, terutama dalam situasi di mana kita perlu menyimpan koleksi data kompleks, seperti daftar pengguna, produk, atau entitas lainnya.</p>"},{"location":"javascript/06-array-object/#contoh-array-of-objects","title":"\ud83d\udccc Contoh Array of Objects","text":"<pre><code>let users = [\n  { id: 1, nama: \"John\", usia: 30 },\n  { id: 2, nama: \"Jane\", usia: 25 },\n  { id: 3, nama: \"Bob\", usia: 35 }\n];\n\nconsole.log(users[1].nama);  // Output: \"Jane\"\n</code></pre>"},{"location":"javascript/06-array-object/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Array: Digunakan untuk menyimpan daftar data yang terurut. Elemen-elemen array diakses menggunakan indeks, dimulai dari <code>0</code>.</li> <li>Object: Digunakan untuk menyimpan data dalam bentuk pasangan key-value, yang memungkinkan kita untuk mengakses nilai menggunakan key.</li> <li>Array of Objects: Sering digunakan untuk menyimpan koleksi objek dengan struktur yang lebih kompleks, seperti daftar pengguna atau produk.</li> </ul> <p>Dengan memahami cara kerja Array dan Object, kamu akan lebih mudah mengelola data dalam aplikasi JavaScript! Sekarang, kita akan lanjut ke pembahasan tentang Fungsi Array dan berbagai metode untuk memanipulasi array. ```</p>"},{"location":"javascript/07-fungsi/","title":"\ud83d\udd27 Fungsi di JavaScript","text":"<p>Fungsi adalah sekumpulan kode yang bisa digunakan kembali untuk melakukan tugas tertentu. Fungsi bisa menerima input (parameter) dan mengembalikan hasil (output). Fungsi membantu membuat kode lebih terstruktur, modular, dan lebih mudah dipelihara.</p>"},{"location":"javascript/07-fungsi/#1-deklarasi-fungsi","title":"1. Deklarasi Fungsi","text":"<p>Fungsi bisa dideklarasikan dengan menggunakan kata kunci <code>function</code>, diikuti dengan nama fungsi, parameter (opsional), dan blok kode yang berisi logika fungsi.</p>"},{"location":"javascript/07-fungsi/#sintaks-fungsi","title":"\ud83d\udcdd Sintaks Fungsi:","text":"<pre><code>function namaFungsi(parameter1, parameter2) {\n  // Blok kode\n  return hasil;  // Optional, tergantung kebutuhan\n}\n</code></pre>"},{"location":"javascript/07-fungsi/#contoh-fungsi-sederhana","title":"\ud83d\udccc Contoh Fungsi Sederhana","text":"<pre><code>function sapa() {\n  console.log(\"Halo, selamat datang!\");\n}\n\nsapa();  // Output: Halo, selamat datang!\n</code></pre>"},{"location":"javascript/07-fungsi/#2-fungsi-dengan-parameter","title":"2. Fungsi dengan Parameter","text":"<p>Parameter adalah input yang diberikan ke dalam fungsi. Fungsi bisa menerima lebih dari satu parameter.</p>"},{"location":"javascript/07-fungsi/#contoh-fungsi-dengan-parameter","title":"\ud83d\udcdd Contoh Fungsi dengan Parameter","text":"<pre><code>function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);  // Memanggil fungsi dengan argumen 5 dan 3\nconsole.log(hasil);         // Output: 8\n</code></pre>"},{"location":"javascript/07-fungsi/#3-fungsi-dengan-return-value","title":"3. Fungsi dengan Return Value","text":"<p>Fungsi dapat mengembalikan (return) nilai setelah melakukan operasi. Nilai yang dikembalikan bisa disimpan dalam variabel atau langsung digunakan.</p>"},{"location":"javascript/07-fungsi/#contoh-fungsi-dengan-return","title":"\ud83d\udcdd Contoh Fungsi dengan Return","text":"<pre><code>function kali(a, b) {\n  return a * b;\n}\n\nlet hasil = kali(4, 5);  // Memanggil fungsi dan menyimpan hasilnya\nconsole.log(hasil);       // Output: 20\n</code></pre>"},{"location":"javascript/07-fungsi/#4-fungsi-anonim-anonymous-function","title":"4. Fungsi Anonim (Anonymous Function)","text":"<p>Fungsi anonim adalah fungsi yang tidak memiliki nama dan sering digunakan di tempat-tempat yang membutuhkan fungsi sementara, seperti dalam event handler atau callback.</p>"},{"location":"javascript/07-fungsi/#contoh-fungsi-anonim","title":"\ud83d\udcdd Contoh Fungsi Anonim","text":"<pre><code>let salam = function() {\n  console.log(\"Halo, dunia!\");\n};\n\nsalam();  // Output: Halo, dunia!\n</code></pre>"},{"location":"javascript/07-fungsi/#5-fungsi-arrow-arrow-function-es6","title":"5. Fungsi Arrow (Arrow Function) \u2014 ES6","text":"<p>Fungsi arrow (fungsi panah) adalah sintaks yang lebih ringkas untuk mendeklarasikan fungsi, dan memiliki <code>this</code> yang berbeda dengan fungsi biasa.</p>"},{"location":"javascript/07-fungsi/#sintaks-arrow-function","title":"\ud83d\udcdd Sintaks Arrow Function","text":"<pre><code>const namaFungsi = (parameter1, parameter2) =&gt; {\n  // Blok kode\n  return hasil;\n}\n</code></pre>"},{"location":"javascript/07-fungsi/#contoh-arrow-function","title":"\ud83d\udccc Contoh Arrow Function","text":"<pre><code>const kurang = (a, b) =&gt; a - b;\n\nlet hasil = kurang(9, 4);\nconsole.log(hasil);  // Output: 5\n</code></pre>"},{"location":"javascript/07-fungsi/#arrow-function-tanpa-parameter","title":"\ud83d\udcdd Arrow Function Tanpa Parameter","text":"<pre><code>const sapa = () =&gt; console.log(\"Selamat pagi!\");\nsapa();  // Output: Selamat pagi!\n</code></pre>"},{"location":"javascript/07-fungsi/#6-fungsi-sebagai-parameter-callback","title":"6. Fungsi sebagai Parameter (Callback)","text":"<p>Kamu bisa mengirimkan fungsi sebagai parameter ke fungsi lain. Fungsi ini sering disebut callback function.</p>"},{"location":"javascript/07-fungsi/#contoh-fungsi-callback","title":"\ud83d\udcdd Contoh Fungsi Callback","text":"<pre><code>function prosesAngka(angka, operasi) {\n  return operasi(angka);\n}\n\nlet hasil1 = prosesAngka(5, function(num) {\n  return num * num;  // Memanggil fungsi anonim untuk mengkuadratkan angka\n});\n\nlet hasil2 = prosesAngka(10, num =&gt; num - 2);  // Menggunakan arrow function\nconsole.log(hasil1);  // Output: 25\nconsole.log(hasil2);  // Output: 8\n</code></pre>"},{"location":"javascript/07-fungsi/#7-fungsi-dengan-parameter-default-default-parameters-es6","title":"7. Fungsi dengan Parameter Default (Default Parameters) \u2014 ES6","text":"<p>Kadang kita ingin memberi nilai default pada parameter fungsi jika tidak ada argumen yang diberikan. Ini bisa dilakukan dengan default parameter.</p>"},{"location":"javascript/07-fungsi/#contoh-default-parameter","title":"\ud83d\udcdd Contoh Default Parameter","text":"<pre><code>function sapa(nama = \"Guest\") {\n  console.log(\"Halo, \" + nama);\n}\n\nsapa();         // Output: Halo, Guest\nsapa(\"Marno\");  // Output: Halo, Marno\n</code></pre>"},{"location":"javascript/07-fungsi/#8-fungsi-rekursif","title":"8. Fungsi Rekursif","text":"<p>Fungsi rekursif adalah fungsi yang memanggil dirinya sendiri untuk menyelesaikan masalah. Fungsi ini biasanya digunakan untuk menyelesaikan masalah yang memiliki struktur yang bersifat berulang, seperti menghitung faktorial atau fibonacci.</p>"},{"location":"javascript/07-fungsi/#contoh-fungsi-rekursif-faktorial","title":"\ud83d\udcdd Contoh Fungsi Rekursif: Faktorial","text":"<pre><code>function faktorial(n) {\n  if (n === 0) {  // Basis dari rekursi\n    return 1;\n  }\n  return n * faktorial(n - 1);  // Rekursi\n}\n\nconsole.log(faktorial(5));  // Output: 120\n</code></pre>"},{"location":"javascript/07-fungsi/#9-fungsi-dengan-rest-parameter-rest-parameters-es6","title":"9. Fungsi dengan Rest Parameter (Rest Parameters) \u2014 ES6","text":"<p>Rest parameter memungkinkan kita untuk mengumpulkan parameter fungsi yang tidak terbatas jumlahnya menjadi sebuah array.</p>"},{"location":"javascript/07-fungsi/#contoh-rest-parameter","title":"\ud83d\udcdd Contoh Rest Parameter","text":"<pre><code>function hitungTotal(...angka) {\n  return angka.reduce((total, num) =&gt; total + num, 0);\n}\n\nconsole.log(hitungTotal(1, 2, 3, 4));  // Output: 10\n</code></pre>"},{"location":"javascript/07-fungsi/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Fungsi adalah blok kode yang dapat digunakan kembali untuk menyelesaikan tugas tertentu.</li> <li>Fungsi dapat memiliki parameter untuk menerima input dan mengembalikan nilai (menggunakan <code>return</code>).</li> <li>Ada beberapa tipe fungsi seperti fungsi anonim, arrow function, dan fungsi rekursif.</li> <li>Rest parameter memungkinkan kita untuk menangani jumlah parameter yang fleksibel.</li> </ul> <p>Selanjutnya, kita akan belajar tentang Struktur Kontrol seperti <code>if</code>, <code>switch</code>, dan <code>loop</code>. Siap untuk mulai percabangan dan perulangan? Yuk lanjut! ```</p>"},{"location":"javascript/08-struktur-data/","title":"\ud83e\uddf1 Struktur Data di JavaScript","text":"<p>Struktur data adalah cara menyimpan dan mengorganisasi data agar mudah digunakan secara efisien. JavaScript menyediakan beberapa struktur data bawaan yang penting untuk dipahami\u2014terutama saat membangun aplikasi yang lebih kompleks.</p> <p>Di level ini, kita akan bahas:</p> <ul> <li>Array</li> <li>Object</li> <li>Set</li> <li>Map</li> <li>WeakSet &amp; WeakMap (bonus buat yang suka deep dive)</li> </ul>"},{"location":"javascript/08-struktur-data/#1-array-revisit","title":"1. Array Revisit \ud83d\udd01","text":"<p>Kita udah kenalan sama array di level pemula, tapi sekarang kita bahas fitur-fitur lanjutannya.</p>"},{"location":"javascript/08-struktur-data/#metode-penting-array","title":"Metode Penting Array:","text":"Method Fungsi <code>push()</code> Menambah elemen di akhir array <code>pop()</code> Menghapus elemen terakhir dari array <code>shift()</code> Menghapus elemen pertama <code>unshift()</code> Menambah elemen di awal array <code>slice()</code> Mengambil sebagian array (tidak merusak asli) <code>splice()</code> Menambah/menghapus elemen (modifikasi array) <code>map()</code> Membuat array baru dari setiap elemen <code>filter()</code> Menyaring elemen <code>reduce()</code> Menggabungkan nilai"},{"location":"javascript/08-struktur-data/#contoh","title":"Contoh:","text":"<pre><code>const angka = [1, 2, 3, 4, 5];\nconst hasil = angka.map(num =&gt; num * 2); // [2, 4, 6, 8, 10]\n</code></pre>"},{"location":"javascript/08-struktur-data/#2-object-revisit","title":"2. Object Revisit \ud83e\uddf0","text":"<p>Object menyimpan data dalam bentuk pasangan key-value.</p> <pre><code>const user = {\n  nama: \"Marno\",\n  umur: 22,\n  alamat: \"Kebun Sawit\"\n};\n\nconsole.log(user[\"nama\"]);     // Marno\nconsole.log(user.umur);        // 22\n</code></pre>"},{"location":"javascript/08-struktur-data/#fitur-modern","title":"Fitur Modern:","text":"<ul> <li>Destructuring: memecah object jadi variabel</li> <li>Optional Chaining: akses properti dengan aman</li> <li>Spread Operator: menggabungkan atau menyalin object</li> </ul> <pre><code>const { nama, umur } = user;\nconsole.log(nama); // Marno\n</code></pre>"},{"location":"javascript/08-struktur-data/#3-set","title":"3. Set \ud83e\uddfa","text":"<p><code>Set</code> adalah koleksi nilai unik. Gak ada elemen duplikat.</p> <pre><code>const buah = new Set([\"apel\", \"mangga\", \"apel\"]);\nconsole.log(buah); // Set { 'apel', 'mangga' }\n</code></pre>"},{"location":"javascript/08-struktur-data/#metode-set","title":"Metode Set:","text":"<ul> <li><code>add()</code></li> <li><code>delete()</code></li> <li><code>has()</code></li> <li><code>size</code></li> </ul>"},{"location":"javascript/08-struktur-data/#4-map","title":"4. Map \ud83d\uddfa\ufe0f","text":"<p><code>Map</code> mirip object, tapi key-nya bisa tipe data apapun dan teratur berdasarkan urutan penambahan.</p> <pre><code>const myMap = new Map();\nmyMap.set(\"nama\", \"Marno\");\nmyMap.set(123, \"Nomor ID\");\n\nconsole.log(myMap.get(\"nama\")); // Marno\n</code></pre>"},{"location":"javascript/08-struktur-data/#keunggulan-map","title":"Keunggulan Map:","text":"<ul> <li>Bisa pakai object atau tipe data lain sebagai key</li> <li>Lebih konsisten performanya daripada object jika digunakan sebagai dictionary</li> </ul>"},{"location":"javascript/08-struktur-data/#5-weakset-weakmap-advanced-stuff","title":"5. WeakSet &amp; WeakMap (Advanced Stuff) \ud83e\udde0","text":"<ul> <li><code>WeakSet</code> hanya bisa menyimpan object dan tidak dapat di-loop.</li> <li><code>WeakMap</code> hanya menerima object sebagai key dan memiliki memory management otomatis (GC friendly).</li> </ul> <p>Contoh:</p> <pre><code>let obj = { nama: \"Marno\" };\nconst ws = new WeakSet();\nws.add(obj);\n\nconst wm = new WeakMap();\nwm.set(obj, \"data rahasia\");\n</code></pre> <p>Catatan: Umumnya digunakan untuk caching dan pengelolaan data internal library/framework.</p>"},{"location":"javascript/08-struktur-data/#6-kapan-menggunakan-apa","title":"6. Kapan Menggunakan Apa?","text":"Kebutuhan Struktur Data Daftar elemen urut &amp; duplikat <code>Array</code> Key-value data biasa <code>Object</code> Kumpulan nilai unik <code>Set</code> Key-value dengan key fleksibel <code>Map</code> Caching atau private storage <code>WeakMap</code>, <code>WeakSet</code>"},{"location":"javascript/08-struktur-data/#7-kesimpulan","title":"7. Kesimpulan","text":"<p>Struktur data bukan cuma sekadar \"cara nyimpan data\", tapi fondasi dalam menulis program yang:</p> <ul> <li>\ud83d\udd04 Lebih efisien</li> <li>\ud83e\uddf9 Lebih rapi</li> <li>\ud83d\ude80 Lebih scalable</li> </ul> <p>Pahami struktur data = punya kekuatan untuk membuat program yang cepat dan powerful.</p> <p>\ud83e\udde0 Selanjutnya kita akan masuk ke dunia yang lebih dalam lagi, seperti OOP dan bagaimana cara bikin class kayak di Java atau Python. Yuk, gas terus belajar JS sampai level dewa! ```</p>"},{"location":"javascript/09-higher-order/","title":"\ud83c\udfd7\ufe0f Higher-Order Functions di JavaScript","text":"<p>Fungsi tingkat tinggi (Higher-Order Functions) adalah fungsi yang menerima satu atau lebih fungsi sebagai argumen atau mengembalikan fungsi sebagai hasil. Ini adalah konsep dasar dalam pemrograman fungsional dan digunakan secara luas dalam JavaScript untuk menangani koleksi data, manipulasi fungsi, dan banyak lagi.</p>"},{"location":"javascript/09-higher-order/#1-apa-itu-higher-order-functions","title":"1. Apa itu Higher-Order Functions?","text":"<p>Fungsi disebut higher-order jika: - Fungsi tersebut menerima satu atau lebih fungsi sebagai argumen. - Fungsi tersebut mengembalikan fungsi lain.</p> <p>Konsep ini memungkinkan kita untuk membuat kode lebih modular dan terstruktur, serta membuat fungsi lebih fleksibel dan dapat digunakan kembali.</p>"},{"location":"javascript/09-higher-order/#contoh-fungsi-tingkat-tinggi","title":"\ud83d\udccc Contoh Fungsi Tingkat Tinggi","text":"<p>Berikut adalah contoh fungsi yang menerima fungsi sebagai argumen:</p> <pre><code>function greet(name, callback) {\n  return `Hello, ${name}. ${callback()}`;\n}\n\nfunction sayGoodbye() {\n  return \"Goodbye!\";\n}\n\nconsole.log(greet(\"John\", sayGoodbye)); // Output: Hello, John. Goodbye!\n</code></pre> <p>Di sini, fungsi <code>greet()</code> adalah fungsi tingkat tinggi karena menerima fungsi <code>sayGoodbye()</code> sebagai argumen.</p>"},{"location":"javascript/09-higher-order/#2-fungsi-yang-mengembalikan-fungsi","title":"2. Fungsi yang Mengembalikan Fungsi","text":"<p>Selain menerima fungsi sebagai argumen, fungsi tingkat tinggi juga bisa mengembalikan fungsi sebagai hasil. Berikut adalah contoh sederhana fungsi yang mengembalikan fungsi:</p> <pre><code>function multiplyBy(factor) {\n  return function(number) {\n    return number * factor;\n  };\n}\n\nconst multiplyBy2 = multiplyBy(2);\nconsole.log(multiplyBy2(5)); // Output: 10\n</code></pre> <p>Fungsi <code>multiplyBy()</code> mengembalikan fungsi lain yang kemudian digunakan untuk mengalikan angka dengan faktor yang ditentukan.</p>"},{"location":"javascript/09-higher-order/#3-fungsi-fungsi-tingkat-tinggi-dalam-javascript","title":"3. Fungsi-fungsi Tingkat Tinggi dalam JavaScript","text":"<p>JavaScript memiliki banyak metode built-in yang merupakan contoh dari higher-order functions. Beberapa di antaranya adalah metode array seperti map(), filter(), dan reduce().</p>"},{"location":"javascript/09-higher-order/#map","title":"\ud83d\udccc <code>map()</code>","text":"<p>Metode <code>map()</code> digunakan untuk membuat array baru dengan hasil pemanggilan fungsi pada setiap elemen dalam array.</p> <pre><code>const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(num =&gt; num * 2);\nconsole.log(doubled); // Output: [2, 4, 6, 8]\n</code></pre> <p>Fungsi yang diberikan pada <code>map()</code> dipanggil pada setiap elemen array, menghasilkan array baru dengan nilai yang dimodifikasi.</p>"},{"location":"javascript/09-higher-order/#filter","title":"\ud83d\udccc <code>filter()</code>","text":"<p>Metode <code>filter()</code> digunakan untuk membuat array baru yang hanya berisi elemen-elemen yang memenuhi kriteria yang ditentukan dalam fungsi.</p> <pre><code>const numbers = [1, 2, 3, 4, 5];\nconst evenNumbers = numbers.filter(num =&gt; num % 2 === 0);\nconsole.log(evenNumbers); // Output: [2, 4]\n</code></pre> <p>Di sini, fungsi yang diberikan pada <code>filter()</code> akan menyaring elemen-elemen yang genap dari array.</p>"},{"location":"javascript/09-higher-order/#reduce","title":"\ud83d\udccc <code>reduce()</code>","text":"<p>Metode <code>reduce()</code> digunakan untuk mengakumulasi nilai array menjadi satu nilai tunggal berdasarkan fungsi yang diberikan.</p> <pre><code>const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, num) =&gt; acc + num, 0);\nconsole.log(sum); // Output: 10\n</code></pre> <p>Fungsi yang diberikan pada <code>reduce()</code> menerima dua argumen: akumulator (<code>acc</code>) dan elemen saat ini (<code>num</code>). Setiap iterasi, nilai akumulator akan diperbarui dengan hasil fungsi tersebut.</p>"},{"location":"javascript/09-higher-order/#4-membuat-fungsi-tingkat-tinggi-sendiri","title":"4. Membuat Fungsi Tingkat Tinggi Sendiri","text":"<p>Kita bisa membuat fungsi tingkat tinggi yang lebih kompleks, seperti fungsi yang menggabungkan beberapa fungsi atau fungsi yang memodifikasi perilaku fungsi lain.</p>"},{"location":"javascript/09-higher-order/#contoh-fungsi-once","title":"\ud83d\udccc Contoh: Fungsi <code>once()</code>","text":"<p>Fungsi <code>once()</code> memastikan bahwa fungsi yang diberikan hanya akan dipanggil satu kali, tidak lebih.</p> <pre><code>function once(fn) {\n  let called = false;\n  return function() {\n    if (!called) {\n      fn();\n      called = true;\n    }\n  };\n}\n\nconst sayHelloOnce = once(() =&gt; console.log(\"Hello!\"));\nsayHelloOnce(); // Output: Hello!\nsayHelloOnce(); // Tidak ada output\n</code></pre> <p>Fungsi <code>once()</code> adalah contoh dari fungsi tingkat tinggi yang mengembalikan fungsi lain, yang hanya dapat dipanggil sekali.</p>"},{"location":"javascript/09-higher-order/#5-fungsi-bind-call-dan-apply","title":"5. Fungsi <code>bind()</code>, <code>call()</code>, dan <code>apply()</code>","text":"<p>Metode <code>bind()</code>, <code>call()</code>, dan <code>apply()</code> adalah contoh fungsi tingkat tinggi yang sering digunakan untuk mengubah konteks eksekusi suatu fungsi.</p>"},{"location":"javascript/09-higher-order/#bind","title":"\ud83d\udccc <code>bind()</code>","text":"<p>Metode <code>bind()</code> mengembalikan fungsi baru yang memiliki konteks tertentu (nilai <code>this</code>).</p> <pre><code>const person = {\n  name: \"Alice\",\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n};\n\nconst greetAlice = person.greet.bind(person);\ngreetAlice(); // Output: Hello, Alice\n</code></pre> <p>Dengan <code>bind()</code>, kita dapat mengikat fungsi ke objek tertentu.</p>"},{"location":"javascript/09-higher-order/#call-dan-apply","title":"\ud83d\udccc <code>call()</code> dan <code>apply()</code>","text":"<p>Metode <code>call()</code> dan <code>apply()</code> digunakan untuk memanggil fungsi dengan konteks tertentu, tetapi cara pengoperasian argumen berbeda.</p> <pre><code>function greet(greeting, punctuation) {\n  console.log(`${greeting}, ${this.name}${punctuation}`);\n}\n\nconst person = { name: \"Bob\" };\n\ngreet.call(person, \"Hello\", \"!\"); // Output: Hello, Bob!\ngreet.apply(person, [\"Hello\", \"!\"]); // Output: Hello, Bob!\n</code></pre> <p>Kedua metode ini memungkinkan kita untuk mengubah konteks (<code>this</code>) dan memanggil fungsi dengan parameter yang ditentukan.</p>"},{"location":"javascript/09-higher-order/#6-keuntungan-dan-kelemahan-fungsi-tingkat-tinggi","title":"6. Keuntungan dan Kelemahan Fungsi Tingkat Tinggi","text":""},{"location":"javascript/09-higher-order/#keuntungan","title":"\u2705 Keuntungan","text":"<ul> <li>Modularitas: Fungsi tingkat tinggi memungkinkan kita untuk memecah masalah besar menjadi bagian-bagian kecil yang lebih mudah dikelola.</li> <li>Reusable: Fungsi yang menerima atau mengembalikan fungsi lain dapat digunakan kembali di berbagai tempat.</li> <li>Mempermudah Asinkronus: Fungsi tingkat tinggi sering digunakan dalam penanganan asinkronus seperti callback, promise, dan async/await.</li> </ul>"},{"location":"javascript/09-higher-order/#kelemahan","title":"\u274c Kelemahan","text":"<ul> <li>Kompleksitas: Terlalu banyak penggunaan fungsi tingkat tinggi bisa membuat kode menjadi lebih sulit dimengerti.</li> <li>Performa: Jika tidak digunakan dengan bijak, fungsi tingkat tinggi bisa berdampak pada performa, terutama dalam operasi berulang pada data besar.</li> </ul>"},{"location":"javascript/09-higher-order/#7-kesimpulan","title":"7. Kesimpulan","text":"<p>Fungsi tingkat tinggi (Higher-Order Functions) adalah konsep penting dalam pemrograman JavaScript yang memungkinkan kita untuk menulis kode yang lebih modular dan fleksibel. Dengan menggunakan fungsi-fungsi seperti <code>map()</code>, <code>filter()</code>, dan <code>reduce()</code>, kita bisa lebih mudah menangani koleksi data. Memahami cara kerja fungsi tingkat tinggi adalah keterampilan yang sangat berharga dalam menulis kode yang efisien dan terstruktur.</p> <p>Sekarang, kita telah membahas tentang fungsi tingkat tinggi di JavaScript. Selanjutnya, kita akan melihat bagaimana konsep-konsep ini digunakan dalam berbagai pustaka dan framework JavaScript. ```</p>"},{"location":"javascript/10-async/","title":"\u23f3 Async Programming di JavaScript","text":"<p>Di JavaScript, beberapa operasi seperti pengambilan data dari server atau pembacaan file tidak dapat dilakukan secara langsung karena memerlukan waktu. Untuk itu, JavaScript menawarkan cara untuk menangani operasi-operasi tersebut secara asynchronous. Ini memungkinkan aplikasi tetap responsif dan tidak terblokir saat menjalankan operasi berat.</p>"},{"location":"javascript/10-async/#1-apa-itu-asynchronous-programming","title":"1. Apa itu Asynchronous Programming?","text":"<p>Asynchronous programming memungkinkan kode untuk dieksekusi secara non-blokir, yang berarti kode berikutnya dapat berjalan tanpa menunggu operasi yang sedang berlangsung selesai. Ini sangat penting ketika kita berurusan dengan tugas-tugas yang memakan waktu seperti membaca file, mengakses API, atau query database.</p>"},{"location":"javascript/10-async/#synchronous-vs-asynchronous","title":"\ud83d\udccc Synchronous vs Asynchronous","text":"<ul> <li>Synchronous: Proses yang dilakukan satu per satu. Kode akan menunggu operasi selesai sebelum melanjutkan ke operasi berikutnya.</li> <li>Asynchronous: Proses yang dapat berjalan secara bersamaan, memungkinkan operasi berikutnya untuk dijalankan tanpa menunggu operasi sebelumnya selesai.</li> </ul>"},{"location":"javascript/10-async/#contoh-synchronous","title":"\ud83d\udccc Contoh Synchronous","text":"<pre><code>console.log(\"Mulai\");\nconsole.log(\"Proses 1 selesai\");\nconsole.log(\"Proses 2 selesai\");\n</code></pre>"},{"location":"javascript/10-async/#contoh-asynchronous","title":"\ud83d\udccc Contoh Asynchronous","text":"<pre><code>console.log(\"Mulai\");\n\nsetTimeout(() =&gt; {\n  console.log(\"Proses 1 selesai\");\n}, 2000);  // Proses ini terjadi setelah 2 detik\n\nconsole.log(\"Proses 2 selesai\");\n</code></pre> <p>Pada contoh di atas, meskipun ada <code>setTimeout</code> yang memerlukan waktu 2 detik, JavaScript tidak menunggu dan langsung menjalankan <code>console.log(\"Proses 2 selesai\")</code>.</p>"},{"location":"javascript/10-async/#2-callback-functions","title":"2. Callback Functions","text":"<p>Callback adalah fungsi yang diberikan sebagai argumen kepada fungsi lain dan dijalankan setelah operasi asynchronous selesai.</p>"},{"location":"javascript/10-async/#contoh-callback","title":"\ud83d\udccc Contoh Callback","text":"<pre><code>function ambilData(callback) {\n  setTimeout(() =&gt; {\n    callback(\"Data berhasil diambil\");\n  }, 2000);\n}\n\nambilData((message) =&gt; {\n  console.log(message);  // Output: \"Data berhasil diambil\"\n});\n</code></pre> <p>Di sini, <code>ambilData</code> adalah fungsi yang menerima sebuah callback yang akan dijalankan setelah 2 detik.</p>"},{"location":"javascript/10-async/#3-promises","title":"3. Promises","text":"<p>Promise adalah objek yang mewakili penyelesaian atau kegagalan dari sebuah operasi asynchronous. Promise memiliki tiga keadaan:</p> <ol> <li>Pending: Janji belum diselesaikan.</li> <li>Fulfilled: Janji berhasil diselesaikan (resolved).</li> <li>Rejected: Janji gagal diselesaikan.</li> </ol>"},{"location":"javascript/10-async/#membuat-promise","title":"\ud83d\udccc Membuat Promise","text":"<pre><code>let promise = new Promise((resolve, reject) =&gt; {\n  let success = true;\n\n  if (success) {\n    resolve(\"Operasi berhasil\");\n  } else {\n    reject(\"Operasi gagal\");\n  }\n});\n\npromise.then((message) =&gt; {\n  console.log(message);  // Output: \"Operasi berhasil\"\n}).catch((message) =&gt; {\n  console.log(message);  // Jika terjadi error, tampilkan \"Operasi gagal\"\n});\n</code></pre> <ul> <li><code>resolve()</code> digunakan ketika operasi berhasil.</li> <li><code>reject()</code> digunakan ketika operasi gagal.</li> </ul>"},{"location":"javascript/10-async/#menggunakan-then-dan-catch","title":"\ud83d\udccc Menggunakan .then() dan .catch()","text":"<p><code>then()</code> digunakan untuk menangani hasil yang berhasil, sementara <code>catch()</code> digunakan untuk menangani error.</p> <pre><code>let promise = new Promise((resolve, reject) =&gt; {\n  let success = false;\n\n  if (success) {\n    resolve(\"Data berhasil diambil\");\n  } else {\n    reject(\"Data gagal diambil\");\n  }\n});\n\npromise\n  .then((data) =&gt; {\n    console.log(data);  // Output jika resolve\n  })\n  .catch((error) =&gt; {\n    console.log(error);  // Output jika reject\n  });\n</code></pre>"},{"location":"javascript/10-async/#4-asyncawait","title":"4. Async/Await","text":"<p><code>async/await</code> adalah cara modern untuk menangani operasi asynchronous di JavaScript dengan cara yang lebih mudah dibaca dan ditulis. <code>async</code> digunakan untuk mendeklarasikan fungsi yang akan mengembalikan sebuah Promise, dan <code>await</code> digunakan untuk menunggu penyelesaian dari sebuah Promise sebelum melanjutkan ke kode berikutnya.</p>"},{"location":"javascript/10-async/#menggunakan-asyncawait","title":"\ud83d\udccc Menggunakan async/await","text":"<pre><code>async function ambilData() {\n  let result = await new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(\"Data berhasil diambil\");\n    }, 2000);\n  });\n\n  console.log(result);  // Output: \"Data berhasil diambil\"\n}\n\nambilData();\n</code></pre> <ul> <li><code>await</code> hanya bisa digunakan di dalam fungsi yang dideklarasikan dengan <code>async</code>.</li> <li><code>await</code> menunggu sampai Promise selesai sebelum melanjutkan ke baris kode berikutnya.</li> </ul>"},{"location":"javascript/10-async/#5-error-handling-dengan-trycatch","title":"5. Error Handling dengan try/catch","text":"<p>Ketika menggunakan <code>async/await</code>, kita dapat menangani error dengan menggunakan blok <code>try/catch</code>.</p>"},{"location":"javascript/10-async/#contoh-penggunaan-trycatch","title":"\ud83d\udccc Contoh Penggunaan try/catch","text":"<pre><code>async function ambilData() {\n  try {\n    let result = await new Promise((resolve, reject) =&gt; {\n      let success = false;  // Simulasikan error\n      setTimeout(() =&gt; {\n        if (success) {\n          resolve(\"Data berhasil diambil\");\n        } else {\n          reject(\"Data gagal diambil\");\n        }\n      }, 2000);\n    });\n\n    console.log(result);\n  } catch (error) {\n    console.log(\"Error:\", error);  // Output: \"Error: Data gagal diambil\"\n  }\n}\n\nambilData();\n</code></pre> <p>Dengan <code>try/catch</code>, kita dapat menangani error yang mungkin terjadi selama proses asynchronous.</p>"},{"location":"javascript/10-async/#6-menggunakan-multiple-async-functions","title":"6. Menggunakan Multiple Async Functions","text":"<p>Jika kamu memiliki beberapa operasi asynchronous yang perlu dijalankan secara bersamaan, kamu bisa menggunakan <code>Promise.all()</code> untuk menunggu semua Promise selesai.</p>"},{"location":"javascript/10-async/#contoh-promiseall","title":"\ud83d\udccc Contoh Promise.all","text":"<pre><code>async function ambilData() {\n  let promise1 = new Promise((resolve) =&gt; setTimeout(() =&gt; resolve(\"Data 1 selesai\"), 2000));\n  let promise2 = new Promise((resolve) =&gt; setTimeout(() =&gt; resolve(\"Data 2 selesai\"), 3000));\n\n  let result = await Promise.all([promise1, promise2]);\n  console.log(result);  // Output: [\"Data 1 selesai\", \"Data 2 selesai\"]\n}\n\nambilData();\n</code></pre> <p><code>Promise.all()</code> akan menunggu hingga semua Promise dalam array selesai sebelum melanjutkan eksekusi.</p>"},{"location":"javascript/10-async/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Asynchronous Programming: Menangani operasi yang memerlukan waktu, seperti pengambilan data atau operasi IO, tanpa memblokir eksekusi program.</li> <li>Callback: Fungsi yang diberikan kepada fungsi lain dan dieksekusi setelah operasi asynchronous selesai.</li> <li>Promise: Representasi dari sebuah operasi asynchronous yang bisa berhasil atau gagal.</li> <li>async/await: Cara modern untuk menulis kode asynchronous dengan cara yang lebih mudah dibaca dan ditulis.</li> <li>Error Handling: Gunakan <code>try/catch</code> untuk menangani error yang terjadi pada operasi asynchronous.</li> </ul> <p>Dengan memahami konsep Async Programming, kamu bisa menulis kode JavaScript yang lebih efisien dan mudah dipahami. Selanjutnya, kita akan bahas tentang Event Loop dan bagaimana JavaScript mengelola operasi asynchronous di bawah tenda. ```</p>"},{"location":"javascript/11-modularisasi/","title":"\ud83e\udde9 Modularisasi di JavaScript","text":"<p>Modularisasi adalah teknik memecah program besar menjadi bagian-bagian kecil (modul) yang terpisah dan mandiri. Setiap modul memiliki tanggung jawab spesifik dan bisa digunakan kembali. Konsep ini sangat penting untuk menjaga kode tetap rapi, terorganisir, dan mudah dipelihara.</p>"},{"location":"javascript/11-modularisasi/#1-mengapa-perlu-modularisasi","title":"1. Mengapa Perlu Modularisasi?","text":"<p>Tanpa modularisasi, kode JavaScript bisa jadi seperti mi instan yang kebanyakan bumbu\u2014berantakan dan susah dipisah. Modularisasi membantu:</p> <ul> <li>Memecah kode menjadi bagian kecil yang terpisah.</li> <li>Menghindari penulisan ulang kode (reusability).</li> <li>Memudahkan testing, debugging, dan pengembangan tim.</li> <li>Meningkatkan keterbacaan dan maintainability.</li> </ul>"},{"location":"javascript/11-modularisasi/#2-modularisasi-tradisional-iife-namespace","title":"2. Modularisasi Tradisional: IIFE &amp; Namespace","text":"<p>Sebelum ES6, kita menggunakan IIFE (Immediately Invoked Function Expression) dan objek global sebagai \"namespace\".</p>"},{"location":"javascript/11-modularisasi/#iife-immediately-invoked-function-expression","title":"\ud83d\udccc IIFE (Immediately Invoked Function Expression)","text":"<pre><code>const MyModule = (function() {\n  const privateVar = \"Rahasia\";\n\n  function privateFunc() {\n    console.log(\"Fungsi private\");\n  }\n\n  return {\n    publicFunc: function() {\n      console.log(\"Fungsi public\");\n    }\n  };\n})();\n\nMyModule.publicFunc(); // Fungsi public\n</code></pre>"},{"location":"javascript/11-modularisasi/#namespace-objek-global","title":"\ud83d\udccc Namespace (Objek Global)","text":"<pre><code>const App = {};\nApp.sayHello = function(name) {\n  console.log(`Hello, ${name}`);\n};\nApp.sayHello(\"Marno\");\n</code></pre> <p>Kelemahannya: bisa terjadi konflik jika banyak modul memakai nama yang sama di global scope.</p>"},{"location":"javascript/11-modularisasi/#3-modularisasi-modern-dengan-es-modules-esm","title":"3. Modularisasi Modern dengan ES Modules (ESM)","text":"<p>Sejak ES6, JavaScript mendukung modularisasi native lewat <code>import</code> dan <code>export</code>.</p>"},{"location":"javascript/11-modularisasi/#export","title":"\ud83d\udee0\ufe0f Export","text":"<p>Ada dua jenis export: named export dan default export.</p>"},{"location":"javascript/11-modularisasi/#named-export","title":"Named Export","text":"<pre><code>// file: math.js\nexport const PI = 3.14;\nexport function tambah(a, b) {\n  return a + b;\n}\n</code></pre>"},{"location":"javascript/11-modularisasi/#default-export","title":"Default Export","text":"<pre><code>// file: greet.js\nexport default function(name) {\n  console.log(`Hello, ${name}`);\n}\n</code></pre>"},{"location":"javascript/11-modularisasi/#import","title":"\ud83d\udce5 Import","text":""},{"location":"javascript/11-modularisasi/#import-named","title":"Import Named","text":"<pre><code>// file: main.js\nimport { PI, tambah } from './math.js';\n\nconsole.log(tambah(2, 3)); // 5\n</code></pre>"},{"location":"javascript/11-modularisasi/#import-default","title":"Import Default","text":"<pre><code>// file: main.js\nimport greet from './greet.js';\n\ngreet('Marno'); // Hello, Marno\n</code></pre>"},{"location":"javascript/11-modularisasi/#import-semua","title":"Import Semua","text":"<pre><code>import * as MathUtils from './math.js';\n\nconsole.log(MathUtils.PI);\n</code></pre>"},{"location":"javascript/11-modularisasi/#4-struktur-proyek-modular","title":"4. Struktur Proyek Modular","text":"<p>Struktur folder modular sangat membantu dalam skala besar:</p> <pre><code>\ud83d\udce6project\n \u2523 \ud83d\udcc2modules\n \u2503 \u2523 \ud83d\udcdcmath.js\n \u2503 \u2523 \ud83d\udcdcuser.js\n \u2523 \ud83d\udcdcmain.js\n</code></pre> <p>Contoh isi <code>math.js</code>:</p> <pre><code>export function tambah(a, b) {\n  return a + b;\n}\n\nexport function kurang(a, b) {\n  return a - b;\n}\n</code></pre> <p>Lalu digunakan di <code>main.js</code>:</p> <pre><code>import { tambah, kurang } from './modules/math.js';\n\nconsole.log(tambah(10, 5)); // 15\n</code></pre>"},{"location":"javascript/11-modularisasi/#5-modularisasi-di-nodejs-commonjs","title":"5. Modularisasi di Node.js (CommonJS)","text":"<p>Jika kamu menggunakan Node.js, format modul sedikit berbeda (CommonJS).</p>"},{"location":"javascript/11-modularisasi/#export_1","title":"\ud83d\udce6 Export","text":"<pre><code>// file: utils.js\nconst sayHello = (name) =&gt; {\n  console.log(`Hi, ${name}`);\n};\n\nmodule.exports = { sayHello };\n</code></pre>"},{"location":"javascript/11-modularisasi/#import_1","title":"\ud83d\udce5 Import","text":"<pre><code>// file: index.js\nconst { sayHello } = require('./utils');\nsayHello('Marno');\n</code></pre> <p>Catatan: CommonJS masih dominan di banyak proyek Node.js, tapi bisa diganti ke ES Module (<code>\"type\": \"module\"</code> di <code>package.json</code>) jika dibutuhkan.</p>"},{"location":"javascript/11-modularisasi/#6-tips-modularisasi","title":"6. Tips Modularisasi","text":"<ul> <li>\ud83d\udca1 Satu file, satu tanggung jawab. Jangan gabung semua fungsi dalam satu file.</li> <li>\ud83d\udcc1 Gunakan folder untuk memisahkan domain aplikasi.</li> <li>\u2728 Gunakan <code>index.js</code> untuk ekspor ulang semua modul dari folder.</li> </ul> <p>Contoh:</p> <pre><code>// file: modules/index.js\nexport * from './math.js';\nexport * from './user.js';\n</code></pre>"},{"location":"javascript/11-modularisasi/#7-kesimpulan","title":"7. Kesimpulan","text":"<p>Modularisasi bikin hidup (dan ngoding) lebih damai. Dengan memecah kode jadi bagian-bagian kecil dan terpisah, kita bisa:</p> <ul> <li>Bekerja lebih cepat</li> <li>Menulis kode lebih bersih</li> <li>Mengelola proyek besar tanpa stres</li> </ul> <p>Mulai biasakan diri untuk menulis kode yang modular, karena ini jadi fondasi utama dalam membangun aplikasi modern, baik di frontend maupun backend.</p> <p>\ud83d\udcda Selanjutnya kita akan belajar tentang <code>NPM</code> dan cara menggunakan package pihak ketiga untuk memperkuat modul kita layaknya upgrade karakter di game RPG. Stay tuned! ```</p>"},{"location":"javascript/12-dom-event/","title":"\ud83d\uddb1\ufe0f DOM Events di JavaScript","text":"<p>DOM Events adalah salah satu fitur terpenting dalam pengembangan web interaktif. Ketika pengguna berinteraksi dengan halaman web (misalnya mengklik tombol, menggulir halaman, atau mengisi formulir), event akan terpicu. JavaScript memungkinkan kita untuk menangani event tersebut agar aplikasi kita lebih dinamis dan responsif.</p>"},{"location":"javascript/12-dom-event/#1-apa-itu-dom-events","title":"1. Apa itu DOM Events?","text":"<p>DOM (Document Object Model) adalah representasi struktur HTML dalam bentuk objek yang dapat dimanipulasi dengan JavaScript. DOM Events adalah kejadian atau interaksi yang terjadi pada elemen-elemen di dalam dokumen HTML, seperti klik, input data, atau perubahan status elemen.</p> <p>Contoh event: <code>click</code>, <code>keydown</code>, <code>submit</code>, <code>mouseover</code>, dan banyak lagi.</p>"},{"location":"javascript/12-dom-event/#2-jenis-jenis-event-di-javascript","title":"2. Jenis-jenis Event di JavaScript","text":"<p>Berikut adalah beberapa contoh event yang sering digunakan di JavaScript:</p> <ul> <li>click: Terjadi ketika elemen di klik.</li> <li>keydown: Terjadi ketika tombol pada keyboard ditekan.</li> <li>keyup: Terjadi ketika tombol pada keyboard dilepaskan.</li> <li>submit: Terjadi ketika formulir disubmit.</li> <li>mouseover: Terjadi ketika pointer mouse berada di atas elemen.</li> <li>mouseout: Terjadi ketika pointer mouse meninggalkan elemen.</li> </ul>"},{"location":"javascript/12-dom-event/#3-menambahkan-event-listener","title":"3. Menambahkan Event Listener","text":"<p>Untuk menangani event, kita dapat menggunakan metode <code>addEventListener()</code>. Metode ini memungkinkan kita untuk mendengarkan (listen) event yang terjadi pada elemen tertentu dan menjalankan fungsi callback ketika event tersebut dipicu.</p>"},{"location":"javascript/12-dom-event/#sintaks-addeventlistener","title":"\ud83d\udccc Sintaks <code>addEventListener()</code>","text":"<pre><code>element.addEventListener(event, callback, useCapture);\n</code></pre> <ul> <li>event: Nama event yang ingin didengarkan (misalnya <code>click</code>, <code>keydown</code>).</li> <li>callback: Fungsi yang akan dijalankan ketika event terjadi.</li> <li>useCapture: (Opsional) Parameter ini menentukan apakah event harus ditangani pada fase capture atau bubbling. Default-nya adalah <code>false</code> (bubbling).</li> </ul>"},{"location":"javascript/12-dom-event/#contoh-penggunaan-addeventlistener","title":"\ud83d\udccc Contoh Penggunaan <code>addEventListener</code>","text":"<pre><code>&lt;button id=\"myButton\"&gt;Klik Saya!&lt;/button&gt;\n\n&lt;script&gt;\n  const button = document.getElementById(\"myButton\");\n\n  button.addEventListener(\"click\", function() {\n    alert(\"Tombol diklik!\");\n  });\n&lt;/script&gt;\n</code></pre> <p>Di atas, kita mendengarkan event <code>click</code> pada tombol dengan ID <code>myButton</code>. Ketika tombol tersebut diklik, fungsi callback yang menampilkan alert akan dijalankan.</p>"},{"location":"javascript/12-dom-event/#4-event-bubbling-dan-capturing","title":"4. Event Bubbling dan Capturing","text":"<p>Event Bubbling dan Event Capturing adalah dua fase yang terjadi ketika event dipicu. Pada default-nya, event menggunakan bubbling.</p>"},{"location":"javascript/12-dom-event/#event-bubbling","title":"\ud83d\udccc Event Bubbling","text":"<p>Pada bubbling, event dimulai dari elemen yang paling dalam (target) dan menyebar ke elemen-elemen luar (parent).</p> <p>Contoh:</p> <pre><code>&lt;div id=\"outer\"&gt;\n  &lt;button id=\"inner\"&gt;Klik Saya!&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  const outerDiv = document.getElementById(\"outer\");\n  const innerButton = document.getElementById(\"inner\");\n\n  outerDiv.addEventListener(\"click\", function() {\n    alert(\"Outer div diklik!\");\n  });\n\n  innerButton.addEventListener(\"click\", function() {\n    alert(\"Button diklik!\");\n  });\n&lt;/script&gt;\n</code></pre> <p>Pada contoh ini, ketika tombol diklik, akan muncul dua alert: 1. \"Button diklik!\" 2. \"Outer div diklik!\"</p> <p>Ini terjadi karena event bubbling dari tombol menyebar ke elemen induk <code>div</code>.</p>"},{"location":"javascript/12-dom-event/#event-capturing","title":"\ud83d\udccc Event Capturing","text":"<p>Pada capturing, event dimulai dari elemen paling luar dan menyebar ke elemen paling dalam. Untuk menggunakan capturing, kamu harus mengatur parameter ketiga pada <code>addEventListener()</code> menjadi <code>true</code>.</p> <pre><code>outerDiv.addEventListener(\"click\", function() {\n  alert(\"Outer div diklik pada fase capturing!\");\n}, true);\n</code></pre>"},{"location":"javascript/12-dom-event/#5-menghapus-event-listener","title":"5. Menghapus Event Listener","text":"<p>Jika kita tidak lagi membutuhkan event listener, kita bisa menghapusnya menggunakan <code>removeEventListener()</code>.</p>"},{"location":"javascript/12-dom-event/#sintaks-removeeventlistener","title":"\ud83d\udccc Sintaks <code>removeEventListener()</code>","text":"<pre><code>element.removeEventListener(event, callback);\n</code></pre>"},{"location":"javascript/12-dom-event/#contoh-menghapus-event-listener","title":"\ud83d\udccc Contoh Menghapus Event Listener","text":"<pre><code>&lt;button id=\"myButton\"&gt;Klik Saya!&lt;/button&gt;\n\n&lt;script&gt;\n  const button = document.getElementById(\"myButton\");\n\n  function handleClick() {\n    alert(\"Tombol diklik!\");\n  }\n\n  button.addEventListener(\"click\", handleClick);\n\n  // Hapus event listener setelah 3 detik\n  setTimeout(function() {\n    button.removeEventListener(\"click\", handleClick);\n    alert(\"Event listener dihapus!\");\n  }, 3000);\n&lt;/script&gt;\n</code></pre> <p>Pada contoh ini, event listener untuk tombol akan dihapus setelah 3 detik. Jadi, tombol hanya bisa diklik satu kali dalam waktu 3 detik.</p>"},{"location":"javascript/12-dom-event/#6-event-object","title":"6. Event Object","text":"<p>Saat sebuah event terjadi, objek event yang berisi informasi terkait dengan event tersebut akan diteruskan ke fungsi callback. Dengan menggunakan objek ini, kita bisa mendapatkan data seperti elemen yang memicu event, posisi mouse, key yang ditekan, dan banyak lagi.</p>"},{"location":"javascript/12-dom-event/#contoh-penggunaan-event-object","title":"\ud83d\udccc Contoh Penggunaan Event Object","text":"<pre><code>&lt;button id=\"myButton\"&gt;Klik Saya!&lt;/button&gt;\n\n&lt;script&gt;\n  const button = document.getElementById(\"myButton\");\n\n  button.addEventListener(\"click\", function(event) {\n    alert(\"Tombol diklik pada posisi X: \" + event.clientX + \", Y: \" + event.clientY);\n  });\n&lt;/script&gt;\n</code></pre> <p>Pada contoh ini, objek event memberikan informasi mengenai posisi mouse saat tombol diklik (<code>event.clientX</code> dan <code>event.clientY</code>).</p>"},{"location":"javascript/12-dom-event/#7-event-delegation","title":"7. Event Delegation","text":"<p>Event delegation adalah teknik untuk menangani event pada elemen-elemen yang baru ditambahkan atau banyak elemen yang serupa, dengan menggunakan event listener pada elemen induk. Ini sangat efisien karena kita hanya perlu menambahkan satu listener pada elemen induk dan menangani event untuk semua elemen anak.</p>"},{"location":"javascript/12-dom-event/#contoh-event-delegation","title":"\ud83d\udccc Contoh Event Delegation","text":"<pre><code>&lt;ul id=\"list\"&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n  const list = document.getElementById(\"list\");\n\n  list.addEventListener(\"click\", function(event) {\n    if (event.target.tagName === \"LI\") {\n      alert(\"Item \" + event.target.textContent + \" diklik!\");\n    }\n  });\n&lt;/script&gt;\n</code></pre> <p>Pada contoh ini, kita mendengarkan event <code>click</code> pada elemen <code>ul</code> (induk). Ketika item <code>li</code> diklik, kita menggunakan event delegation untuk menangani klik tersebut.</p>"},{"location":"javascript/12-dom-event/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>DOM Events memungkinkan kita untuk menangani interaksi pengguna dengan elemen HTML.</li> <li>Dengan <code>addEventListener()</code>, kita bisa menambahkan event listener untuk berbagai jenis event.</li> <li>Event Bubbling dan Capturing adalah dua fase yang terjadi saat event dipicu.</li> <li>Event Object memberikan informasi terkait event yang terjadi.</li> <li>Event Delegation memungkinkan kita menangani event pada banyak elemen dengan menambahkan satu event listener pada elemen induk.</li> </ul> <p>Dengan memahami dan menguasai DOM Events, aplikasi web kamu akan menjadi lebih interaktif dan dinamis! Selanjutnya, kita akan membahas lebih lanjut mengenai AJAX dan bagaimana cara mengirim permintaan HTTP secara asynchronous. ```</p>"},{"location":"javascript/13-fetch-api/","title":"\ud83c\udf10 Fetch API di JavaScript","text":"<p>Fetch API adalah cara modern untuk melakukan permintaan HTTP (seperti GET, POST, PUT, DELETE) ke server. Fetch menggantikan metode lama seperti <code>XMLHttpRequest</code> dan memberikan cara yang lebih bersih dan mudah dibaca untuk menangani permintaan dan respons HTTP secara asinkronus. Fetch API juga mengembalikan Promise, yang memungkinkan kita untuk menangani hasil permintaan HTTP dengan menggunakan <code>then()</code> atau <code>async/await</code>.</p>"},{"location":"javascript/13-fetch-api/#1-apa-itu-fetch-api","title":"1. Apa itu Fetch API?","text":"<p>Fetch API menyediakan antarmuka untuk melakukan permintaan HTTP dan mengambil respons dari server. Dengan menggunakan Promise, Fetch memungkinkan kita untuk bekerja dengan kode asinkron dengan cara yang lebih elegan.</p>"},{"location":"javascript/13-fetch-api/#fetch-api-dan-promise","title":"\ud83d\udccc Fetch API dan Promise","text":"<ul> <li><code>fetch()</code>: Metode utama dari Fetch API yang digunakan untuk membuat permintaan HTTP.</li> <li><code>then()</code>: Digunakan untuk menangani respons yang diterima setelah permintaan selesai.</li> <li><code>catch()</code>: Digunakan untuk menangani error yang terjadi selama permintaan.</li> </ul>"},{"location":"javascript/13-fetch-api/#2-sintaks-dasar-fetch","title":"2. Sintaks Dasar <code>fetch()</code>","text":"<p>Berikut adalah sintaks dasar dari <code>fetch()</code>:</p> <pre><code>fetch(url, options)\n  .then(response =&gt; response.json())  // Mengonversi respons menjadi format JSON\n  .then(data =&gt; console.log(data))     // Menampilkan data yang diterima\n  .catch(error =&gt; console.log(error)); // Menangani error jika ada\n</code></pre> <ul> <li><code>url</code>: URL tempat kita mengirim permintaan.</li> <li><code>options</code>: (Opsional) Opsi tambahan untuk permintaan seperti metode HTTP, headers, body, dll.</li> </ul>"},{"location":"javascript/13-fetch-api/#contoh-penggunaan-fetch","title":"\ud83d\udccc Contoh Penggunaan <code>fetch()</code>","text":"<pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts\")\n  .then(response =&gt; response.json())  // Mengonversi respons JSON\n  .then(data =&gt; console.log(data))     // Menampilkan data yang diterima\n  .catch(error =&gt; console.log(error)); // Menangani error\n</code></pre> <p>Pada contoh ini, kita mengirimkan permintaan GET ke URL <code>https://jsonplaceholder.typicode.com/posts</code> dan menampilkan data yang diterima dalam format JSON.</p>"},{"location":"javascript/13-fetch-api/#3-metode-http-di-fetch-api","title":"3. Metode HTTP di Fetch API","text":"<p>Fetch API mendukung berbagai metode HTTP seperti <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, dan lainnya. Kita bisa menambahkan metode ini melalui opsi <code>method</code> dalam objek <code>options</code>.</p>"},{"location":"javascript/13-fetch-api/#contoh-permintaan-get","title":"\ud83d\udccc Contoh Permintaan GET","text":"<p>Permintaan GET digunakan untuk mengambil data dari server.</p> <pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts\")\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.log(error));\n</code></pre>"},{"location":"javascript/13-fetch-api/#contoh-permintaan-post","title":"\ud83d\udccc Contoh Permintaan POST","text":"<p>Permintaan POST digunakan untuk mengirimkan data ke server. Biasanya digunakan saat mengirim formulir atau data dalam format JSON.</p> <pre><code>const postData = {\n  title: \"Post Baru\",\n  body: \"Ini adalah konten dari post baru.\",\n  userId: 1\n};\n\nfetch(\"https://jsonplaceholder.typicode.com/posts\", {\n  method: \"POST\", // Menggunakan metode POST\n  headers: {\n    \"Content-Type\": \"application/json\"  // Menyatakan bahwa data yang dikirimkan adalah JSON\n  },\n  body: JSON.stringify(postData)  // Mengonversi data menjadi format JSON\n})\n  .then(response =&gt; response.json())  // Mengonversi respons menjadi JSON\n  .then(data =&gt; console.log(data))     // Menampilkan data yang diterima\n  .catch(error =&gt; console.log(error)); // Menangani error\n</code></pre> <p>Di sini, kita mengirimkan data JSON menggunakan metode POST ke server.</p>"},{"location":"javascript/13-fetch-api/#contoh-permintaan-put","title":"\ud83d\udccc Contoh Permintaan PUT","text":"<p>Permintaan PUT digunakan untuk memperbarui data yang ada di server.</p> <pre><code>const updateData = {\n  title: \"Post Diperbarui\",\n  body: \"Ini adalah konten post yang telah diperbarui.\",\n  userId: 1\n};\n\nfetch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  method: \"PUT\", // Menggunakan metode PUT\n  headers: {\n    \"Content-Type\": \"application/json\"  // Menyatakan bahwa data yang dikirimkan adalah JSON\n  },\n  body: JSON.stringify(updateData)  // Mengonversi data menjadi format JSON\n})\n  .then(response =&gt; response.json())  // Mengonversi respons menjadi JSON\n  .then(data =&gt; console.log(data))     // Menampilkan data yang diterima\n  .catch(error =&gt; console.log(error)); // Menangani error\n</code></pre>"},{"location":"javascript/13-fetch-api/#contoh-permintaan-delete","title":"\ud83d\udccc Contoh Permintaan DELETE","text":"<p>Permintaan DELETE digunakan untuk menghapus data dari server.</p> <pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  method: \"DELETE\", // Menggunakan metode DELETE\n})\n  .then(response =&gt; {\n    if (response.ok) {\n      console.log(\"Data berhasil dihapus\");\n    } else {\n      console.log(\"Gagal menghapus data\");\n    }\n  })\n  .catch(error =&gt; console.log(error)); // Menangani error\n</code></pre>"},{"location":"javascript/13-fetch-api/#4-menangani-respons","title":"4. Menangani Respons","text":"<p>Setelah permintaan selesai, kita perlu menangani respons yang diterima dari server. Respons dari <code>fetch()</code> bukanlah data yang langsung bisa digunakan, tetapi sebuah objek <code>Response</code> yang perlu diproses lebih lanjut.</p>"},{"location":"javascript/13-fetch-api/#respons-status-dan-status-code","title":"\ud83d\udccc Respons Status dan Status Code","text":"<p>Sebelum kita memproses data, kita bisa memeriksa status dari respons menggunakan properti <code>ok</code> atau <code>status</code> dari objek <code>Response</code>.</p> <pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts\")\n  .then(response =&gt; {\n    if (response.ok) {\n      return response.json(); // Mengonversi ke format JSON jika respons berhasil\n    } else {\n      throw new Error(\"Gagal mendapatkan data\");\n    }\n  })\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.log(error)); // Menangani error\n</code></pre> <p>Di sini, kita memeriksa apakah respons berhasil dengan memeriksa properti <code>response.ok</code>. Jika respons berhasil, kita mengonversinya menjadi JSON.</p>"},{"location":"javascript/13-fetch-api/#5-menggunakan-asyncawait-dengan-fetch","title":"5. Menggunakan Async/Await dengan Fetch","text":"<p>Selain menggunakan <code>then()</code> untuk menangani <code>Promise</code>, kita juga bisa menggunakan async/await untuk menulis kode yang lebih bersih dan mudah dibaca.</p>"},{"location":"javascript/13-fetch-api/#contoh-asyncawait-dengan-fetch","title":"\ud83d\udccc Contoh Async/Await dengan Fetch","text":"<pre><code>async function fetchData() {\n  try {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    if (!response.ok) {\n      throw new Error(\"Gagal mendapatkan data\");\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfetchData();\n</code></pre> <p>Dengan async/await, kita menulis kode yang lebih mirip dengan kode synchronous meskipun masih menangani operasi asinkronus.</p>"},{"location":"javascript/13-fetch-api/#6-menangani-error-dalam-fetch-api","title":"6. Menangani Error dalam Fetch API","text":"<p>Jika terjadi kesalahan selama permintaan HTTP, kita bisa menangani error menggunakan <code>catch()</code> atau dengan menggunakan blok <code>try/catch</code> ketika menggunakan async/await.</p>"},{"location":"javascript/13-fetch-api/#error-yang-dapat-terjadi","title":"\ud83d\udccc Error yang Dapat Terjadi","text":"<ul> <li>Kesalahan jaringan: Jika ada masalah dengan koneksi internet atau server tidak dapat dijangkau.</li> <li>Status HTTP yang tidak berhasil: Jika server mengembalikan status selain 2xx, seperti 404 atau 500.</li> </ul>"},{"location":"javascript/13-fetch-api/#contoh-error-handling","title":"\ud83d\udccc Contoh Error Handling","text":"<pre><code>fetch(\"https://jsonplaceholder.typicode.com/invalid-url\")\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error(\"Gagal mendapatkan data\");\n    }\n    return response.json();\n  })\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.log(\"Terjadi error: \", error)); // Menangani error\n</code></pre>"},{"location":"javascript/13-fetch-api/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<ul> <li>Fetch API adalah cara modern untuk melakukan permintaan HTTP dan menangani respons di JavaScript.</li> <li>Menggunakan <code>fetch()</code>, kita bisa mengirimkan permintaan HTTP dengan metode seperti GET, POST, PUT, dan DELETE.</li> <li>Respons dari <code>fetch()</code> perlu diproses lebih lanjut untuk mengonversi data menjadi format yang dapat digunakan.</li> <li>Dengan menggunakan async/await, kita bisa menulis kode yang lebih bersih dan mudah dipahami.</li> <li>Error handling sangat penting untuk menangani masalah yang terjadi selama permintaan HTTP.</li> </ul> <p>Dengan memahami Fetch API, kamu bisa berinteraksi dengan server secara asinkronus dan mengambil atau mengirim data dengan cara yang efisien dan terstruktur. Selanjutnya, kita akan bahas tentang AJAX dan bagaimana cara mengirim permintaan HTTP menggunakan teknik yang lebih lama namun masih banyak digunakan di banyak aplikasi web. ```</p>"},{"location":"javascript/14-konsep-lanjut/","title":"\ud83d\ude80 Konsep Lanjutan dalam JavaScript","text":"<p>Selamat datang di tingkat akhir dari dokumentasi JavaScript! Di bagian ini, kita akan menyelam lebih dalam ke fitur-fitur lanjutan yang akan memperkuat pemahamanmu sebagai developer JavaScript modern. </p> <p>Konsep-konsep ini sering digunakan dalam pengembangan aplikasi kompleks, library besar, atau framework seperti React, Vue, dan lainnya.</p>"},{"location":"javascript/14-konsep-lanjut/#1-closures","title":"1. \ud83d\udd01 Closures","text":"<p>Closure adalah kombinasi dari function dan lingkungan leksikalnya.</p> <pre><code>function luar() {\n  let counter = 0;\n  return function dalam() {\n    counter++;\n    console.log(counter);\n  };\n}\n\nconst hitung = luar();\nhitung(); // 1\nhitung(); // 2\n</code></pre> <p>Closure bisa menyimpan state meski fungsi luar sudah selesai dieksekusi.</p>"},{"location":"javascript/14-konsep-lanjut/#2-encapsulation-via-closures","title":"2. \ud83d\udd12 Encapsulation via Closures","text":"<p>Membuat data \"private\" di JavaScript menggunakan closure:</p> <pre><code>function createCounter() {\n  let count = 0;\n  return {\n    increment() {\n      count++;\n    },\n    getCount() {\n      return count;\n    }\n  };\n}\n\nconst counter = createCounter();\ncounter.increment();\nconsole.log(counter.getCount()); // 1\n</code></pre>"},{"location":"javascript/14-konsep-lanjut/#3-factory-functions","title":"3. \ud83c\udfed Factory Functions","text":"<p>Fungsi yang mengembalikan objek baru.</p> <pre><code>function createUser(name) {\n  return {\n    name,\n    greet() {\n      console.log(`Halo, ${name}!`);\n    }\n  };\n}\n\nconst user = createUser('Marno');\nuser.greet(); // Halo, Marno!\n</code></pre>"},{"location":"javascript/14-konsep-lanjut/#4-prototypes-inheritance","title":"4. \ud83e\uddec Prototypes &amp; Inheritance","text":"<p>JavaScript menggunakan prototype-based inheritance, bukan class-based seperti Java.</p> <pre><code>function User(name) {\n  this.name = name;\n}\n\nUser.prototype.sayHi = function() {\n  console.log(`Hi, saya ${this.name}`);\n};\n\nconst u = new User(\"Marno\");\nu.sayHi(); // Hi, saya Marno\n</code></pre>"},{"location":"javascript/14-konsep-lanjut/#5-context-this-binding","title":"5. \ud83c\udfad Context (<code>this</code>) &amp; Binding","text":"<p><code>this</code> adalah referensi ke konteks saat fungsi dipanggil.</p> <pre><code>const user = {\n  name: \"Marno\",\n  sayHi() {\n    console.log(`Hi ${this.name}`);\n  }\n};\n\nuser.sayHi(); // Hi Marno\n</code></pre> <p>Kalau dipisah:</p> <pre><code>const greet = user.sayHi;\ngreet(); // \u274c undefined (karena this-nya hilang)\n\nconst boundGreet = user.sayHi.bind(user);\nboundGreet(); // \u2705 Hi Marno\n</code></pre>"},{"location":"javascript/14-konsep-lanjut/#6-recursion-rekursif","title":"6. \ud83d\udd04 Recursion (Rekursif)","text":"<p>Fungsi yang memanggil dirinya sendiri. Berguna untuk struktur data tree atau nested array.</p> <pre><code>function faktorial(n) {\n  if (n === 1) return 1;\n  return n * faktorial(n - 1);\n}\n\nconsole.log(faktorial(5)); // 120\n</code></pre>"},{"location":"javascript/14-konsep-lanjut/#7-generator-functions","title":"7. \ud83e\uddf5 Generator Functions","text":"<p>Fungsi yang bisa \"pause\" dan \"lanjut\" dengan <code>yield</code>.</p> <pre><code>function* angka() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst it = angka();\nconsole.log(it.next().value); // 1\nconsole.log(it.next().value); // 2\n</code></pre>"},{"location":"javascript/14-konsep-lanjut/#8-lazy-evaluation","title":"8. \ud83d\udce5 Lazy Evaluation","text":"<p>Digunakan untuk evaluasi data hanya saat dibutuhkan.</p> <p>Generator dan async iterators mendukung ini secara natural:</p> <pre><code>function* infiniteCounter() {\n  let i = 0;\n  while (true) yield i++;\n}\n</code></pre>"},{"location":"javascript/14-konsep-lanjut/#9-proxy-reflect","title":"9. \ud83d\udd27 Proxy &amp; Reflect","text":"<p>Untuk mengintersepsi operasi terhadap objek.</p> <pre><code>const handler = {\n  get(target, prop) {\n    return prop in target ? target[prop] : \"Ga ada bro!\";\n  }\n};\n\nconst obj = new Proxy({ nama: \"Marno\" }, handler);\n\nconsole.log(obj.nama); // Marno\nconsole.log(obj.umur); // Ga ada bro!\n</code></pre>"},{"location":"javascript/14-konsep-lanjut/#10-meta-programming","title":"10. \ud83e\udde0 Meta Programming","text":"<p>Manipulasi program menggunakan program itu sendiri: biasanya melibatkan <code>Proxy</code>, <code>Reflect</code>, atau <code>eval()</code> (hati-hati yang ini ya).</p>"},{"location":"javascript/14-konsep-lanjut/#11-symbol","title":"11. \ud83e\uddf1 Symbol","text":"<p>Tipe data primitif baru untuk membuat property unik.</p> <pre><code>const id = Symbol('id');\nconst user = {\n  [id]: 123\n};\n\nconsole.log(user[id]); // 123\n</code></pre>"},{"location":"javascript/14-konsep-lanjut/#12-optional-chaining-nullish-coalescing","title":"12. \ud83e\uddea Optional Chaining &amp; Nullish Coalescing","text":"<pre><code>const user = { profile: { name: \"Marno\" } };\n\nconsole.log(user.profile?.name); // Marno\nconsole.log(user.address?.street); // undefined\n\nconst umur = user.age ?? 20; // Kalau undefined/null, pakai 20\n</code></pre>"},{"location":"javascript/14-konsep-lanjut/#kesimpulan","title":"Kesimpulan","text":"<p>Konsep-konsep lanjutan ini adalah fondasi dari framework modern dan pattern tingkat tinggi di JavaScript. Walau kelihatan rumit, kalau kamu kuasai ini semua... kamu udah bisa dianggap sebagai JavaScript Sifu \ud83d\ude0e</p> Konsep Fungsi Closure Simpan state privat Factory Function Buat objek tanpa <code>class</code> Prototypes Dasar inheritance di JavaScript <code>this</code> &amp; binding Konteks eksekusi fungsi Recursion Penyelesaian masalah struktural/nested Generator Fungsi yang bisa dihentikan sementara Proxy &amp; Reflect Kontrol penuh atas operasi objek Optional Chaining Aman akses properti dalam struktur dalam <p>\ud83d\ude80 Lanjutkan perjalananmu ke topik-topik seperti testing, performa, dan bahkan TypeScript agar makin lengkap!</p> <p>```</p>"},{"location":"javascript/15-oop/","title":"\ud83e\uddf1 Object-Oriented Programming (OOP) di JavaScript","text":"<p>Walaupun JavaScript awalnya bukan bahasa OOP seperti Java atau C++, JS mendukung paradigma Object-Oriented Programming melalui object literals, prototype, dan <code>class</code>. Konsep OOP ini sangat berguna untuk membangun aplikasi skala besar yang modular dan reusable.</p>"},{"location":"javascript/15-oop/#apa-itu-oop","title":"\ud83e\udde0 Apa Itu OOP?","text":"<p>OOP adalah pendekatan pemrograman berbasis objek. Setiap objek berisi: - Properties (data) - Methods (fungsi untuk melakukan aksi)</p>"},{"location":"javascript/15-oop/#empat-pilar-oop","title":"\ud83e\uddec Empat Pilar OOP","text":""},{"location":"javascript/15-oop/#1-encapsulation","title":"1. Encapsulation","text":"<p>Menyembunyikan detail internal dan hanya mengekspos apa yang perlu digunakan.</p> <pre><code>class User {\n  constructor(name) {\n    this._name = name;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(namaBaru) {\n    this._name = namaBaru;\n  }\n}\n</code></pre>"},{"location":"javascript/15-oop/#2-abstraction","title":"2. Abstraction","text":"<p>Menyederhanakan kompleksitas dengan hanya menampilkan fitur penting.</p> <pre><code>class MesinATM {\n  tarikTunai(jumlah) {\n    this.#verifikasiKartu();\n    console.log(`Menarik Rp${jumlah}`);\n  }\n\n  #verifikasiKartu() {\n    console.log(\"Kartu diverifikasi\");\n  }\n}\n\nconst atm = new MesinATM();\natm.tarikTunai(500000);\n// atm.#verifikasiKartu(); \u274c Error, method ini private\n</code></pre>"},{"location":"javascript/15-oop/#3-inheritance","title":"3. Inheritance","text":"<p>Mewarisi properti dan metode dari class lain.</p> <pre><code>class Kendaraan {\n  constructor(merk) {\n    this.merk = merk;\n  }\n\n  jalan() {\n    console.log(`${this.merk} berjalan`);\n  }\n}\n\nclass Mobil extends Kendaraan {\n  klakson() {\n    console.log(\"Tin tin!\");\n  }\n}\n\nconst avanza = new Mobil(\"Avanza\");\navanza.jalan();   // Avanza berjalan\navanza.klakson(); // Tin tin!\n</code></pre>"},{"location":"javascript/15-oop/#4-polymorphism","title":"4. Polymorphism","text":"<p>Objek bisa punya banyak bentuk (method override).</p> <pre><code>class Hewan {\n  suara() {\n    console.log(\"Hewan bersuara\");\n  }\n}\n\nclass Kucing extends Hewan {\n  suara() {\n    console.log(\"Meong\");\n  }\n}\n\nconst h = new Hewan();\nconst k = new Kucing();\n\nh.suara(); // Hewan bersuara\nk.suara(); // Meong (override)\n</code></pre>"},{"location":"javascript/15-oop/#membuat-class-di-javascript","title":"\ud83c\udfd7\ufe0f Membuat Class di JavaScript","text":""},{"location":"javascript/15-oop/#sintaks-dasar","title":"Sintaks Dasar","text":"<pre><code>class Person {\n  constructor(nama, umur) {\n    this.nama = nama;\n    this.umur = umur;\n  }\n\n  sapa() {\n    console.log(`Hai, saya ${this.nama}, umur ${this.umur}`);\n  }\n}\n\nconst orang = new Person(\"Marno\", 20);\norang.sapa();\n</code></pre>"},{"location":"javascript/15-oop/#inheritance-pewarisan","title":"\u2699\ufe0f Inheritance (Pewarisan)","text":"<p>Gunakan <code>extends</code> untuk membuat subclass:</p> <pre><code>class Pegawai extends Person {\n  constructor(nama, umur, jabatan) {\n    super(nama, umur); // panggil constructor parent\n    this.jabatan = jabatan;\n  }\n\n  kerja() {\n    console.log(`${this.nama} sedang bekerja sebagai ${this.jabatan}`);\n  }\n}\n</code></pre>"},{"location":"javascript/15-oop/#private-fields-methods","title":"\ud83d\udd12 Private Fields &amp; Methods","text":"<p>JavaScript mendukung properti dan method private dengan prefix <code>#</code>:</p> <pre><code>class Bank {\n  #saldo = 1000;\n\n  lihatSaldo() {\n    console.log(`Saldo: Rp${this.#saldo}`);\n  }\n}\n</code></pre>"},{"location":"javascript/15-oop/#static-method-property","title":"\ud83d\udee0\ufe0f Static Method &amp; Property","text":"<p>Tidak perlu buat instance untuk mengaksesnya.</p> <pre><code>class MathTools {\n  static tambah(a, b) {\n    return a + b;\n  }\n}\n\nconsole.log(MathTools.tambah(2, 3)); // 5\n</code></pre>"},{"location":"javascript/15-oop/#object-literal-vs-class","title":"\ud83e\uddf0 Object Literal vs Class","text":"<pre><code>// Object literal\nconst motor = {\n  merk: \"Yamaha\",\n  nyalakan() {\n    console.log(\"Motor nyala\");\n  }\n};\n\n// Class\nclass Motor {\n  constructor(merk) {\n    this.merk = merk;\n  }\n  nyalakan() {\n    console.log(\"Motor nyala\");\n  }\n}\n</code></pre>"},{"location":"javascript/15-oop/#prototype-di-balik-layar","title":"\ud83d\udd04 Prototype di Balik Layar","text":"<p>Class di JavaScript hanyalah \"sintaks manis\" (syntactic sugar) dari sistem prototype.</p> <pre><code>function Orang(nama) {\n  this.nama = nama;\n}\nOrang.prototype.sapa = function () {\n  console.log(`Halo, saya ${this.nama}`);\n};\n\nconst o = new Orang(\"Marno\");\no.sapa();\n</code></pre>"},{"location":"javascript/15-oop/#perbandingan-oop-vs-functional","title":"\ud83e\uddea Perbandingan OOP vs Functional","text":"Aspek OOP Functional Paradigma Objek dan class Fungsi sebagai unit utama State Mutable Immutable Komposisi Lewat inheritance Lewat fungsi-fungsi kecil Contoh cocok Aplikasi UI, Game, ERP Manipulasi data, logika bisnis"},{"location":"javascript/15-oop/#kapan-gunakan-oop","title":"\ud83d\ude80 Kapan Gunakan OOP?","text":"<p>\u2705 Cocok untuk: - Struktur data kompleks - Banyak entitas/aktor (User, Kendaraan, Produk, dll) - Aplikasi berbasis komponen</p>"},{"location":"javascript/15-oop/#kesimpulan","title":"\ud83e\udde0 Kesimpulan","text":"<p>Dengan OOP, kamu bisa membuat aplikasi yang: - Lebih terstruktur - Lebih mudah dipelihara - Lebih scalable</p> <p>Tapi ingat: OOP bukan satu-satunya cara. Kadang fungsional lebih ringkas dan aman.</p> <p>\ud83c\udfaf Pilih alat yang tepat untuk kebutuhanmu. Tapi menguasai OOP akan membuka pintu ke banyak framework besar seperti React, Angular, dan Vue.</p> <p>```</p>"},{"location":"javascript/16-functional/","title":"\ud83e\udde0 Pemrograman Fungsional di JavaScript","text":"<p>Pemrograman Fungsional (Functional Programming / FP) adalah paradigma yang berfokus pada penggunaan fungsi murni (pure functions) dan penghindaran efek samping. Gaya ini makin populer karena menghasilkan kode yang:</p> <ul> <li>Lebih bersih</li> <li>Lebih mudah diuji</li> <li>Lebih modular dan fleksibel</li> </ul>"},{"location":"javascript/16-functional/#1-apa-itu-pemrograman-fungsional","title":"1. Apa itu Pemrograman Fungsional?","text":"<p>FP mendorong kita untuk menulis program sebagai kumpulan fungsi kecil dan dapat digunakan ulang. FP menghindari perubahan langsung terhadap data (mutasi), dan lebih suka membuat data baru.</p>"},{"location":"javascript/16-functional/#ciri-ciri-fp","title":"Ciri-ciri FP:","text":"<ul> <li>\ud83d\udce6 Pure functions \u2014 hasil hanya bergantung pada input</li> <li>\ud83d\udeab No side effects \u2014 tidak mengubah state global / input</li> <li>\ud83d\udd01 Immutability \u2014 data tidak diubah, tapi disalin</li> <li>\ud83d\udd17 Function composition \u2014 fungsi digabung seperti lego</li> </ul>"},{"location":"javascript/16-functional/#2-pure-function","title":"2. Pure Function","text":"<p>Fungsi yang: 1. Tidak mengubah input. 2. Selalu mengembalikan output yang sama untuk input yang sama.</p> <pre><code>// PURE\nfunction tambah(a, b) {\n  return a + b;\n}\n\n// TIDAK PURE\nlet total = 0;\nfunction tambahKeTotal(a) {\n  total += a; // efek samping!\n}\n</code></pre>"},{"location":"javascript/16-functional/#3-immutability-tidak-mengubah-data-asli","title":"3. Immutability (Tidak Mengubah Data Asli)","text":"<pre><code>const angka = [1, 2, 3];\n\n// Menggunakan spread operator untuk membuat salinan\nconst angkaBaru = [...angka, 4];\n\nconsole.log(angka);      // [1, 2, 3]\nconsole.log(angkaBaru);  // [1, 2, 3, 4]\n</code></pre>"},{"location":"javascript/16-functional/#4-higher-order-functions-hof","title":"4. Higher-Order Functions (HOF)","text":"<p>Fungsi yang: - Menerima fungsi lain sebagai argumen - atau Mengembalikan fungsi</p> <p>Contoh:</p> <pre><code>function kalikan(faktor) {\n  return function(angka) {\n    return angka * faktor;\n  }\n}\n\nconst kaliDua = kalikan(2);\nconsole.log(kaliDua(5)); // 10\n</code></pre>"},{"location":"javascript/16-functional/#5-map-filter-reduce-trio-fp-legendaris","title":"5. Map, Filter, Reduce \u2014 Trio FP Legendaris \ud83d\udd25","text":""},{"location":"javascript/16-functional/#map","title":"<code>map()</code>","text":"<pre><code>const angka = [1, 2, 3];\nconst hasil = angka.map(x =&gt; x * 2); // [2, 4, 6]\n</code></pre>"},{"location":"javascript/16-functional/#filter","title":"<code>filter()</code>","text":"<pre><code>const angka = [1, 2, 3, 4];\nconst genap = angka.filter(x =&gt; x % 2 === 0); // [2, 4]\n</code></pre>"},{"location":"javascript/16-functional/#reduce","title":"<code>reduce()</code>","text":"<pre><code>const angka = [1, 2, 3, 4];\nconst total = angka.reduce((acc, curr) =&gt; acc + curr, 0); // 10\n</code></pre>"},{"location":"javascript/16-functional/#6-function-composition","title":"6. Function Composition","text":"<p>Menggabungkan beberapa fungsi kecil jadi satu proses.</p> <pre><code>const tambah1 = x =&gt; x + 1;\nconst kali2 = x =&gt; x * 2;\n\nconst gabung = x =&gt; kali2(tambah1(x));\n\nconsole.log(gabung(3)); // (3 + 1) * 2 = 8\n</code></pre>"},{"location":"javascript/16-functional/#7-currying","title":"7. Currying","text":"<p>Mengubah fungsi dengan banyak argumen menjadi rangkaian fungsi satu argumen.</p> <pre><code>function kali(a) {\n  return function(b) {\n    return a * b;\n  }\n}\n\nconst kali3 = kali(3);\nconsole.log(kali3(5)); // 15\n</code></pre>"},{"location":"javascript/16-functional/#8-kenapa-functional-programming-penting","title":"8. Kenapa Functional Programming Penting?","text":"<p>\u2705 Mudah diuji (karena pure)</p> <p>\u2705 Tidak tergantung pada state global</p> <p>\u2705 Cocok untuk kode paralel/async</p> <p>\u2705 Membuat bug lebih sedikit</p> <p>JavaScript bukan bahasa FP murni, tapi mendukung gaya ini dengan sangat baik. Kamu bisa menggunakannya saat butuh menulis kode yang clean, predictable, dan reusable.</p>"},{"location":"javascript/16-functional/#9-library-yang-mendukung-fp","title":"9. Library yang Mendukung FP","text":"<p>Kalau kamu makin dalam, bisa cek: - Ramda.js - Lodash/fp - RxJS (reaktif programming, cocok buat async event)</p>"},{"location":"javascript/16-functional/#10-kesimpulan","title":"10. Kesimpulan","text":"Konsep Penjelasan Pure Function Tidak mengubah state eksternal Immutability Data tidak diubah langsung HOF Fungsi yang menerima/mengembalikan fungsi Composition Gabungkan fungsi menjadi alur proses Currying Fungsi jadi rantai <p>\ud83d\udcda Selanjutnya kita akan bahas Object-Oriented Programming (OOP)\u2014biar kamu bisa bandingkan dan pilih gaya mana yang paling cocok sesuai kebutuhan proyekmu.</p> <p>```</p>"},{"location":"javascript/17-event-loop/","title":"\ud83d\udd04 Memahami Event Loop di JavaScript","text":"<p>Event Loop adalah salah satu konsep paling penting (dan kadang paling bikin pusing) dalam JavaScript, terutama karena JavaScript single-threaded tapi bisa menangani operasi async seperti HTTP request, setTimeout, dan lainnya.</p> <p>Kalau kamu pernah bingung kenapa <code>console.log(\"A\")</code> muncul duluan padahal ada <code>setTimeout(..., 0)</code>, itu kerjaan si Event Loop.</p>"},{"location":"javascript/17-event-loop/#1-javascript-itu-single-threaded","title":"1. JavaScript itu Single-threaded","text":"<p>Artinya, hanya satu instruksi yang bisa dijalankan dalam satu waktu. Tapi\u2026 kok bisa jalanin banyak hal sekaligus kayak fetch data, timer, dan animasi?</p> <p>Jawabannya: karena JavaScript punya Event Loop yang bekerja bareng Call Stack dan Web APIs / Callback Queue (jika di browser) atau libuv (jika di Node.js).</p>"},{"location":"javascript/17-event-loop/#2-komponen-penting","title":"2. Komponen Penting","text":""},{"location":"javascript/17-event-loop/#call-stack","title":"\ud83e\udde0 Call Stack","text":"<p>Tempat eksekusi kode sinkron. Modelnya LIFO (Last In, First Out).</p>"},{"location":"javascript/17-event-loop/#web-apis","title":"\ud83d\udd78\ufe0f Web APIs","text":"<p>Disediakan oleh browser (atau libuv di Node.js) untuk handle async seperti: - <code>setTimeout</code> - <code>fetch</code> - <code>DOM events</code></p>"},{"location":"javascript/17-event-loop/#callback-queue-task-queue","title":"\ud83d\udce9 Callback Queue (Task Queue)","text":"<p>Menampung callback yang siap dieksekusi setelah Call Stack kosong.</p>"},{"location":"javascript/17-event-loop/#event-loop","title":"\ud83d\udd01 Event Loop","text":"<p>Yang ngecek terus: \"Eh, Call Stack kosong gak? Kalau kosong, ayo masukin callback dari Queue!\"</p>"},{"location":"javascript/17-event-loop/#3-ilustrasi-sederhana","title":"3. Ilustrasi Sederhana","text":"<pre><code>console.log(\"A\");\n\nsetTimeout(() =&gt; {\n  console.log(\"B\");\n}, 0);\n\nconsole.log(\"C\");\n</code></pre>"},{"location":"javascript/17-event-loop/#output","title":"Output:","text":"<pre><code>A\nC\nB\n</code></pre> <p>Kenapa B terakhir padahal 0ms?</p> <p>Karena: 1. <code>setTimeout</code> didaftarkan ke Web API. 2. <code>console.log(\"C\")</code> lanjut dieksekusi. 3. Setelah Call Stack kosong, callback <code>setTimeout</code> dimasukkan ke Queue. 4. Event Loop mengeksekusinya setelah semua sync selesai.</p>"},{"location":"javascript/17-event-loop/#4-microtask-queue-vs-callback-queue","title":"4. Microtask Queue vs Callback Queue","text":"<p>Selain Callback Queue, ada juga Microtask Queue. Ini lebih prioritas dan diisi oleh: - <code>Promise.then()</code> - <code>MutationObserver</code></p> <pre><code>console.log(\"Start\");\n\nsetTimeout(() =&gt; console.log(\"Timeout\"), 0);\n\nPromise.resolve().then(() =&gt; console.log(\"Promise\"));\n\nconsole.log(\"End\");\n</code></pre>"},{"location":"javascript/17-event-loop/#output_1","title":"Output:","text":"<pre><code>Start\nEnd\nPromise\nTimeout\n</code></pre> <p>Promise punya prioritas lebih tinggi dibanding <code>setTimeout</code>. Mereka masuk ke Microtask Queue.</p>"},{"location":"javascript/17-event-loop/#5-visualisasi-event-loop","title":"5. Visualisasi Event Loop","text":"<pre><code>\ud83d\udce6 Code masuk ke \u2192 Call Stack\n\u23f1 Async call dikirim ke \u2192 Web API\n\u2705 Selesai? Callback dikirim ke \u2192 Task Queue\n\ud83c\udf00 Call Stack kosong? Event Loop \u2192 Masukkan callback ke Call Stack\n</code></pre>"},{"location":"javascript/17-event-loop/#6-debugging-event-loop-tips-dev","title":"6. Debugging Event Loop (Tips Dev)","text":"<ul> <li>Gunakan <code>console.log()</code> untuk lacak urutan eksekusi.</li> <li>Gunakan browser DevTools tab \u201cPerformance\u201d untuk lihat event loop dan call stack.</li> <li>Tools seperti Loupe bisa bantu visualisasi event loop.</li> </ul>"},{"location":"javascript/17-event-loop/#7-kesimpulan","title":"7. Kesimpulan","text":"Konsep Penjelasan Singkat Single-threaded JavaScript cuma punya 1 jalur eksekusi Web API Jalur khusus buat ngatur operasi async Event Loop Jembatan antara async dan eksekusi utama Task vs Microtask Microtask punya prioritas lebih tinggi <p>\ud83d\udd01 Event Loop bukan cuma teori, tapi dasar dari semua hal async di JavaScript. Pahami ini dan kamu bakal bisa nge-handle <code>async/await</code>, <code>fetch</code>, <code>Promise</code>, dan sejenisnya kayak ninja!</p> <p>\ud83d\udcda Selanjutnya: kita akan menyelami dunia <code>async/await</code> dan bagaimana menulis kode async yang kelihatan kayak sync\u2014biar hidupmu sebagai dev jadi lebih damai. ```</p>"},{"location":"javascript/18-tools/","title":"\ud83e\uddf0 Tools &amp; Ekosistem JavaScript Modern","text":"<p>JavaScript bukan cuma bahasa pemrograman \u2014 dia punya ekosistem yang super luas. Buat bikin aplikasi modern, kamu butuh lebih dari sekadar <code>console.log</code>. Yuk kenalan sama tools yang bikin coding JS makin ngebut dan rapi!</p>"},{"location":"javascript/18-tools/#1-package-manager","title":"\ud83d\ude80 1. Package Manager","text":""},{"location":"javascript/18-tools/#npm-node-package-manager","title":"\ud83d\udce6 NPM (Node Package Manager)","text":"<p>Manajer paket default di Node.js. Hampir semua library JS modern bisa di-install lewat sini.</p> <pre><code>npm init -y\nnpm install lodash\n</code></pre>"},{"location":"javascript/18-tools/#yarn","title":"\ud83e\uddf6 Yarn","text":"<p>Alternatif dari NPM. Lebih cepat dan efisien untuk beberapa kasus.</p> <pre><code>yarn add axios\n</code></pre>"},{"location":"javascript/18-tools/#2-module-bundler","title":"\ud83e\uddd1\u200d\ud83c\udfed 2. Module Bundler","text":"<p>Digunakan untuk menggabungkan banyak file menjadi satu bundle untuk production.</p>"},{"location":"javascript/18-tools/#webpack","title":"\ud83d\udd27 Webpack","text":"<p>Super fleksibel. Butuh konfigurasi yang cukup banyak.</p> <pre><code>npm install --save-dev webpack webpack-cli\n</code></pre>"},{"location":"javascript/18-tools/#vite","title":"\u2728 Vite","text":"<p>Bundler modern, super cepat. Banyak dipakai di proyek React, Vue, Svelte, dll.</p> <pre><code>npm create vite@latest\n</code></pre>"},{"location":"javascript/18-tools/#parcel","title":"\ud83d\udce6 Parcel","text":"<p>Zero config, cocok buat pemula.</p> <pre><code>npm install -g parcel-bundler\n</code></pre>"},{"location":"javascript/18-tools/#3-code-linter","title":"\ud83e\uddf9 3. Code Linter","text":"<p>Linter bantu kamu menjaga konsistensi dan mencegah bug.</p>"},{"location":"javascript/18-tools/#eslint","title":"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f ESLint","text":"<p>Cek kode kamu biar rapi dan bebas error kecil.</p> <pre><code>npm install eslint --save-dev\nnpx eslint .\n</code></pre>"},{"location":"javascript/18-tools/#prettier","title":"\ud83c\udf66 Prettier","text":"<p>Auto-formatting buat bikin kode kamu enak dibaca.</p> <pre><code>npm install --save-dev prettier\nnpx prettier --write .\n</code></pre> <p>\u26a0\ufe0f Tips: Gunakan <code>eslint-plugin-prettier</code> biar ESLint dan Prettier bisa kerja bareng!</p>"},{"location":"javascript/18-tools/#4-transpiler","title":"\ud83d\udd01 4. Transpiler","text":""},{"location":"javascript/18-tools/#babel","title":"\ud83d\udd24 Babel","text":"<p>Mengubah kode modern (ES6+) jadi kompatibel ke browser lama.</p> <pre><code>npm install --save-dev @babel/core @babel/cli @babel/preset-env\n</code></pre>"},{"location":"javascript/18-tools/#5-testing-framework","title":"\ud83d\udd2c 5. Testing Framework","text":""},{"location":"javascript/18-tools/#jest","title":"\ud83e\uddea Jest","text":"<p>Framework testing paling populer di JavaScript.</p> <pre><code>npm install --save-dev jest\n</code></pre>"},{"location":"javascript/18-tools/#mocha-chai","title":"\u2705 Mocha + Chai","text":"<p>Alternatif ringan yang bisa dikustomisasi.</p> <pre><code>npm install --save-dev mocha chai\n</code></pre>"},{"location":"javascript/18-tools/#6-dev-server","title":"\ud83c\udf10 6. Dev Server","text":""},{"location":"javascript/18-tools/#live-server-vs-code-extension","title":"\ud83d\udd25 Live Server (VS Code Extension)","text":"<p>Auto-reload ketika kamu save file HTML/JS.</p>"},{"location":"javascript/18-tools/#vite-dev-server","title":"\ud83e\uddde\u200d\u2642\ufe0f Vite Dev Server","text":"<p>Built-in di Vite, super cepat dan mendukung hot module replacement.</p>"},{"location":"javascript/18-tools/#7-version-control","title":"\ud83d\udd04 7. Version Control","text":""},{"location":"javascript/18-tools/#git","title":"\ud83e\uddd9\u200d\u2642\ufe0f Git","text":"<p>Simpan dan kelola histori perubahan kode kamu.</p> <pre><code>git init\ngit add .\ngit commit -m \"First commit\"\n</code></pre> <p>Gunakan bersama GitHub, GitLab, atau Bitbucket buat kolaborasi bareng tim.</p>"},{"location":"javascript/18-tools/#8-deployment-tools","title":"\u2601\ufe0f 8. Deployment Tools","text":""},{"location":"javascript/18-tools/#netlify","title":"\ud83d\udce4 Netlify","text":"<p>Deploy aplikasi JS statis (seperti Vite/React) langsung dari GitHub.</p>"},{"location":"javascript/18-tools/#vercel","title":"\ud83d\ude80 Vercel","text":"<p>Deploy cepat untuk proyek frontend dan serverless.</p>"},{"location":"javascript/18-tools/#github-pages","title":"\ud83d\udee0 GitHub Pages","text":"<p>Cocok untuk dokumentasi dan proyek statis.</p> <pre><code># Kalau pakai mkdocs:\nmkdocs gh-deploy\n</code></pre>"},{"location":"javascript/18-tools/#tools-tambahan-lainnya","title":"\ud83c\udfaf Tools Tambahan Lainnya","text":"Kategori Tools Populer Type Checker TypeScript Package Checker npm audit, snyk Formatter Prettier Debugger Chrome DevTools, VS Code Debug REST API Client Postman, Insomnia Env Manager dotenv Task Runner Gulp, npm scripts"},{"location":"javascript/18-tools/#contoh-struktur-proyek-modern","title":"\ud83d\udce6 Contoh Struktur Proyek Modern","text":"<pre><code>\ud83d\udcc1 my-app\n\u251c\u2500\u2500 \ud83d\udcc1 src\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 components/\n\u251c\u2500\u2500 \ud83d\udcc1 public\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 .eslintrc.js\n\u251c\u2500\u2500 .prettierrc\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n</code></pre>"},{"location":"javascript/18-tools/#kesimpulan","title":"\ud83e\udde0 Kesimpulan","text":"<p>Tools ini bukan cuma gaya-gayaan, tapi benar-benar ngebantu:</p> <p>\u2705 Menjaga kualitas kode \u2705 Mempercepat proses development \u2705 Mempermudah kolaborasi dan deployment</p> <p>\ud83c\udf89 JavaScript modern itu powerful banget \u2014 asal kamu tahu alatnya!</p> <p>```</p>"},{"location":"javascript/19-keamanan/","title":"\ud83d\udee1\ufe0f Keamanan JavaScript di Browser &amp; Frontend","text":"<p>Keamanan dalam JavaScript sangat penting, terutama saat membuat aplikasi web. Walaupun mayoritas tanggung jawab keamanan ada di sisi backend, sisi frontend (JavaScript) tetap rawan eksploitasi.</p> <p>Di halaman ini, kita akan bahas ancaman umum dan cara mencegahnya. Biar aplikasi kamu gak jadi target empuk hacker, ya kan?</p>"},{"location":"javascript/19-keamanan/#1-ancaman-umum-di-javascript","title":"1. \ud83d\udea8 Ancaman Umum di JavaScript","text":""},{"location":"javascript/19-keamanan/#xss-cross-site-scripting","title":"\u26a0\ufe0f XSS (Cross-Site Scripting)","text":"<p>XSS adalah serangan di mana hacker menyisipkan JavaScript berbahaya ke halaman web.</p> <p>Contoh:</p> <pre><code>&lt;input value=\"&lt;script&gt;alert('Hacked!')&lt;/script&gt;\" /&gt;\n</code></pre> <p>Jika input ini langsung ditampilkan tanpa disanitasi, boom! Kode jahat akan jalan di browser korban.</p> <p>Solusi: - Jangan pernah langsung render input user ke HTML tanpa sanitasi. - Gunakan DOM manipulation API seperti <code>textContent</code>, bukan <code>innerHTML</code>.</p> <pre><code>// \u274c Rentan XSS\nelement.innerHTML = userInput;\n\n// \u2705 Aman\nelement.textContent = userInput;\n</code></pre>"},{"location":"javascript/19-keamanan/#csrf-cross-site-request-forgery","title":"\u26a0\ufe0f CSRF (Cross-Site Request Forgery)","text":"<p>Serangan di mana user tanpa sadar mengirim request yang berbahaya (biasanya lewat cookie yang udah login).</p> <p>Walau mitigasi utama ada di server (CSRF token, SameSite cookie), kamu bisa bantu dengan memastikan frontend hanya mengirim request saat user melakukan aksi nyata (misalnya klik tombol).</p>"},{"location":"javascript/19-keamanan/#klikjacking","title":"\u26a0\ufe0f Klikjacking","text":"<p>Menipu user agar mengklik sesuatu yang tidak mereka sadari, misalnya tombol tersembunyi di iframe.</p> <p>Solusi frontend: Tambahkan header <code>X-Frame-Options: DENY</code> di backend (tapi kamu bisa bantu validasi iframe juga di frontend).</p>"},{"location":"javascript/19-keamanan/#leaking-data-ke-konsol","title":"\u26a0\ufe0f Leaking Data ke Konsol","text":"<p>Jangan pernah log data sensitif ke console browser! Hacker bisa buka DevTools dan lihat semua data.</p> <pre><code>// \u274c Jangan lakukan ini di production\nconsole.log(user.password);\n</code></pre>"},{"location":"javascript/19-keamanan/#2-tips-menulis-javascript-yang-aman","title":"2. \u2705 Tips Menulis JavaScript yang Aman","text":""},{"location":"javascript/19-keamanan/#1-escape-dan-sanitasi-input-user","title":"\ud83e\uddfd 1. Escape dan sanitasi input user","text":"<p>Gunakan library seperti: - <code>DOMPurify</code> - <code>sanitize-html</code></p> <pre><code>import DOMPurify from 'dompurify';\n\nconst cleanInput = DOMPurify.sanitize(userInput);\n</code></pre>"},{"location":"javascript/19-keamanan/#2-validasi-di-sisi-klien-dan-server","title":"\ud83d\udd12 2. Validasi di sisi klien DAN server","text":"<p>Frontend itu ibarat pagar bambu\u2014bisa diloncati. Jadi jangan andalkan validasi frontend saja.</p>"},{"location":"javascript/19-keamanan/#3-matikan-eval-function-dan-sejenisnya","title":"\ud83e\uddef 3. Matikan <code>eval()</code>, <code>Function()</code>, dan sejenisnya","text":"<p>Fungsi-fungsi ini bisa mengeksekusi string sebagai kode\u2014dan itu horor.</p> <pre><code>// \u274c Gak aman\neval(\"alert('Hacked')\");\n\n// \u2705 Hindari, dan cari alternatif aman\n</code></pre>"},{"location":"javascript/19-keamanan/#4-obfuscate-kode-javascript","title":"\ud83c\udfad 4. Obfuscate kode JavaScript","text":"<p>Jangan biarkan kode mentah bisa dibaca semua orang. Gunakan tool seperti: - Terser - UglifyJS</p> <p>Tapi ingat: obfuscation \u2260 security. Itu cuma bikin ribet, bukan bikin aman 100%.</p>"},{"location":"javascript/19-keamanan/#5-hati-hati-dengan-dependencies","title":"\ud83d\udce6 5. Hati-hati dengan dependencies","text":"<ul> <li>Selalu periksa package dengan <code>npm audit</code></li> <li>Update library secara rutin</li> <li>Hindari menggunakan package dari sumber gak jelas</li> </ul>"},{"location":"javascript/19-keamanan/#3-tools-praktik-keamanan","title":"3. \ud83e\uddea Tools &amp; Praktik Keamanan","text":"<ul> <li>\ud83d\udd0d npm audit</li> <li>\ud83d\udd0d Snyk \u2014 cek kerentanan dependencies</li> <li>\ud83d\udd0d Lighthouse Security Checks</li> <li>\ud83d\udd12 Helmet.js \u2014 middleware untuk proteksi HTTP headers</li> </ul>"},{"location":"javascript/19-keamanan/#4-contoh-best-practice","title":"4. \ud83d\udd10 Contoh Best Practice","text":"<pre><code>// \u2705 Gunakan CSP (Content Security Policy)\n&lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"&gt;\n\n// \u2705 Gunakan HTTPS selalu\nif (location.protocol !== 'https:') {\n  location.replace(`https:${location.href.substring(location.protocol.length)}`);\n}\n</code></pre>"},{"location":"javascript/19-keamanan/#5-kesimpulan","title":"5. Kesimpulan","text":"Masalah Solusi Frontend XSS Gunakan <code>textContent</code>, DOMPurify CSRF Gunakan metode POST + token Klikjacking Validasi iframe atau header <code>X-Frame-Options</code> Data leak Jangan <code>console.log()</code> data sensitif eval() Hindari penggunaan Dependencies Audit rutin dan verifikasi <p>\ud83c\udfaf Ingat: Frontend bukan tempat utama untuk keamanan, tapi bisa jadi pertahanan pertama. Tugas kamu adalah meminimalkan risiko, bukan jadi superhero \u2014 tapi hey, dengan best practices ini, kamu udah layak pakai jubah. \ud83e\uddb8\u200d\u2642\ufe0f</p> <p>```</p>"},{"location":"javascript/21-debugging/","title":"Debugging","text":"<pre><code># \ud83d\udc1b Debugging JavaScript: Cara Ngejar Bug Tanpa Bikin Emosi\n\nDebugging itu bagian dari hidup developer. Kode error? Tenang, bukan kamu aja yang ngalamin. Yang penting kamu tahu cara ngejar bug kayak detektif JavaScript. \ud83d\udd0d\n\n---\n\n## \ud83e\udd2f Apa Itu Debugging?\n\n&gt; Debugging adalah proses menemukan dan memperbaiki bug (kesalahan logika, runtime error, dsb.) dalam kode program.\n\nIntinya: bikin kode kamu *berjalan sebagaimana mestinya*, bukan *bertingkah aneh pas dijalankan* \ud83d\ude05\n\n---\n\n## \ud83d\udee0 Tools Wajib Debugging\n\n### 1. `console.log()` \u2014 Sahabat Setia\n\nGunakan ini untuk melihat isi variabel, jalannya fungsi, atau nge-track flow:\n\n```javascript\nfunction hitungDiskon(harga, diskon) {\n  console.log(\"Harga Awal:\", harga);\n  console.log(\"Diskon:\", diskon);\n  return harga - (harga * diskon);\n}\n</code></pre> <p>Tips: Gunakan <code>console.table()</code> untuk array atau objek biar lebih rapi.</p>"},{"location":"javascript/21-debugging/#2-developer-tools-devtools-di-browser","title":"2. Developer Tools (DevTools) di Browser","text":"<p>Hampir semua browser modern punya DevTools bawaan (buka dengan <code>F12</code> atau klik kanan \u2192 Inspect).</p> <p>\u2705 Fitur penting: - Console: lihat log &amp; error - Sources \u2192 Breakpoints: pause eksekusi kode - Network: cek request API - Performance: analisis kecepatan</p>"},{"location":"javascript/21-debugging/#3-breakpoint-dan-step-by-step-debugging","title":"3. Breakpoint dan Step-By-Step Debugging","text":"<ol> <li>Buka tab <code>Sources</code></li> <li>Klik baris kode untuk set breakpoint</li> <li>Reload halaman</li> <li>Eksekusi berhenti di titik tersebut</li> <li>Gunakan tombol <code>Step over</code>, <code>Step into</code>, <code>Step out</code> untuk menelusuri</li> </ol>"},{"location":"javascript/21-debugging/#4-gunakan-linter-eslint","title":"4. Gunakan Linter (ESLint)","text":"<p>Linting bisa bantu kamu deteksi error bahkan sebelum dijalankan.</p> <pre><code>npm install eslint --save-dev\nnpx eslint script.js\n</code></pre>"},{"location":"javascript/21-debugging/#5-debugging-di-nodejs","title":"5. Debugging di Node.js","text":"<p>Jalankan dengan mode debug:</p> <pre><code>node inspect script.js\n</code></pre> <p>Atau gunakan VS Code debugger yang powerful banget!</p>"},{"location":"javascript/21-debugging/#tips-trik-debugging-yang-efektif","title":"\u26a0\ufe0f Tips &amp; Trik Debugging yang Efektif","text":""},{"location":"javascript/21-debugging/#1-reproduksi-bug","title":"1. Reproduksi Bug","text":"<ul> <li>Coba ulangi langkah-langkah yang menyebabkan bug</li> <li>Buat test case kecil kalau bisa</li> </ul>"},{"location":"javascript/21-debugging/#2-gunakan-consoletrace","title":"2. Gunakan <code>console.trace()</code>","text":"<p>Lihat stack trace langsung dari mana fungsi dipanggil:</p> <pre><code>function test() {\n  console.trace(\"Trace dari sini\");\n}\n</code></pre>"},{"location":"javascript/21-debugging/#3-isolasi-masalah","title":"3. Isolasi Masalah","text":"<p>Pecah kode menjadi bagian-bagian kecil. Coba blok mana yang ngaco.</p>"},{"location":"javascript/21-debugging/#4-baca-pesan-error-nya","title":"4. Baca Pesan Error-nya!","text":"<p>Error JavaScript sekarang cukup informatif. Baca baik-baik bagian seperti: - Uncaught TypeError - SyntaxError - ReferenceError</p>"},{"location":"javascript/21-debugging/#contoh-bug-umum","title":"\u274c Contoh Bug Umum","text":"<pre><code>let x;\nconsole.log(x.length); // \u274c TypeError: Cannot read property 'length' of undefined\n</code></pre> <p>Solusi:</p> <pre><code>if (x) {\n  console.log(x.length);\n}\n</code></pre>"},{"location":"javascript/21-debugging/#debugging-asynchronous-code","title":"\ud83d\udca5 Debugging Asynchronous Code","text":"<p>Debugging <code>setTimeout</code>, <code>Promise</code>, <code>fetch</code>, dan <code>async/await</code> bisa tricky.</p> <p>Gunakan log chain atau catch error dengan try-catch:</p> <pre><code>async function getUser() {\n  try {\n    const res = await fetch('/user');\n    const data = await res.json();\n    console.log(data);\n  } catch (error) {\n    console.error(\"Gagal ambil user:\", error);\n  }\n}\n</code></pre>"},{"location":"javascript/21-debugging/#teknik-lain-yang-bisa-dicoba","title":"\ud83e\udde9 Teknik Lain yang Bisa Dicoba","text":"<ul> <li>Unit testing: Tangkap bug sejak dini</li> <li>Code review: Bug kadang ketemu saat didiskusikan</li> <li>Rubber duck debugging: Jelaskan masalah ke... boneka (atau teman \ud83d\ude05)</li> <li>Comment sebagian kode: Untuk sempitkan pencarian bug</li> </ul>"},{"location":"javascript/21-debugging/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>Debugging emang bisa nyebelin. Tapi kalau kamu ngerti caranya, itu jadi skill super power yang bikin kamu jadi dev yang dicari banyak perusahaan. Serius.</p> <p>\u201cProgramming is like being a detective in a crime movie where you are also the murderer.\u201d \u2014 Filipe Fortes \ud83d\ude08</p> <p>Keep calm &amp; trace the bug. Kamu pasti bisa \ud83d\udcaa</p> <p>```</p>"},{"location":"javascript/22-komentar/","title":"\ud83d\udcac Panduan Menulis Komentar yang Baik di JavaScript","text":"<p>Komentar itu kayak bumbu masakan. Kalau pas, bikin enak. Kalau kebanyakan... malah bikin pusing. \ud83c\udf5c</p> <p>Tujuan komentar: - Menjelaskan kenapa, bukan apa. - Memberi konteks untuk logika yang kompleks. - Membantu developer lain (atau diri sendiri 6 bulan kemudian \ud83d\ude05).</p>"},{"location":"javascript/22-komentar/#komentar-bukan-pengganti-kode-yang-jelas","title":"\ud83e\udde0 Komentar Bukan Pengganti Kode yang Jelas","text":"<pre><code>// \u274c Komentar nggak perlu\n// Menambahkan 1 ke nilai i\ni = i + 1;\n</code></pre> <p>Kode di atas udah cukup jelas. Komentar kayak gitu malah mubazir dan bikin penuh layar.</p>"},{"location":"javascript/22-komentar/#komentar-yang-bagus-itu","title":"\u2705 Komentar yang Bagus Itu...","text":""},{"location":"javascript/22-komentar/#1-menjelaskan-alasan-di-balik-kode","title":"1. Menjelaskan Alasan di Balik Kode","text":"<pre><code>// Menghindari bug Safari saat parsing JSON besar\nconst data = JSON.parse(jsonString);\n</code></pre>"},{"location":"javascript/22-komentar/#2-memberi-konteks-untuk-logika-kompleks","title":"2. Memberi Konteks untuk Logika Kompleks","text":"<pre><code>// Menghitung gaji prorata jika karyawan masuk pertengahan bulan\nconst proratedSalary = (baseSalary / daysInMonth) * daysWorked;\n</code></pre>"},{"location":"javascript/22-komentar/#3-menandai-hal-penting","title":"3. Menandai Hal Penting","text":"<p>Gunakan tag seperti:</p> <ul> <li><code>TODO:</code> \u279c yang harus dikerjakan nanti</li> <li><code>FIXME:</code> \u279c ada yang salah, perlu dibenerin</li> <li><code>HACK:</code> \u279c solusi darurat yang belum ideal</li> <li><code>NOTE:</code> \u279c catatan penting</li> </ul> <pre><code>// TODO: Tambahkan validasi untuk input kosong\n// FIXME: Crash kalau data kosong\n// HACK: Pakai delay manual karena bug dari API\n</code></pre>"},{"location":"javascript/22-komentar/#komentar-yang-harus-dihindari","title":"\u274c Komentar yang Harus Dihindari","text":""},{"location":"javascript/22-komentar/#1-menjelaskan-kode-yang-jelas","title":"1. Menjelaskan Kode yang Jelas","text":"<pre><code>// Mengatur x menjadi 10\nlet x = 10;\n</code></pre>"},{"location":"javascript/22-komentar/#2-komentar-redundant","title":"2. Komentar Redundant","text":"<pre><code>// Fungsi ini menambahkan dua angka\nfunction tambah(a, b) {\n  return a + b;\n}\n</code></pre> <p>Kalo kamu merasa perlu komentar kayak gitu, coba ubah nama fungsi jadi lebih jelas aja.</p>"},{"location":"javascript/22-komentar/#tips-menulis-komentar","title":"\u2728 Tips Menulis Komentar","text":"<ul> <li>Tulis sejelas mungkin. Hindari singkatan aneh atau bahasa alien.</li> <li>Gunakan bahasa yang konsisten. Kalau dokumentasimu pakai bahasa Indonesia, jangan tiba-tiba pakai bahasa Klingon.</li> <li>Letakkan komentar di atas kode yang dijelaskan, bukan di samping.</li> </ul> <pre><code>// Menghindari NaN jika nilai kosong\nconst nilai = parseFloat(input) || 0;\n</code></pre>"},{"location":"javascript/22-komentar/#komentar-vs-dokumentasi","title":"\ud83d\udccc Komentar vs Dokumentasi","text":"<p>Gunakan komentar untuk: - Penjelasan cepat - Catatan penting dalam kode</p> <p>Gunakan dokumentasi terpisah (seperti ini!) untuk: - Penjelasan lengkap fungsi - Tutorial penggunaan modul - Panduan best practice</p>"},{"location":"javascript/22-komentar/#zen-of-komentar","title":"\ud83e\uddd8\u200d\u2640\ufe0f Zen of Komentar","text":"<p>\"Kode yang bagus butuh sedikit komentar. Tapi komentar yang bagus bisa menyelamatkan proyek.\" \u2014 Seorang developer yang trauma debug jam 3 pagi \ud83d\ude35\u200d\ud83d\udcab</p>"},{"location":"javascript/22-komentar/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>Komentar bukan tempat curhat. Tapi dia bisa jadi penyelamat di saat genting. Gunakan dengan bijak, dan ingat: komentar yang baik = tim yang bahagia \ud83e\udef6</p> <p>```</p> <p>Kalau kamu mau, kita juga bisa bikin template komentar atau style guide komentar internal. Mau dibuatkan? \ud83d\ude04</p>"},{"location":"javascript/23-refactor/","title":"Refactor","text":"<pre><code># \ud83d\udd27 Refactoring JavaScript: Biar Kode Gak Kayak Mie Kusut\n\nRefactoring adalah seni memperbaiki struktur kode tanpa mengubah fungsinya. Bukan cuma biar \"keliatan rapi\", tapi biar lebih **mudah dibaca, di-debug, di-maintain, dan di-scale**. Coding itu bukan lomba cepat-cepetan, tapi lomba siapa yang bikin kode bisa dinikmati developer lain \u2014 termasuk kamu sendiri di masa depan \ud83d\ude04\n\n---\n\n## \ud83e\udd14 Kenapa Perlu Refactor?\n\n- Kode sulit dibaca &amp; dimengerti\n- Banyak pengulangan (DRY dong!)\n- Fungsi terlalu panjang\n- Nama variabel gak jelas (`x`, `data1`, `temp`??)\n- Struktur tidak konsisten\n- Performa bisa ditingkatkan\n- Waktu revisit project, kamu pengen nangis\n\n---\n\n## \ud83e\ude9a Prinsip Refactoring\n\n| Prinsip         | Makna                                                                 |\n|------------------|-----------------------------------------------------------------------|\n| DRY              | Don\u2019t Repeat Yourself \u2013 Hindari duplikasi kode                       |\n| KISS             | Keep It Simple, Stupid \u2013 Sederhanakan logika                         |\n| SRP              | Single Responsibility Principle \u2013 Satu fungsi = satu tugas           |\n| YAGNI            | You Aren\u2019t Gonna Need It \u2013 Jangan overengineering                    |\n| Meaningful Names | Gunakan nama variabel dan fungsi yang menjelaskan maksudnya          |\n\n---\n\n## \ud83d\udee0\ufe0f Contoh Refactor\n\n### 1. Nama Variabel &amp; Fungsi yang Buruk\n\n\u274c Sebelum:\n\n```javascript\nfunction a(d) {\n  return d * 12.5 / 100;\n}\n</code></pre> <p>\u2705 Sesudah:</p> <pre><code>function hitungDiskon(persen) {\n  return persen * 12.5 / 100;\n}\n</code></pre>"},{"location":"javascript/23-refactor/#2-duplikasi-kode","title":"2. Duplikasi Kode","text":"<p>\u274c Sebelum:</p> <pre><code>if (role === 'admin') {\n  console.log('Hai admin!');\n}\nif (role === 'admin') {\n  aksesAdmin();\n}\n</code></pre> <p>\u2705 Sesudah:</p> <pre><code>if (role === 'admin') {\n  console.log('Hai admin!');\n  aksesAdmin();\n}\n</code></pre>"},{"location":"javascript/23-refactor/#3-fungsi-panjang","title":"3. Fungsi Panjang","text":"<p>\u274c Fungsi terlalu panjang:</p> <pre><code>function prosesUser(user) {\n  // validasi\n  if (!user.nama) throw 'Nama wajib';\n  if (!user.email) throw 'Email wajib';\n  // format data\n  user.nama = user.nama.toUpperCase();\n  user.email = user.email.toLowerCase();\n  // simpan\n  saveToDB(user);\n}\n</code></pre> <p>\u2705 Dipecah jadi fungsi kecil:</p> <pre><code>function validasiUser(user) {\n  if (!user.nama) throw 'Nama wajib';\n  if (!user.email) throw 'Email wajib';\n}\n\nfunction formatUser(user) {\n  return {\n    ...user,\n    nama: user.nama.toUpperCase(),\n    email: user.email.toLowerCase()\n  };\n}\n\nfunction prosesUser(user) {\n  validasiUser(user);\n  const dataSiap = formatUser(user);\n  saveToDB(dataSiap);\n}\n</code></pre>"},{"location":"javascript/23-refactor/#4-refactor-ifelse-menjadi-object-lookup","title":"4. Refactor IF/ELSE Menjadi Object Lookup","text":"<p>\u274c Banyak if-else:</p> <pre><code>if (status === 'aktif') {\n  return 'User aktif';\n} else if (status === 'nonaktif') {\n  return 'User nonaktif';\n} else if (status === 'banned') {\n  return 'User diblokir';\n}\n</code></pre> <p>\u2705 Pakai object lookup:</p> <pre><code>const statusMap = {\n  aktif: 'User aktif',\n  nonaktif: 'User nonaktif',\n  banned: 'User diblokir'\n};\n\nreturn statusMap[status] || 'Status tidak dikenal';\n</code></pre>"},{"location":"javascript/23-refactor/#tips-refactor-aman","title":"\ud83e\uddea Tips Refactor Aman","text":"<ol> <li>Unit Test itu wajib sebelum refactor!</li> <li>Refactor perlahan, satu bagian kecil dulu</li> <li>Jangan refactor sambil nambah fitur baru</li> <li>Gunakan formatter otomatis (Prettier, ESLint)</li> <li>Commit kecil per perubahan, jangan 1 commit besar</li> </ol>"},{"location":"javascript/23-refactor/#tools-bantu-refactoring","title":"\ud83d\udd25 Tools Bantu Refactoring","text":"<ul> <li>ESLint \u2192 untuk deteksi potensi masalah kode</li> <li>Prettier \u2192 auto format kode</li> <li>Jest \u2192 untuk testing</li> <li>VSCode Refactor tools (<code>F2</code>, <code>Ctrl+Shift+R</code>, dsb)</li> </ul>"},{"location":"javascript/23-refactor/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>Refactoring itu kaya bebersih rumah. Emang capek di awal, tapi bikin nyaman dan enak ditinggali lama-lama.</p> <p>\"Refactor itu bukan tentang mengubah kode, tapi bikin kode jadi punya masa depan.\" \u2014 Dev bijak \u2728</p> <p>Rutin refactor = kode sehat + developer waras = tim produktif \ud83d\udcaa ```</p>"},{"location":"javascript/24-style-guide/","title":"Style Guide","text":"<pre><code># \ud83c\udfa8 Panduan Gaya Penulisan Kode JavaScript (Style Guide)\n\nNulis kode itu kayak ngelukis: beda orang, beda gaya. Tapi kalau kerjanya bareng-bareng, kita butuh **aturan main** biar nggak kayak hasil karya anak TK yang nyampur crayon. \ud83c\udfa8\n\nStyle guide bikin kode kita:\n- Konsisten\n- Mudah dibaca\n- Gampang dipelihara\n- Dan yang pasti... bikin reviewer senyum-senyum \ud83d\ude0f\n\n---\n\n## \ud83e\uddf1 Dasar-Dasar Penulisan\n\n### 1. Gunakan `const` dan `let` \u2014 hindari `var`\n\n```javascript\n// \u274c Jangan\nvar nama = \"Marno\";\n\n// \u2705 Lebih baik\nconst nama = \"Marno\"; // untuk nilai yang tidak berubah\nlet umur = 25;         // untuk nilai yang bisa berubah\n</code></pre>"},{"location":"javascript/24-style-guide/#2-gunakan-semicolon-secara-konsisten","title":"2. Gunakan Semicolon (<code>;</code>) Secara Konsisten","text":"<pre><code>// \u2705 Gunakan\nconst angka = 10;\n</code></pre> <p>JavaScript kadang \"ngerti-ngertiin\", tapi jangan biarkan parser nebak-nebak. Pakai semicolon!</p>"},{"location":"javascript/24-style-guide/#3-indentasi-2-spasi-atau-4-spasi-yang-penting-konsisten","title":"3. Indentasi 2 Spasi (atau 4 spasi, yang penting konsisten)","text":"<pre><code>function sapa() {\n  console.log(\"Halo!\");\n}\n</code></pre>"},{"location":"javascript/24-style-guide/#penamaan-yang-jelas","title":"\u2728 Penamaan yang Jelas","text":"Jenis Gaya Contoh Variabel/fungsi <code>camelCase</code> <code>jumlahBuah</code>, <code>tambahData()</code> Class <code>PascalCase</code> <code>UserModel</code>, <code>PanenRekap</code> Konstanta global <code>UPPER_SNAKE</code> <code>MAX_LIMIT</code>, <code>API_URL</code> <pre><code>const MAX_RETRIES = 3;\nclass DataFetcher { ... }\n</code></pre>"},{"location":"javascript/24-style-guide/#struktur-dan-format","title":"\ud83e\uddfc Struktur dan Format","text":""},{"location":"javascript/24-style-guide/#1-satu-statement-per-baris","title":"1. Satu Statement per Baris","text":"<pre><code>// \u274c Jangan\nlet a = 1; let b = 2;\n\n// \u2705 Lebih baik\nlet a = 1;\nlet b = 2;\n</code></pre>"},{"location":"javascript/24-style-guide/#2-spasi-itu-penting","title":"2. Spasi Itu Penting!","text":"<pre><code>// \u274c Jangan\nif(x===10){console.log(\"yes\");}\n\n// \u2705 Lebih baik\nif (x === 10) {\n  console.log(\"yes\");\n}\n</code></pre>"},{"location":"javascript/24-style-guide/#3-jangan-gunakan-magic-number","title":"3. Jangan Gunakan Magic Number","text":"<pre><code>// \u274c Jangan\nif (umur &gt; 17) {...}\n\n// \u2705 Lebih baik\nconst MINIMUM_UMUR = 17;\nif (umur &gt; MINIMUM_UMUR) {...}\n</code></pre>"},{"location":"javascript/24-style-guide/#fungsi-dan-logika","title":"\ud83e\udde0 Fungsi dan Logika","text":""},{"location":"javascript/24-style-guide/#1-satu-fungsi-satu-tugas","title":"1. Satu Fungsi, Satu Tugas","text":"<pre><code>// \u274c Jangan\nfunction prosesDataDanSimpanKeDatabase() {...}\n\n// \u2705 Lebih baik\nfunction prosesData() {...}\nfunction simpanKeDatabase() {...}\n</code></pre>"},{"location":"javascript/24-style-guide/#2-hindari-fungsi-terlalu-panjang","title":"2. Hindari Fungsi Terlalu Panjang","text":"<p>Jika fungsi udah panjang kayak sinetron, itu tandanya perlu dipotong jadi episode-episode alias subfungsi.</p>"},{"location":"javascript/24-style-guide/#struktur-folder-dan-file","title":"\ud83d\udcc2 Struktur Folder dan File","text":"<pre><code>.\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2514\u2500\u2500 Button.js\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u2514\u2500\u2500 formatDate.js\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2502   \u2514\u2500\u2500 Home.js\n\u2514\u2500\u2500 index.js\n</code></pre> <p>Pisahkan fungsi, komponen, dan halaman sesuai peranannya.</p>"},{"location":"javascript/24-style-guide/#kapan-gunakan-eslint-dan-prettier","title":"\u2705 Kapan Gunakan ESLint dan Prettier?","text":"<p>Kalau kamu ingin otomatisasi gaya penulisan, install:</p> <pre><code>npm install eslint prettier --save-dev\n</code></pre> <p>Lalu setup <code>.eslintrc.js</code> dan <code>.prettierrc</code></p> <p>Contoh config:</p> <pre><code>// .eslintrc.js\nmodule.exports = {\n  env: {\n    browser: true,\n    es2021: true\n  },\n  extends: ['eslint:recommended'],\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module'\n  },\n  rules: {\n    semi: ['error', 'always'],\n    quotes: ['error', 'single']\n  }\n};\n</code></pre> <pre><code>// .prettierrc\n{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"tabWidth\": 2\n}\n</code></pre>"},{"location":"javascript/24-style-guide/#bonus-tips","title":"\ud83d\udd25 Bonus Tips","text":"<ul> <li>Komentar \u2192 hanya jika benar-benar perlu.</li> <li>Jangan komentar \"kode yang jelas\". Tapi jelaskan kenapa, bukan apa.</li> </ul> <pre><code>// \u274c Buruk\n// Mengatur variabel i menjadi 0\nlet i = 0;\n\n// \u2705 Baik\n// Memulai dari indeks pertama untuk iterasi user\nlet i = 0;\n</code></pre>"},{"location":"javascript/24-style-guide/#zen-of-javascript-style","title":"\ud83e\uddd8\u200d\u2642\ufe0f Zen of JavaScript Style","text":"<p>\"Kode itu dibaca lebih sering daripada ditulis.\"</p> <p>Kalau kamu pusing lihat kode sendiri seminggu kemudian... saatnya ubah gaya nulismu, bestie.</p>"},{"location":"javascript/24-style-guide/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>Style guide bukan aturan ketat, tapi pedoman hidup buat bikin proyek kamu sehat, kolaboratif, dan scalable. Mau nulis sendiri atau tim besar, patuhi style guide seperti kamu patuhi rambu lalu lintas. \ud83d\udea6</p> <p>Konsistensi &gt; Gaya pribadi Bikin kode indah, biar yang baca juga bahagia \u2728</p> <p>```</p> <p>Kalau kamu mau, kita bisa buatkan file <code>.eslintrc.js</code> dan <code>.prettierrc</code> juga biar tinggal pakai di proyekmu. Mau sekalian dibikinin? \ud83d\ude0e</p>"},{"location":"javascript/25-testing/","title":"Testing","text":"<pre><code># \ud83e\uddea Testing di JavaScript: Biar Nggak Cuma \"Feeling Aman\"\n\nTesting bukan cuma buat developer perfeksionis. Ini *senjata rahasia* buat memastikan kode kamu jalan sesuai harapan \u2014 **dan tetap jalan walau udah dioprek-oprek orang satu tim**. Kalau kamu pernah nambah fitur terus tiba-tiba bagian lain rusak, berarti kamu udah kenal si \"regression bug\". Testing bisa jadi tamengmu. \ud83d\udee1\ufe0f\n\n---\n\n## \ud83d\udccc Kenapa Perlu Testing?\n\n- Pastikan kode **berfungsi dengan benar**\n- Lindungi dari **bug tersembunyi**\n- Bantu proses **refactor tanpa takut**\n- Jadi dokumentasi hidup\n- Bikin kamu terlihat profesional di mata tech lead \ud83d\ude0e\n\n---\n\n## \ud83e\uddec Jenis-Jenis Testing\n\n| Jenis                | Fokus                                                             |\n|----------------------|-------------------------------------------------------------------|\n| Unit Test            | Fungsi/unit terkecil (biasanya 1 fungsi)                          |\n| Integration Test     | Beberapa fungsi/module bekerja bareng                             |\n| End-to-End (E2E) Test| Simulasi interaksi user dari awal sampai akhir                    |\n| Snapshot Test        | Membandingkan output sekarang dengan output sebelumnya            |\n\n---\n\n## \ud83d\udd27 Alat Testing Populer\n\n| Tool        | Keterangan                              |\n|-------------|------------------------------------------|\n| Jest        | Paling populer untuk unit test           |\n| Mocha + Chai| Alternatif fleksibel                     |\n| Vitest      | Cepat dan modern, mirip Jest             |\n| Cypress     | Untuk end-to-end testing berbasis browser|\n| Playwright  | Mirip Cypress, tapi kuat buat testing multi-browser |\n\n---\n\n## \ud83d\ude80 Contoh Unit Test dengan Jest\n\n### 1. Fungsi yang Diuji\n\n```javascript\n// utils/math.js\nfunction tambah(a, b) {\n  return a + b;\n}\nmodule.exports = tambah;\n</code></pre>"},{"location":"javascript/25-testing/#2-file-testing-nya","title":"2. File Testing-nya","text":"<pre><code>// __tests__/math.test.js\nconst tambah = require('../utils/math');\n\ntest('menjumlahkan 2 + 3 harusnya 5', () =&gt; {\n  expect(tambah(2, 3)).toBe(5);\n});\n</code></pre>"},{"location":"javascript/25-testing/#3-jalankan-test","title":"3. Jalankan Test","text":"<pre><code>npx jest\n</code></pre>"},{"location":"javascript/25-testing/#setup-jest-manual","title":"\u2699\ufe0f Setup Jest (Manual)","text":"<pre><code>npm init -y\nnpm install --save-dev jest\n</code></pre> <p>Di <code>package.json</code>, tambahkan:</p> <pre><code>\"scripts\": {\n  \"test\": \"jest\"\n}\n</code></pre>"},{"location":"javascript/25-testing/#contoh-test-lain","title":"\ud83e\udd16 Contoh Test Lain","text":""},{"location":"javascript/25-testing/#test-fungsi-asynchronous","title":"Test Fungsi Asynchronous","text":"<pre><code>// asyncFunction.js\nfunction getUser(id) {\n  return Promise.resolve({ id, name: 'Marno' });\n}\n\nmodule.exports = getUser;\n</code></pre> <pre><code>// asyncFunction.test.js\nconst getUser = require('../utils/asyncFunction');\n\ntest('ambil user by id', async () =&gt; {\n  const user = await getUser(10);\n  expect(user.name).toBe('Marno');\n});\n</code></pre>"},{"location":"javascript/25-testing/#best-practice-testing","title":"\ud83e\uddfc Best Practice Testing","text":"<ul> <li>Gunakan nama test yang jelas</li> <li>Jangan test hal yang gak penting (kayak <code>2 + 2 = 4</code>)</li> <li>Pisahkan test dari logic (misal: folder <code>__tests__</code> atau <code>tests</code>)</li> <li>Gunakan coverage untuk cek sejauh mana kode kamu dites</li> </ul> <pre><code>npx jest --coverage\n</code></pre>"},{"location":"javascript/25-testing/#tdd-vs-bdd","title":"\ud83e\udde0 TDD vs BDD","text":"Istilah Penjelasan TDD Test-Driven Development \u2192 tulis test dulu, baru implementasi kodenya BDD Behavior-Driven Development \u2192 fokus ke perilaku aplikasi yang diharapkan"},{"location":"javascript/25-testing/#testing-frontend-dom","title":"\ud83e\udd13 Testing Frontend DOM","text":"<p>Misal kamu punya tombol:</p> <pre><code>&lt;button id=\"klik\"&gt;Klik aku!&lt;/button&gt;\n&lt;p id=\"output\"&gt;&lt;/p&gt;\n</code></pre> <p>Dan script:</p> <pre><code>document.getElementById(\"klik\").addEventListener(\"click\", () =&gt; {\n  document.getElementById(\"output\").textContent = \"Sudah diklik!\";\n});\n</code></pre> <p>Dengan tool seperti Jest + jsdom, kamu bisa test manipulasi DOM-nya.</p>"},{"location":"javascript/25-testing/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>Testing bukan buang-buang waktu. Justru hemat waktu dari masa depan yang penuh bug dan lembur. Bahkan kalau kamu kerja solo, testing itu seperti ngasih jaminan ke diri sendiri:</p> <p>\"Kalau rusak, aku tahu kenapa.\" \u2014 Kamu yang masa depan \u2728</p> <p>Mulailah dari unit test, perlahan ke integration, dan kalau udah pede, masuk ke E2E. Yang penting: tes itu investasi, bukan beban \ud83d\udcb8</p>"},{"location":"javascript/25-testing/#checklist-testing","title":"\u2705 Checklist Testing","text":"Kegiatan Status Setup Jest / Vitest \u2705 Buat minimal 1 unit test \u2705 Jalankan <code>npm test</code> rutin \u2705 Gunakan coverage \u2705 Simulasikan edge-case \u2705 Tambahkan test saat refactor \u2705 ``` <p>Dokumentasi best practices udah lengkap nih bro! Kalau mau lanjut, bisa kita tambahkan:</p> <ul> <li>Halaman \"FAQ JavaScript\"</li> <li>Panduan kontribusi (<code>CONTRIBUTING.md</code>)</li> <li>Panduan deploy ke GitHub Pages lagi</li> <li>Atau bikin PDF export dari MkDocs</li> </ul> <p>Mau lanjut ke mana dulu? \ud83d\ude0e\ud83d\udcd8</p>"},{"location":"javascript/26-error-handling/","title":"error-handling","text":"<pre><code># \ud83d\udea8 Penanganan Error di JavaScript: Jangan Panik, Tangani!\n\nError dalam pemrograman itu bukan musuh, tapi sinyal bahwa \"Hey, ada yang perlu diperbaiki di sini!\". Kalau kamu bisa tangani error dengan baik, maka kamu bukan cuma ngoding, tapi ngoding dengan **profesionalisme level dewa** \u2694\ufe0f\n\n---\n\n## \ud83d\ude35\u200d\ud83d\udcab Apa Itu Error?\n\n&gt; Error adalah kondisi saat program tidak bisa berjalan sebagaimana mestinya karena ada kesalahan di dalam kode atau input.\n\nError bisa muncul dari:\n- Kesalahan sintaks (typo, kurung kurang, dll)\n- Akses ke variabel yang belum dideklarasi\n- Operasi yang tidak valid (bagi 0? oof.)\n- Masalah jaringan/API\n- dll.\n\n---\n\n## \ud83e\uddea Jenis-jenis Error di JavaScript\n\n| Jenis Error        | Penjelasan                                  |\n|--------------------|----------------------------------------------|\n| `SyntaxError`      | Salah penulisan kode                         |\n| `ReferenceError`   | Akses variabel yang belum dideklarasi        |\n| `TypeError`        | Akses method atau properti yang gak valid    |\n| `RangeError`       | Nilai di luar jangkauan                      |\n| `EvalError`        | Terkait dengan penggunaan `eval()`           |\n| `URIError`         | URI tidak valid (`decodeURIComponent`, dll) |\n\nContoh:\n\n```javascript\nconsole.log(x); // \u274c ReferenceError: x is not defined\n</code></pre>"},{"location":"javascript/26-error-handling/#teknik-dasar-menangani-error","title":"\u2705 Teknik Dasar Menangani Error","text":""},{"location":"javascript/26-error-handling/#1-trycatch","title":"1. <code>try...catch</code>","text":"<pre><code>try {\n  let result = riskyFunction();\n  console.log(result);\n} catch (error) {\n  console.error(\"Terjadi error:\", error.message);\n}\n</code></pre>"},{"location":"javascript/26-error-handling/#2-trycatchfinally","title":"2. <code>try...catch...finally</code>","text":"<pre><code>try {\n  console.log(\"Mulai...\");\n  riskyFunction();\n} catch (e) {\n  console.error(\"Oops!\", e);\n} finally {\n  console.log(\"Cleanup jalan terus, error atau tidak.\");\n}\n</code></pre>"},{"location":"javascript/26-error-handling/#menangani-error-asynchronous-promise-asyncawait","title":"\ud83d\udd04 Menangani Error Asynchronous (Promise &amp; Async/Await)","text":""},{"location":"javascript/26-error-handling/#promise","title":"Promise","text":"<pre><code>fetch('/api/data')\n  .then(res =&gt; res.json())\n  .then(data =&gt; console.log(data))\n  .catch(err =&gt; console.error(\"Fetch error:\", err));\n</code></pre>"},{"location":"javascript/26-error-handling/#asyncawait","title":"Async/Await","text":"<pre><code>async function getData() {\n  try {\n    const res = await fetch('/api/data');\n    const data = await res.json();\n    console.log(data);\n  } catch (err) {\n    console.error(\"Async error:\", err);\n  }\n}\n</code></pre>"},{"location":"javascript/26-error-handling/#custom-error-bikin-error-sendiri","title":"\ud83d\udea7 Custom Error: Bikin Error Sendiri","text":"<pre><code>class ValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ValidationError\";\n  }\n}\n\nfunction validateData(data) {\n  if (!data.name) {\n    throw new ValidationError(\"Nama harus diisi.\");\n  }\n}\n</code></pre> <p>Gunakan <code>instanceof</code> untuk mengecek jenis error:</p> <pre><code>try {\n  validateData({});\n} catch (err) {\n  if (err instanceof ValidationError) {\n    console.warn(\"Input tidak valid:\", err.message);\n  } else {\n    throw err;\n  }\n}\n</code></pre>"},{"location":"javascript/26-error-handling/#best-practice-error-handling","title":"\ud83d\udc6e Best Practice Error Handling","text":"<p>\u2705 Gunakan <code>try/catch</code> untuk blok kode yang rawan error \u2705 Log dengan jelas \u2014 pakai <code>console.error()</code> atau sistem logging \u2705 Hindari swallow error (nangkap error tapi gak ngapa-ngapain) \u2705 Buat error sejelas mungkin untuk debugging \u2705 Tangani error dari <code>fetch</code>, API, parsing, dan I/O</p>"},{"location":"javascript/26-error-handling/#hindari-ini","title":"\ud83e\uddfc Hindari Ini!","text":"<pre><code>try {\n  // kode\n} catch (e) {\n  // kosong, jangan gini!\n}\n</code></pre> <p>Gak ada log, gak ada tindakan. Ini bikin debugging jadi mimpi buruk. Minimal log error-nya!</p>"},{"location":"javascript/26-error-handling/#bonus-global-error-handler-browser","title":"\ud83e\udde0 Bonus: Global Error Handler (Browser)","text":"<p>Tangkap semua error JS yang gak ditangani:</p> <pre><code>window.onerror = function(message, source, lineno, colno, error) {\n  console.error(\"Global error handler:\", message);\n};\n</code></pre>"},{"location":"javascript/26-error-handling/#logging-lebih-serius-opsional","title":"\ud83d\udce6 Logging Lebih Serius (Opsional)","text":"<p>Untuk aplikasi besar: - Gunakan tool seperti Sentry - Atau logging ke server via API</p>"},{"location":"javascript/26-error-handling/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>Penanganan error yang baik = kode yang stabil, mudah debug, dan tahan banting. Jangan takut error \u2014 peluk mereka, tangani dengan lembut, dan log dengan cerdas.</p> <p>\u201cGood error handling turns you from a junior coder into a pro dev.\u201d \u2014 Gen Z Dev \ud83d\ude0e</p> <p>Stay safe, happy debugging! \ud83d\udcaa ```</p>"},{"location":"javascript/27-performance/","title":"Performance","text":"<pre><code># \u26a1 Optimasi Performa JavaScript: Biar Ngebut Kayak Mobil F1\n\nPerforma adalah hal krusial, terutama saat web/app kamu harus responsif, cepat, dan gak bikin user ngantuk nungguin loading. Semakin efisien kodenya, semakin bahagia user-nya (dan servernya juga). \ud83d\ude0e\n\n---\n\n## \ud83d\udea6 Kenapa Performa Penting?\n\n- \u23f1\ufe0f Loading lambat = user kabur\n- \ud83d\udd01 Operasi berat = browser freeze\n- \ud83e\udde0 Kode boros = RAM browser nangis\n- \ud83d\udcc9 SEO bisa terdampak dari kecepatan situs\n\n---\n\n## \ud83d\udd0d Teknik Dasar Optimasi\n\n### 1. Hindari Reflow dan Repaint Berlebihan (DOM Manipulasi)\n\nManipulasi DOM yang sering bisa memperlambat render halaman:\n\n\u274c Buruk:\n```javascript\nfor (let i = 0; i &lt; 1000; i++) {\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n}\n</code></pre> <p>\u2705 Lebih baik:</p> <pre><code>const fragment = document.createDocumentFragment();\nfor (let i = 0; i &lt; 1000; i++) {\n  const div = document.createElement(\"div\");\n  fragment.appendChild(div);\n}\ndocument.body.appendChild(fragment);\n</code></pre>"},{"location":"javascript/27-performance/#2-debounce-dan-throttle","title":"2. Debounce dan Throttle","text":"<p>Buat event seperti scroll atau resize gak nembak terus-terusan.</p> <p>\ud83d\udccc Debounce:</p> <pre><code>function debounce(fn, delay) {\n  let timeout;\n  return function () {\n    clearTimeout(timeout);\n    timeout = setTimeout(fn, delay);\n  };\n}\n</code></pre> <p>\ud83d\udccc Throttle:</p> <pre><code>function throttle(fn, limit) {\n  let waiting = false;\n  return function () {\n    if (!waiting) {\n      fn();\n      waiting = true;\n      setTimeout(() =&gt; waiting = false, limit);\n    }\n  };\n}\n</code></pre>"},{"location":"javascript/27-performance/#3-gunakan-variabel-secukupnya","title":"3. Gunakan Variabel Secukupnya","text":"<p>Jangan bikin variabel yang gak dipakai. Dan jangan ngeloop data besar kalau gak perlu.</p> <pre><code>// Jangan\nlet unusedVar = \"ini gak dipakai\";\n\n// Hindari nested loop berat:\nfor (let i = 0; i &lt; users.length; i++) {\n  for (let j = 0; j &lt; orders.length; j++) {\n    // \ud83d\udc0c lambat banget\n  }\n}\n</code></pre>"},{"location":"javascript/27-performance/#4-optimalkan-loop-dan-array","title":"4. Optimalkan Loop dan Array","text":"<p>\u274c Lambat:</p> <pre><code>for (let i = 0; i &lt; arr.length; i++) { ... }\n</code></pre> <p>\u2705 Lebih optimal:</p> <pre><code>for (let i = 0, len = arr.length; i &lt; len; i++) { ... }\n</code></pre> <p>Atau gunakan <code>.forEach()</code> untuk lebih bersih.</p>"},{"location":"javascript/27-performance/#5-lazy-load-gambar-script","title":"5. Lazy Load Gambar &amp; Script","text":"<p>Tunda load resource yang gak langsung dibutuhkan.</p> <pre><code>&lt;img src=\"foto.jpg\" loading=\"lazy\" /&gt;\n&lt;script async src=\"script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"javascript/27-performance/#6-gunakan-web-worker-untuk-proses-berat","title":"6. Gunakan Web Worker untuk Proses Berat","text":"<p>Pisahkan proses berat dari main thread biar UI gak freeze:</p> <pre><code>const worker = new Worker(\"worker.js\");\nworker.postMessage(\"data\");\n\nworker.onmessage = function (e) {\n  console.log(\"Dari worker:\", e.data);\n};\n</code></pre>"},{"location":"javascript/27-performance/#tips-advance","title":"\ud83e\udde0 Tips Advance","text":"<ul> <li>Cache hasil fetch atau perhitungan berat</li> <li>Gunakan pagination &amp; virtual scrolling untuk data besar</li> <li>Compress data JSON (pakai gzip di backend)</li> <li>Gunakan framework/library ringan</li> <li>Hindari deep cloning berlebihan (<code>JSON.parse(JSON.stringify(...))</code> itu berat!)</li> </ul>"},{"location":"javascript/27-performance/#alat-analisis-performa","title":"\ud83d\udcca Alat Analisis Performa","text":"<ul> <li>Lighthouse (Chrome DevTools)</li> <li>Performance tab (Chrome DevTools)</li> <li>WebPageTest.org</li> <li>JSPerf.com (benchmarking)</li> </ul>"},{"location":"javascript/27-performance/#checklist-optimasi","title":"\u2705 Checklist Optimasi","text":"Checklist Status Gunakan <code>let</code>/<code>const</code> dengan tepat \u2705 Hindari DOM manipulasi berulang \u2705 Gunakan debounce/throttle \u2705 Gunakan fragment untuk batch DOM \u2705 Gunakan lazy loading \u2705 Hindari nested loop \u2705 Gunakan cache \u2705 Analisis performa secara rutin \u2705"},{"location":"javascript/27-performance/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>Optimasi performa bukan cuma soal nulis kode yang jalan, tapi kode yang jalan cepat dan efisien. Di dunia nyata, user gak mau nunggu. Dan kamu gak mau bikin browser crash, kan?</p> <p>\"Fast code is clean code. Clean code is happy dev. Happy dev = peaceful world.\" \u2014 Orang bijak JavaScript \ud83c\udf0d</p> <p>Tulis kode se-efisien mungkin. Minimal, jangan bikin laptop user nyalain kipas jet \ud83d\ude80 ```</p>"},{"location":"javascript/28-eslintrc-prettierrc/","title":"Eslintcr & Prettier","text":""},{"location":"javascript/28-eslintrc-prettierrc/#file-eslintrcjs","title":"\ud83e\udde0 File <code>.eslintrc.js</code>","text":"<pre><code>module.exports = {\n  env: {\n    browser: true,\n    es2021: true,\n    node: true,\n  },\n  extends: [\n    \"eslint:recommended\",\n    \"prettier\", // Integrasi biar gak tabrakan sama Prettier\n  ],\n  parserOptions: {\n    ecmaVersion: \"latest\",\n    sourceType: \"module\",\n  },\n  rules: {\n    // \ud83d\udea8 Gaya koding konsisten\n    indent: [\"error\", 2],\n    quotes: [\"error\", \"single\"],\n    semi: [\"error\", \"always\"],\n    \"no-unused-vars\": [\"warn\"],\n    \"no-console\": [\"warn\"],\n    \"no-debugger\": [\"error\"],\n\n    // \u2728 Optional tambahan\n    \"prefer-const\": [\"error\"],\n    \"eqeqeq\": [\"error\", \"always\"],\n    \"no-var\": [\"error\"],\n  },\n};\n</code></pre>"},{"location":"javascript/28-eslintrc-prettierrc/#file-prettierrc","title":"\ud83c\udfa8 File <code>.prettierrc</code>","text":"<pre><code>{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"printWidth\": 80,\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"trailingComma\": \"es5\",\n  \"bracketSpacing\": true,\n  \"arrowParens\": \"avoid\"\n}\n</code></pre>"},{"location":"javascript/28-eslintrc-prettierrc/#opsional-tambahkan-script-di-packagejson","title":"\ud83e\udde9 Opsional: Tambahkan Script di <code>package.json</code>","text":"<p>Kalau kamu pake Node.js dan punya <code>package.json</code>, tambahin:</p> <pre><code>\"scripts\": {\n  \"lint\": \"eslint .\",\n  \"format\": \"prettier --write .\"\n}\n</code></pre>"},{"location":"javascript/28-eslintrc-prettierrc/#bonus-auto-fix-pas-save-di-vscode","title":"\ud83d\ude80 Bonus: Auto-fix pas save (di VSCode)","text":"<ol> <li>Install extensions:</li> <li>ESLint</li> <li> <p>Prettier \u2013 Code formatter</p> </li> <li> <p>Lalu tambahkan ke <code>settings.json</code> VSCode:</p> </li> </ol> <pre><code>{\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": true,\n    \"source.fixAll.eslint\": true\n  },\n  \"eslint.validate\": [\"javascript\"],\n  \"prettier.enable\": true\n}\n</code></pre>"}]}